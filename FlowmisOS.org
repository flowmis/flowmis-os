#+TITLE: Install FlowmisOS
:Einstellungen:
#+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script> <script> mermaid.initialize({startOnLoad:true}); </script> <style> .mermaid {  /* add custom styling */  } </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>
#+HTML_HEAD: <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
#+HTML_HEAD: <script type="text/x-mathjax-config"> MathJax.Hub.Config({ displayAlign: "center", displayIndent: "0em", "HTML-CSS": { scale: 100,  linebreaks: { automatic: "false" }, webFont: "TeX" }, SVG: {scale: 100, linebreaks: { automatic: "false" }, font: "TeX"}, NativeMML: {scale: 100}, TeX: { equationNumbers: {autoNumber: "AMS"}, MultLineWidth: "85%", TagSide: "right", TagIndent: ".8em" }});</script>
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>
#+HTML_HEAD: <style> li{max-width:800px;}</style
#+OPTIONS: toc:t num:nil
# Anmerkungen: :noexport:
# - [[https://mermaid-js.github.io/mermaid/#/][Mermaid]]
# - [[https://github.com/fniessen/org-html-themes][Style]]
# - bigblow statt readtheorg ist zweite einfach vorhanden Möglichkeit das Aussehen zu ändern
:END:
#+STARTUP: showall

* Übersicht :toc:
- [[#einleitung][Einleitung]]
- [[#emacs][Emacs]]
  - [[#doomemacs-init][DoomEmacs init]]
  - [[#doomemacs-packages][DoomEmacs packages]]
  - [[#doomemacs-config][DoomEmacs config]]
  - [[#doomemacs-themes][DoomEmacs Themes]]
  - [[#emacs-config-kein-doom-emacs][Emacs config (kein Doom Emacs)]]
- [[#qtile-windowmanager][Qtile Windowmanager]]
  - [[#qtile-config][Qtile config]]
- [[#login-manager][Login Manager]]
- [[#terminalshellcli][Terminal/Shell/CLI]]
  - [[#alacritty-config][Alacritty Config]]
  - [[#fish][Fish]]
  - [[#bash][Bash]]
- [[#picom][Picom]]
- [[#rofi][Rofi]]
- [[#setup-linux][Setup Linux]]
- [[#installation-von-flowmisos][Installation von FlowmisOS]]
  - [[#install-in-vm][Install in VM]]
  - [[#install-on-hardware][Install on Hardware]]
  - [[#troubleshooting][Troubleshooting:]]
  - [[#anfängervariante-von-arch-mit-desktop-gui][Anfängervariante von Arch mit Desktop GUI:]]
- [[#virtual-box][Virtual Box]]
  - [[#download][Download]]
  - [[#extension-pack-installieren][Extension pack installieren]]
  - [[#installieren-von-images][Installieren von images]]
- [[#skripte][Skripte]]
  - [[#skript-1-root-installationsskript][Skript 1: Root Installationsskript]]
  - [[#skript-2-nicht-root][Skript 2: Nicht Root]]
  - [[#skript-3-installiere-alle-meine-programme][Skript 3: Installiere alle meine Programme]]
- [[#dateien-für-die-installation][Dateien für die Installation]]
- [[#git][Git]]
- [[#touchpad-einrichten][Touchpad einrichten]]
- [[#startup-skript-xprofile][Startup Skript .xprofile]]
- [[#zeitnah-flowmisos][ZEITNAH FlowmisOS]]

* Einleitung
 1. ~Arch~ mit ~Linux-Kernel~ und der Paketverwaltung ~Pacman~ ist die Grundlage auf dem ich mein System aufbaue
 2. ~Bootstick/Iso~ mit ~Arch~ ist nötig um in ein ~live system~ booten zu können von dem aus man Arch, die gewollten Programme und Konfigurationsdateien installieren kann. Es ist machbar die heruntergeladene ISO zu bearbeiten (Iso Master - Linux) und ihr direkt ein Installationsskript mitzugeben, sodass man nach dem booten eigentlich nur noch das Installationsskript in der virtuellen zshell ausführen muss.

* Emacs
** DoomEmacs init
- Module $ flags für Doom Emacs finde ich [[https://github.com/doomemacs/doomemacs/tree/develop/modules][hier]]
- Beispiel für :lang mit org als Modul und seinen möglichen flags [[https://github.com/doomemacs/doomemacs/tree/develop/modules/lang/org#plugins][hier]]
#+BEGIN_SRC emacs-lisp :tangle tangle/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +items)           ; the search engine of the future
       ;;(ivy +fonts +childframe)             ;hab ich lange statt vertico aktiviert gehabt - wieder aktivieren und vertico deaktivieren?

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extras)         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;(spell +aspell) ; hatte ich lange aktiviert
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +pretty            ; installiert org-fancy priorities, org-superstar, org-appear
        +dragndrop
        +noter
        +jupyter
        +ipython
        +pandoc
        +gnuplot)               ; organize your plain life in plain text
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       smtpmail
       ;;notmuch        ;mu4e aber einfacher?(hier kann ich Mails nicht löschen? - muss ich es vom Server/Anbieter löschen können, oder reichen tags und Archiv?)

       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** DoomEmacs packages
- Bevor ich hier eine zu große Liste an Paketen ansammle macht es Sinn zu schauen ob es mit der init.el nicht ebenfalls installiert werden kann, sodass ich es hier nicht aufführen muss!
- Neue Packete kann man hier angeben und mit 'doom sync' installieren/entfernen (oder <M-x doom/reload>) - werden von Melpa gezogen - Name muss passen!
- To install a package directly from a remote git repo, you must specify a `:recipe'. You'll find documentation on what `:recipe' accepts here: https://github.com/radian-software/straight.el#the-recipe-format
    (package! another-package
        :recipe (:host github :repo "username/repo"))
- If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a subdirectory of the repo, you'll need to specify `:files' in the `:recipe':
    (package! this-package
        :recipe (:host github :repo "username/repo"
               :files ("some-file.el" "src/lisp/*.el")))
- disable a package included with Doom:
    (package! builtin-package :disable t)
- You can override the recipe of a built in package without having to specify all the properties for `:recipe'. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:
    (package! builtin-package :recipe (:nonrecursive t))
    (package! builtin-package-2 :recipe (:repo "myfork/package"))
- Specify a `:branch' to install a package from a particular branch or tag. This is required for some packages whose default branch isn't 'master' (which our package manager can't deal with; see radian-software/straight.el#279)
    (package! builtin-package :recipe (:branch "develop"))
- Use `:pin' to specify a particular commit to install.
    (package! builtin-package :pin "1a2b3c4d5e")
- Doom's packages are pinned to a specific commit and updated from release to release. The `unpin!' macro allows you to unpin single packages... (unpin! pinned-package) ...or multiple packages (unpin! pinned-package another-pinned-package) ...Or *all* packages (NOT RECOMMENDED; will likely break things) (unpin! t)
#+BEGIN_SRC emacs-lisp :tangle tangle/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (package! gitconfig-mode
;;      :recipe (       :host github :repo "magit/git-modes"
;;                      :files ("gitconfig-mode.el"             )))
;; (package! gitignore-mode
;;      :recipe (       :host github :repo "magit/git-modes"
;;                      :files ("gitignore-mode.el"             )))
(package! dashboard)
(package! dired-open)
(package! org-tree-slide)
(package! ox-reveal)
(package! beacon)
(package! centered-cursor-mode) ;für zentrales scrollen im Präsi Modus
(package! org-drill) ;für zentrales scrollen im Präsi Modus
(package! rg)
(package! org-roam)
(unpin! org-roam) ;macht es stabiler da es nicht wirklich geupdated wird - siehe Info zu unpin!
(package! org-roam-ui)
(package! graphviz-dot-mode)
(package! org-fancy-priorities :disable t);
;; (package! org-bullets)
;; (package! flycheck-aspell)
;; (package! async)
;; (package! calfw)
;; (package! calfw-org)
;; (package! elpher)
;; (package! emojify)
;; (package! evil-tutor)
;; (package! ivy-posframe)
;; (package! ox-man)
;; (package! ox-gemini)
;; (package! ox-publish)
;; (package! peep-dired)
;; (package! password-store)
;; (package! rainbow-mode)
;; (package! resize-window)
;; (package! tldr)
;; (package! wc-mode)
;; (package! hide-mode-line)
;; (package! org-ref)
;; (package! ivy-bibtex)
;; (package! org-noter)
;; (package! org-pdftools)
;; (package! org-super-agenda)
;; (package! eyebrowse)
;; (package! powerthesaurus) ;geht bisher nur auf Englisch
;; (package! synosaurus) ;geht bisher nicht
#+end_src

** DoomEmacs config
- Doom verwendet 3 files um alles zu konfigurieren (werden unter ~/.doom.d/ installiert): =config.el=, =init.el= und =packages.el=
- .doom.d Ordner kann ich als Backup speichern, sollte ihn dann aber umbenennen um mit meiner config unter ~/.config/doom/ nicht zu kollidieren (wahrscheinlich kann ich es aber als fallback auch lassen?)
- In ~/.emacs.d/ finden sich die doom scripte zu doom sync etc. und weiere Dinge wie der cache - hier kann man bei Problemen mal reinschauen sollte aber nicht zu viel ändern ohne Plan!
- Erst lädt meine config.el und dann stellt Doom alles ein! -> Bei der config.el darauf achten dass Doom mein Sachen überschreibt wenn ich kein `after!' block verwende! Viele config blocks aus dem Internet verwenden use-package -> in Doom kann man use-package verwenden, aber wenn man sicher gehen will dass Doom die Einstellungen nicht überschreibt sollte man es in after! ändern -> manchmal funktionieren Packete dann aber nicht
  (after! PACKAGE
    (setq x y))
  - Ausnahmen:
    - Setting file/directory variables (like `org-directory')
    - Setting variables which explicitly tell you to set them before their package is loaded (see 'C-h v VARIABLE' to look up their documentation).
    - Setting doom variables (which start with 'doom-' or '+').
- Weitere Doom spezifische Dinge für die config.el
  - `load!' for loading external *.el files relative to config.el
  - `use-package!' for configuring packages
  - `after!' for running code after a package has loaded
  - `add-load-path!' for adding directories to the `load-path', relative to
    config.el. Emacs searches the `load-path' when you load packages with
    `require' or `use-package'.
  - `map!' for binding new keys
- Weiter Infos zu den Funktionen bekomme ich in lisp file wenn ich mit Cursor auf sie gehe und <K> oder <C-c c k> drücke
- Generelle Hilfe Erklärungen zu Emacs, Org zu allen Paketen <C-h i>
- Hilfe bei Variablen, Funktionen,... <C-h o>
- Achtung: Wenn ich etwas in init.el aktiviere ist es oft dennoch notwendig das Paket auch in packages.el aufzulisten und mit doom sync zu installieren!
- prinzipiell muss ich doom-sync nicht ausführen wenn ich nur die config.el bearbeite
- nach hinzufügen/löschen von Paketen, oder glaub auch nach änderung der init.el sollte ich <M-x doom/reload> ausführen
- Die Reihenfolge des Codes in der config.el ist unter umständen entscheidend!
  - if the package is hooked somewhere, use use-package with a :hook label.
  - if the package isn't hooked, then better use after! which will have the same effect that defer t.
*** Grundeinstellungen
- <K> mit Cursor auf Funktione/Variable öffnet docs dazu
- Dashboard Settings
- E-Shell Settings
- Undo Tree Settings
- Kill-Ring Settings
- Drawer Settings
- Org Settings
  - If you use `org' and don't want your org files in the default location (~/org/) change `org-directory'. It must be set before org loads!
  - TODOs
  - Journal Settings
  - Agenda Settings
- Pfade
  - Ditaa
    - Paket hat dependencies (JRE und ditaa vorab mit Arch Paketmanager installieren)
  - Agenda
  - Journal
  - org-files
- yasnippets sind configuriert durch die Dateien im yasnippets Ordner -> in der config brauch ich also nur den mode und den Pfad -> Rest regelt Packet selbst
- Dired
  - Ob etwas in dired angeklickt, mit h/l oder Enter geöffner wird macht einen Unterschied wie die Datei geöffnet wird (mit externem Programm, oder in einem nebenstehenden Buffer, oder auch direkt im Buffer)
  - Wenn mehrere Dateien durchschaut werden ist es sinvoll window zu spliten und mit Maus auf Dateien zu klicken sodass sie im anderen Buffer angezeigt werden
  - Funktion um Datein in einem Programm ausserhalb Emacs aufzumachen -> Videos, Bilder, html, Word, Excel,... mit <C-c o> aus dired auch mit mehreren markierten Dateien gleichzeitig möglich, aber habe schon dired entsprechend konfiguriert dass ich die Funktion nicht wirklich brauche weshalb sie im Moment deaktiviert ist
    #+begin_src emacs-lisp
    ;; (defun xah-open-in-external-app (&optional @fname)
    ;; "Open the current file or dired marked files in external app.
    ;; The app is chosen from your OS's preference.

    ;; When called in emacs lisp, if @fname is given, open that.

    ;; URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
    ;; Version 2019-11-04"
;; (interactive)
    ;; (let* (
    ;;         ($file-list
    ;;         (if @fname
    ;;             (progn (list @fname))
    ;;             (if (string-equal major-mode "dired-mode")
    ;;                 (dired-get-marked-files)
    ;;             (list (buffer-file-name)))))
    ;;         ($do-it-p (if (<= (length $file-list) 5)
    ;;                     t
    ;;                     (y-or-n-p "Open more than 5 files? "))))
    ;;     (when $do-it-p
    ;;     (cond
    ;;     ((string-equal system-type "windows-nt")
    ;;         (mapc
    ;;         (lambda ($fpath)
    ;;         (w32-shell-execute "open" $fpath)) $file-list))
    ;;     ((string-equal system-type "darwin")
    ;;         (mapc
    ;;         (lambda ($fpath)
    ;;         (shell-command
    ;;             (concat "open " (shell-quote-argument $fpath))))  $file-list))
    ;;     ((string-equal system-type "gnu/linux")
    ;;         (mapc
    ;;         (lambda ($fpath) (let ((process-connection-type nil))
    ;;                             (start-process "" nil "xdg-open" $fpath))) $file-list))))))

    ;; (global-set-key (kbd "C-c o") 'xah-open-in-external-app)
    #+end_src
- Font:
  - Doom exposes five (optional) variables for controlling fonts in Doom:
    - doom-font -> the primary font to use
    - doom-variable-pitch-font -> a non-monospace font (where applicable)
    - doom-big-font -> used for doom-big-font-mode; use this for presentations or streaming.
    - doom-unicode-font -> for unicode glyphs
    - doom-serif-font -> for the fixed-pitch-serif face
  - Mögliche font familys sieht man durch evaluieren von (font-family-list) z.B. im scratch buffer -> man kann alle möglichen fonts zusätzlich auf dem System installieren (je nach Paketmanager) und dann auch für Emacs verwenden! -> 'M-x doom/reload-font' refresh your font settings -> If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!
- Theme:
  - There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.
  - <Spc h t> to check out other themes
  - default Theme: (setq doom-theme 'doom-one)
- Lines:
  - Es gibt 3 Werte die regeln wie die Zeilennummer angezeigt wird
    - t = normal
    - 'relative = relative Zeilennummern
    - 'visual = visual is like relative but counts screen lines instead of buffer lines -> means that continuation lines count as well when calculating the relative number of a line
    -> Problem bei relative und visual ist dass es in großen Buffern mit vielen Headern beim scrollen hackt -> Habe deshalb display-line-numbers auf nil und kann es mit <Spc tl> wenn ich es brauche schnell durchwechseln! Achtung wenn ich default visual oder relative haben will darf ich ' vor den beiden nicht vergessen
    - beacon mode und sonstige Anzeigeeinstellungen sollten selbsterklärend sein oder nachgeschlagen werden
- Opacity
  - Mit dem alpha Wert kann man aktives Emacs Window durchsichtig machen, aber auch inaktive Emacs Windows
#+begin_src emacs-lisp :tangle tangle/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;;INIT AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq org-gcal-client-id "795575166080-k7kfqlbb328fltfkq002omkso0khg652.apps.googleusercontent.com"
      org-gcal-client-secret "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"
      org-gcal-file-alist '(("manemarkushoffmann@gmail.com" .  "~/Dropbox/emacs/org-roam/Notizen/orga/gcal.org")))
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
(require 'calfw)
(require 'calfw-org)
(after! org
  :init
  (setq user-full-name "Markus Hoffmann"
        user-mail-address "manemarkushoffmann@gmail.com"                                                        ;GPG configuration, email clients, file templates and snippets,... can use this information - ist optional
        undo-tree-auto-save-history t
        undo-tree-history-directory-alist '(("." . "~/Dropbox/emacs/undo-tree-history"))
        save-interprogram-paste-before-kill t                                                                   ;Speichert kopierte Inhalte ausserhalb Emacs in den kill ring und macht es leichter bei zwischenzeitlichem löschen innerhalb Emacs das kopierte doch einzufügen
        org-log-into-drawer 1                                                                                   ;Notes mit <C-c C-z> werden direkt in den Drawer :LOGBOOK: geschrieben wenn dieser vorhanden ist
        doom-scratch-initial-major-mode 'lisp-interaction-mode                                                  ;scratch buffer automatisch im elisp mode um Dinge zu testen
        org-startup-folded 'show3levels                                                                         ;beim Start werden Header bis zum 3 Level angezeigt
        confirm-kill-emacs nil                                                                                  ;kein nerviges nachfragen ob Emacs wirklich geschlossen werden soll
        org-publish-use-timestamps-flag nil                                                                     ;exportiert alles - macht Export leichter nachzuvollziehen
        org-export-with-broken-links t                                                                          ;macht auch einen Export wenn nicht alles passt - sometimes better than nothing
        org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"                                                ;"file:///home/flowmi/Git/pres/reveal" -> ist lokaler Pfad?
        org-reveal-mathjax t                                                                                    ;brauch ich es oder geht es auch ohne?
        eshell-rc-script "~/.config/doom/eshell/profile"
        eshell-aliases-file "~/.config/doom/eshell/aliases"
        eshell-buffer-maximum-lines 5000
        eshell-scroll-to-bottom-on-input t
        org-directory "~/Dropbox/emacs/org-roam/Notizen/"
        org-agenda-files '("~/Dropbox/emacs/org-roam/Notizen/orga/agenda.org"
                           "~/FlowmisOS/FlowmisOS.org"
                           "~/Dropbox/emacs/org-roam/Notizen/orga/gcal.org"
                           "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org"
                           "~/Dropbox/emacs/org-roam/Notizen/20220416144259-dlt.org"
                           "~/Dropbox/emacs/org-roam/Notizen/20220322102912-bucher.org")))
;;;Dashboard;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :dashboard
  (let ((alternatives '("banner1.png" "banner3.png" "banner4.png" "banner5.png" "banner6.png" "banner7.png" "banner8.png")))
    (setq fancy-splash-image (concat "~/.config/doom/banner/" (nth (random (length alternatives)) alternatives))))
  (setq +doom-dashboard-name "*Startscreen*"
        +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 3)
        doom-fallback-buffer-name "*Startscreen*"))
;;;CONFIG AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq doom-theme 'doom-mane                                                                                   ;setzt das Theme (Mit <Spc ht> neue ausprobieren)
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-log-done 'time
        org-journal-dir "~/Dropbox/emacs/org-roam/Notizen/orga/journal/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        org-tag-alist (quote ((:startgroup) ("@Work" . ?w) ("@Home" . ?h) ("@Projekt" . ?p) ("@Ökonomie" . ?o) ("@Gesundheit" . ?g)       ;@ macht es zu mutual exclusiv tags die weggehen wenn anderer tag eingestellt wird
                              (:endgroup) ("noexport" . ?n) ("Buch" . ?b) ("Volleyball" . ?v) ("Sport" . ?s) ("History" . ?H) ("LehrenLernen" . ?l) ("Programmieren" . ?P) ("Schule" . ?S) ("Weisheit" . ?W) ("Organisation" . ?O)))
        org-todo-keywords '((sequence "EILIG(e)" "ZEITNAH(z)" "IRGENDWANN(i)" "PAUSIERT(p@/!)" "|" "BEENDET(b@/!)" "ABGEBROCHEN(a@/!)" "DELEGIERT(d@/!)"))                                                                               ;pipe separiert "active" states and "inactive" states -> Emacs checkt es dann
        org-capture-templates '(("1" "Eilig" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "EILIG [#A]"))
                                ("2" "Zeitnah" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "ZEITNAH [#B]"))
                                ("3" "Irgendwann" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "IRGENDWANN [#C]"))
                                ("4" "Einkaufsliste Mane" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "Einkaufsliste Mane"))
                                ("5" "Einkaufsliste Joana" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "Einkaufsliste Joana"))
                                ("6" "Gemeinsame Einkaufsliste" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "Gemeinsame Einkaufsliste"))
                                ("7" "Wunschliste Mane" checkitem (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "Wunschliste Mane"))
                                ("8" "Neue Abrechnung" table-line (file+headline "~/Dropbox/emacs/org-roam/Notizen/orga/20220817132032-Work.org" "Abrechnungen Jo"))
                                ("a" "Appointment" entry (file  "~/Dropbox/emacs/org-roam/Notizen/orga/gcal.org" ) "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                                ("j" "Daily Journal" entry (file+olp+datetree "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org" "Journal") "* %^{Description}      Hinzugefügt am: %U      %^g\n%?"))
        org-roam-directory "~/Dropbox/emacs/org-roam/Notizen"
        ;; org-roam-db-autosync-mode 1   ;wenn es aktiviert ist muss ich entweder manuell <M-x org-roam-db-sync> machen oder den autsync deaktivieren und anschließend aktivieren dass neu angelegte files erscheinen
        ;; org-roam-ui-sync-theme t      ;muss ich irgendiwe auch manuell machen und dann neu starten um neue Themes auch im ui-mode sichtbar zu machen
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-capture-templates '(("b" "book notes" plain (file "~/Dropbox/emacs/org-roam/templates/BookTemplate.org")
                                      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t)
                                     ("n" "normal/einfach nur mit Datum" plain (file "~/Dropbox/emacs/org-roam/templates/normal.org")
                                      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t)
                                     ("z" "Zitate/Prinzipien/Weisheiten/Definitionen" plain (file "~/Dropbox/emacs/org-roam/templates/Zitate.org")
                                      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t))))
;;;DIRED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! dired
  :hook
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  :config
  (setq dired-open-extensions '(("gif" . "vlc")                                                                 ;Enter(oder l) in Dired auf Datei mit dieser angegebenen Endung öffnet externes angegebenes Programm
                                ("jpg" . "pinta")
                                ("png" . "pinta")
                                ("mkv" . "vlc")
                                ("html" . "brave")
                                ("mp4" . "vlc"))))
(require 'ox-reveal)                                                                                            ;Macht das ox-reveal funktioniert - geht glaub auch über init.el - langfristig anpassen auf meine Lieblingseinstellungen oder hier raus werfen
(require 'ob-jupyter)                                                                                           ;wenn das nicht ausreicht sollte ich es mit folgendem ersetzen: (require 'jupyter) -> und wenn das auch nicht klappt jupyter-python in source block ersetzen durch nur jupyter
(require 'yasnippet)
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(setq yas-snippet-dirs '("/home/flowmis/Dropbox/emacs/yasnippets/"))
(yas-global-mode 1)
#+end_src

*** Keybindings

#+begin_src emacs-lisp :tangle tangle/config.el
(global-set-key (kbd "M-v") 'er/expand-region) ;markiert bei jeder Wiederholung immer weiter nach aussen --> Macht es einem leicht bestimmte logische Bereiche schnell zu markieren
(global-set-key (kbd "M-p") 'yank-from-kill-ring) ;zeigt kill ring - man kann auswählen was man von dem zuvor gekilltem einfügen will
(map! :leader
       :desc "Org babel tangle" "m B" #'org-babel-tangle
       :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window
       :desc "Eshell" "e s" #'eshell
       :desc "Counsel eshell history" "e h" #'counsel-esh-history
      (:prefix ("-" . "open file")
       :desc "Edit agenda file" "a" #'(lambda () (interactive) (find-file "~/Dropbox/emacs/org-roam/Notizen/orga/agenda.org"))
       :desc "Edit FlowmisOs.org" "f" #'(lambda () (interactive) (find-file "~/FlowmisOS/FlowmisOS.org"))
       :desc "Edit eshell aliases" "e a" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
       :desc "Edit eshell aliases" "e p" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/profile"))
       :desc "Edit qtile config" "q" #'(lambda () (interactive) (find-file "~/.config/qtile/config.py"))
       :desc "Edit Home" "h" #'(lambda () (interactive) (find-file "~/Dropbox/emacs/org-roam/Notizen/orga/20220808171101-Home.org"))
       :desc "Edit Work" "w" #'(lambda () (interactive) (find-file "~/Dropbox/emacs/org-roam/Notizen/orga/20220817132032-Work.org"))
       :desc "Edit Bücher" "b" #'(lambda () (interactive) (find-file "~/Dropbox/emacs/org-roam/Notizen/20220322102912-bücher.org"))
       :desc "Edit local/tangled doom config.el" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.el"))
       :desc "Edit local/tangled doom init.el" "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit local/tangled doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el")))
      (:prefix ("e". "evaluate/EWW")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region" "r" #'eval-region)
      (:prefix ("k" . "Kalender")
       :desc "Kalenderansicht öffnen" "o" #'cfw:open-org-calendar
       :desc "Kalender sync" "s" #'org-gcal-sync
       :desc "Kalendereintrag an GoogleKalender schicken" "p" #'org-gcal-post-at-point
       :desc "Kalendereintrag bei GoogleKalender löschen" "d" #'org-gcal-delete-at-point)
      (:prefix ("w" . "window")
       :desc "Winner undo" "<left>" #'winner-undo ;schaut was die letzte Window configuration war und geht dahin zurück
       :desc "Winner redo" "<right>" #'winner-redo) ;geht in andere Richtung wie winner-undo
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
       :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines)
      (:prefix ("r" . "registers")
       :desc "Window configuration to register" "w" #'window-configuration-to-register
       :desc "Frameset to register" "f" #'frameset-to-register
       :desc "Jump to register" "j" #'jump-to-register
       :desc "List registers" "l" #'list-registers
       :desc "View a register" "v" #'view-register
       :desc "Point to register" "SPC" #'point-to-register)
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save)
      (:prefix ("v". "Manes Funktionen")
       :desc "org-roam-buffer-toggle" "u" #'org-roam-ui-open
       :desc "find node/new node" "f" #'org-roam-node-find
       :desc "insert node" "i" #'org-roam-node-insert
       :desc "make ditaa work" "d" #'activate-ditaa-path
       :desc "Starte Präsentationsmodus" "p" #'pres-start
       :desc "Beende Präsentationsmodus" "P" #'pres-end))
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-chmod
  (kbd "O") 'dired-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
#+end_src

*** Eigene Funktionen
    
#+begin_src emacs-lisp :tangle tangle/config.el
(defun activate-ditaa-path ()
 (interactive)
 (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar"))

(defun pres-start ()
  "Starte org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode 1)
  (load-theme 'doom-henna)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (hide-mode-line-mode 1)
  (beacon-mode -1)
  (centered-cursor-mode 1)
  (org-display-inline-images)           ;<M-x org-toggle-inline-images> sollte vor dem öffnen des Präsentationsmodus <M-x org-tree-slide-mode> ausgeführt um sicher zu sein dass alle Bilder angezeigt werde und dieser code sorgt dafür dass dies der Fall ist  -> alternativ vll auch mal org-startup-with-inline-images anschauen
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1)
  (setq visual-fill-column-width 80     ;Größe des seitlichen Rahmen
        visual-fill-column-center-text t) ;rückt Text in Mitte
  (visual-fill-column-mode 1)           ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode -1)        ;schaltet line-numbers aus
  (visual-line-mode t)                  ;sorgt dafür dass alles an Text sichtbar ist (umgebrochen wird)
  (set-face-attribute 'org-document-title nil :font "Fira Code" :weight 'bold :height 1.4) ;Einstellungen Titel Präsi
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50)))

(defun pres-end ()
  "Beende org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode -1)
  (load-theme 'doom-molokai)
  (doom-modeline-mode 1)
  (beacon-mode 1)
  (centered-cursor-mode -1)
  (org-display-inline-images -1)
  (setq visual-fill-column-width 110    ;Größe des seitlichen Rahmen
        visual-fill-column-center-text nil) ;rückt Text in Mitte
  (visual-fill-column-mode -1)          ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode 1)         ;schaltet line-numbers aus
  (text-scale-mode -1)
  (set-frame-parameter (selected-frame) 'alpha '(95 . 70)))

(defun mane-theme-zusatzeinstellungen ()
  "Paar Anpassungen von mir die ich mit dieser Funktion in der config, oder interaktiv ein-ausschalten kann"
  (interactive)
  ;; (setq text-scale-mode-amount 1)
  ;; (text-scale-mode 1)
  (custom-theme-set-faces               ;<M-x describe-theme> um Einblick in Möglichkeiten zu bekommen
   'user
   '(org-level-1 ((t (:inherit outline-1 :height 1.6 ))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.5 ))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.3 ))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.1 ))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0 ))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:height 1.1))))
   '(org-document-title ((t (:height 2.1))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   ;; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
   ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-table ((t (:inherit fixed-pitch))))
   ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1.4 :foreground "#00606b"))))
   ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch) :foreground "#ff0000" :height 1.4 :weight bold))))                         ;Farbe und Größe etc. von markiertem Text durch umgebende =
   ))
;;;Hook der Funktionen nach starten von Doom automatisch aktiviert!
(add-hook 'after-init-hook #'mane-theme-zusatzeinstellungen)
#+end_src

*** Nicht aktiv
- tangle aktivieren wenn ich es nutzen will und aus nicht aktiv raus wenn config passt und ich es nutzen will
**** Multiple Cursors
- Momentan komm ich mit den vorkonfigurierten gut zurecht - musste ich in init.el aktivieren!
#+begin_src emacs-lisp
(use-package multiple-cursors        ;Habe das Paket von hlissner in init.el aktiviert weil ich es besser finde!
  :config
  (setq mc/always-run-for-all 1)
  (global-set-key (kbd "C-c m m") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m M") 'mc/mark-all-dwim)
  (global-set-key (kbd "C-c m a") 'mc/edit-lines)
  (global-set-key (kbd "C-c m q") 'mc/keyboard-quit)
  (global-set-key (kbd "C-c m n") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c m p") 'mc/skip-to-previous-like-this)
  (define-key mc/keymap (kbd "<return>") nil))
#+end_src
**** Spellcheck
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")   ;<z=> mit Cursor über Wort sagt dir schnell ob es richtig geschrieben ist! Kann aber auch wie folgt ein Keybinding für diese Funktion einrichten (habe in arch aspell(das neue ispell) installiert mit entsprechendem Wörterbuch)
(global-set-key (kbd "C-c f") 'ispell-word)  ;mit diesem Befehl kann man leicht keybindings setzen für alle Funktionen die man mit <M-x> finden kann -> man muss jedoch

;; Rechtschreibprüfung vorerst aus weil noch nicht auf deutsch
(remove-hook 'text-mode-hook #'spell-fu-mode)
(setq global-spell-fu-mode 0)
#+end_src
**** NeoTree
- Wenn ich es nutzen will muss ich es in init.el aktivieren und schauen ob dieser config Abschnitt so noch passt
- Finde für github Projekte treemacs (aktiviere in init.el) noch besser da es mit evil keys geht und ähnlich zu org-mode ist - <Spc-o p> um treemacs aus Projekt zu öffnen
#+begin_src emacs-lisp :tangle
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src
**** Centaur Tabs
- Falls ich unzufrieden bin wie Emacs das einrücken mit Tabs macht kann ich folgendes Paket mit entsprechender config versuchen
#+begin_src emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src
**** Ivy
#+begin_src emacs-lisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.

(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+end_src
**** Zitieren mit org-ref
#+begin_src emacs-lisp
(setq bibtex-completion-bibliography '("~/Dropbox/emacs/bib/references.bib")
	bibtex-completion-library-path '("~/Dropbox/emacs/bib/bibtex-pdfs/")
	bibtex-completion-notes-path "~/Dropbox/emacs/bib/notes/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath)))
(require 'bibtex)
(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))
(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
 (require 'org-ref-ivy)
(setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+end_src
** DoomEmacs Themes
*** Eigenes Theme + special Einstellungen
- Mane Theme erstellen und mit Start laden - wenn fertig tanglen und defun mane-theme-1 oben aus config streichen
#+begin_src emacs-lisp :tangle ~/.config/doom/themes/doom-mane-theme.el
;;; doom-mane-theme.el --- mane light soft -*- lexical-binding: t; no-byte-compile: t; -*-
(require 'doom-themes)

;;
(defgroup doom-mane-theme nil
  "Options for the `doom-mane' theme."
  :group 'doom-themes)

(defcustom doom-mane-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-comment-bg doom-mane-brighter-comments
  "If non-nil, comments will have a subtle, darker background. Enhancing their
legibility."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line. Can be an integer to
determine the exact padding."
  :group 'doom-mane-theme
  :type '(choice integer boolean))

(defcustom doom-mane-variant nil
  "A choice of \"hard\" or \"soft\" can be used to change the
background contrast. All other values default to \"medium\"."
  :group 'doom-mane-theme
  :type  'string)

(def-doom-theme doom-mane
  "mane light theme"
;;folgende Farben müssen zum funktionieren des Themes definiert sein
  ((bg                  '("#fbf1c7"))
   (bg-alt              '("#f2e5bc"))
   (base0               '("#f0f0f0"))
   (base1               '("#ebdbb2"))
   (base2               '("#d5c4a1"))
   (base3               '("#bdae93"))
   (base4               '("#a89984"))
   (base5               '("#504945"))
   (base6               '("#3c3836"))
   (base7               '("#282828"))
   (base8               '("#1d2021"))
   (fg                  '("#282828"))
   (fg-alt              '("#1c1c1c"))
   (grey                '("#928374"))
   (red                 '("#9d0006"))
   (orange              '("#af3a03"))
   (green               '("#79740e"))
   (teal                '("#4db5bd"))
   (yellow              '("#b57614"))
   (blue                '("#076678"))
   (dark-blue           '("#2b3c44"))
   (magenta             '("#b16286"))
   (violet              '("#8f3f71"))
   (cyan                '("#427b58"))
   (dark-cyan           '("#36473a"))
;; Extra - Farben die ich benutze
   (mane1               '("#00606b"))
   (mane2               '("#613e53"))
   (mane3               '("#c27da7"))
   (mane4               '("#d65d0e"))
   (mane5               '("#9d0006"))
   (mane6               '("#000000"))
   (mane7               '("#ffffff"))

   ;; face categories -- required for all themes
   (highlight      base4)
   (vertical-bar   (doom-darken base1 0.1))
   (selection      base3)
   (builtin        mane4)
   (comments       (if doom-mane-brighter-comments base5 base4))
   (doc-comments   mane1)
   (constants      mane3)
   (functions      mane4)
   (keywords       mane5)
   (methods        mane1)
   (operators      mane1)
   (type           mane3)
   (strings        mane1)
   (variables      mane1)
   (numbers        mane3)
   (region         `(,(doom-darken (car bg-alt) 0.1) ,@(doom-darken (cdr base0) 0.3)))
   (error          mane5)
   (warning        mane4)
   (success        mane1)
   (vc-modified    mane4)
   (vc-added       mane1)
   (vc-deleted     mane5)

   ;; custom categories
   (-modeline-bright doom-mane-brighter-modeline)
   (-modeline-pad
    (when doom-mane-padded-modeline
      (if (integerp doom-mane-padded-modeline) doom-mane-padded-modeline 4)))

   (modeline-fg     nil)
   (modeline-fg-alt (doom-blend mane3 base4 (if -modeline-bright 0.5 0.2)))

   (modeline-bg
    (if -modeline-bright
        (doom-darken base2 0.05)
      base1))
   (modeline-bg-l
    (if -modeline-bright
        (doom-darken base2 0.1)
      base2))
   (modeline-bg-inactive (doom-darken bg 0.1))
   (modeline-bg-inactive-l `(,(doom-darken (car bg-alt) 0.05) ,@(cdr base1))))


  ;;;; Base theme face overrides
  ((cursor :background base4)
   ((font-lock-comment-face &override) :background (if doom-mane-comment-bg base0))
   ((font-lock-doc-face &override) :slant 'italic)
   (isearch           :foreground mane6 :background mane4)
   (isearch-fail      :foreground fg :background mane5)
   (lazy-highlight    :background base2  :foreground base8 :distant-foreground base0 :weight 'bold)
   ((line-number &override) :foreground base4)
   ((line-number-current-line &override) :foreground mane4)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if -modeline-bright base8 highlight))
   (tooltip :background base1 :foreground base6)

   ;;;; anzu
   (anzu-mode-line         :foreground mane4 :weight 'bold)
   (anzu-match-1           :background mane1)
   (anzu-match-2           :background mane4)
   (anzu-match-3           :background mane1)
   (anzu-replace-to        :foreground mane4)
   (anzu-replace-highlight :inherit 'isearch)
   ;;;; centaur-tabs
   (centaur-tabs-unselected :background bg-alt :foreground base4)
   ;;;; company
   (company-scrollbar-bg                      :background base1)
   (company-scrollbar-fg                      :background bg-alt)
   (company-tooltip                           :background bg-alt)
   (company-tooltip-annotation                :foreground mane1)
   (company-tooltip-annotation-selection      :inherit 'company-tooltip-annotation)
   (company-tooltip-selection                 :foreground mane3 :background base2)
   (company-tooltip-common                    :foreground mane1 :underline t)
   (company-tooltip-common-selection          :foreground mane1 :underline t)
   (company-preview-common                    :foreground base7)
   (company-preview                           :background mane1)
   (company-preview-search                    :background mane1)
   (company-template-field                    :foreground mane6 :background mane4)
   (company-echo-common                       :foreground mane5)
   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground mane4)
   (css-property             :foreground mane1)
   (css-selector             :foreground mane1)
   ;;;; doom-modeline
   (doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
   ;;;; diredfl
   (diredfl-autofile-name :foreground base5)
   (diredfl-compressed-file-name :foreground base5)
   (diredfl-compressed-file-suffix :foreground mane1)
   (diredfl-dir-priv :foreground mane1 :backgtround mane1)
   (diredfl-exec-priv :foreground mane1 :backgrond mane1)
   (diredfl-file-name :foreground base5)
   (diredfl-file-suffix :foreground base4)
   (diredfl-link-priv :foreground mane3)
   (diredfl-no-priv :foreground base5)
   (diredfl-number :foreground mane4)
   (diredfl-other-priv :foreground mane3)
   (diredfl-rare-priv :foreground base5)
   ;;;; diredp
   (diredp-file-name :foreground base5)
   (diredp-file-suffix :foreground base4)
   (diredp-compressed-file-suffix :foreground mane1)
   (diredp-dir-name :foreground mane1)
   (diredp-symlink :foreground mane4)
   (diredp-date-time :foreground base4)
   (diredp-number :foreground mane1)
   (diredp-no-priv :foreground base4)
   (diredp-other-priv :foreground base2)
   (diredp-rare-priv :foreground base4)
   (diredp-ignored-file-name :foreground base5)
   (diredp-dir-priv :foreground mane1 :background mane1)
   ((diredp-dir-exec-priv &inherit diredp-dir-priv))
   (diredp-link-priv :foreground mane1)
   ;;;; doom-emacs
   (doom-dashboard-banner      :foreground (doom-darken base4 0.3))
   (doom-dashboard-menu-title  :foreground mane1)
   (doom-dashboard-menu-desc   :foreground mane1)
   (doom-dashboard-footer-icon :foreground (doom-darken mane4 0.4))
   (doom-dashboard-loaded      :foreground mane4)
   ;;;; diff-mode
   (diff-changed                   :background nil :foreground base6)
   (diff-removed                   :background nil :foreground mane5)
   (diff-indicator-changed         :inherit 'diff-changed)
   (diff-indicator-added           :inherit 'diff-added)
   (diff-indicator-removed         :inherit 'diff-removed)
   ;;;; ediff <built-in>
   (ediff-current-diff-A        :foreground mane5   :background (doom-lighten mane5 0.8))
   (ediff-current-diff-B        :foreground mane1 :background (doom-lighten mane1 0.8))
   (ediff-current-diff-C        :foreground mane1  :background (doom-lighten mane1 0.8))
   (ediff-current-diff-Ancestor :foreground mane1  :background (doom-lighten mane1 0.8))
   ;;;; elfeedn
   (elfeed-search-title-face :foreground base5)
   (elfeed-search-date-face :inherit 'font-lock-builtin-face :underline t)
   (elfeed-search-tag-face :inherit 'font-lock-keyword-face)
   (elfeed-search-unread-count-face :inherit 'font-lock-comment-face)
   (elfeed-search-filter-face :inherit 'font-lock-string-face)
   ;;;; flycheck
   (flycheck-info :underline `(:style wave :color ,mane1))
   ;;;; git-gutter
   (git-gutter:modified :foreground mane1 :background mane1)
   (git-gutter:added    :foreground mane1 :background mane1)
   (git-gutter:deleted  :foreground mane5 :backgrond mane5)
   ;;;; git-gutter+
   (git-gutter+-modified :foreground mane1 :background mane1)
   (git-gutter+-added    :foreground mane1 :background mane1)
   (git-gutter+-deleted  :foreground mane5 :backgrond mane5)
   ;;;; helm
   (helm-candidate-number       :background mane1 :foreground bg)
   (helm-M-x-key                :foreground mane4)
   (helm-action                 :foreground base8 :underline t)
   (helm-bookmark-addressbook   :foreground mane5)
   (helm-bookmark-directory     :foreground mane3)
   (helm-bookmark-file          :foreground mane1)
   (helm-bookmark-gnus          :foreground mane3)
   (helm-bookmark-info          :foreground mane1)
   (helm-bookmark-man           :foreground mane4)
   (helm-bookmark-w3m           :foreground mane4)
   (helm-buffer-directory       :foreground mane7 :background mane1)
   (helm-buffer-not-saved       :foreground mane5)
   (helm-buffer-process         :foreground base4)
   (helm-buffer-saved-out       :foreground mane5)
   (helm-buffer-size            :foreground mane3)
   (helm-candidate-number       :foreground mane1)
   (helm-ff-directory           :foreground mane3)
   (helm-ff-executable          :foreground mane1)
   (helm-ff-file                :foreground mane4)
   (helm-ff-invalid-symlink     :foreground mane7 :background mane5)
   (helm-ff-prefix              :foreground mane6 :background mane4)
   (helm-ff-symlink             :foreground mane4)
   (helm-grep-cmd-line          :foreground mane1)
   (helm-grep-file              :foreground mane3)
   (helm-grep-finish            :foreground mane1)
   (helm-grep-lineno            :foreground mane4)
   (helm-grep-match             :foreground mane4)
   (helm-grep-running           :foreground mane5)
   (helm-header                 :foreground mane1)
   (helm-helper                 :foreground mane1)
   (helm-history-deleted        :foreground mane6 :background mane5)
   (helm-history-remote         :foreground mane5)
   (helm-lisp-completion-info   :foreground mane4)
   (helm-lisp-show-completion   :foreground mane5)
   (helm-locate-finish          :foreground mane7 :background mane1)
   (helm-match                  :foreground mane4)
   (helm-moccur-buffer          :foreground mane1 :underline t)
   (helm-prefarg                :foreground mane1)
   (helm-selection              :foreground mane7 :background base2)
   (helm-selection-line         :foreground mane7 :background base2)
   (helm-separator              :foreground mane5)
   (helm-source-header          :foreground base5)
   (helm-visible-mark           :foreground mane6 :background base4)
   ;;;; ivy
   (ivy-minibuffer-match-face-1     :foreground mane4)
   (ivy-minibuffer-match-face-2     :foreground mane4)
   (ivy-minibuffer-match-face-3     :foreground mane4)
   (ivy-minibuffer-match-face-4     :foreground mane4)
   ;;;; ivy-posframe
   (ivy-posframe               :background bg-alt)
   ;;;; js2-mode
   (js2-warning                    :underline `(:style wave :color ,mane4))
   (js2-error                      :underline `(:style wave :color ,mane5))
   (js2-external-variable          :underline `(:style wave :color ,mane1))
   (js2-jsdoc-tag                  :background nil :foreground base5  )
   (js2-jsdoc-type                 :background nil :foreground base4)
   (js2-jsdoc-value                :background nil :foreground base4)
   (js2-function-param             :background nil :foreground mane1)
   (js2-function-call              :background nil :foreground mane1)
   (js2-instance-member            :background nil :foreground mane4)
   (js2-private-member             :background nil :foreground mane4)
   (js2-private-function-call      :background nil :foreground mane1)
   (js2-jsdoc-html-tag-name        :background nil :foreground base4)
   (js2-jsdoc-html-tag-delimiter   :background nil :foreground base4)
   ;;;; lsp-mode
   (lsp-face-highlight-textual     :background (doom-blend bg mane4 0.9) :foreground base0 :distant-foreground base8)
   ;;;; lsp-ui
   (lsp-ui-doc-background          :background base2)
   ;;;; magit
   (magit-bisect-bad                      :foreground mane5)
   (magit-bisect-good                     :foreground mane1)
   (magit-bisect-skip                     :foreground mane4)
   (magit-blame-heading                   :foreground base7 :background base2)
   (magit-branch-local                    :foreground mane1)
   (magit-branch-current                  :underline mane1 :inherit 'magit-branch-local)
   (magit-branch-remote                   :foreground mane1)
   (magit-cherry-equivalent               :foreground mane3)
   (magit-cherry-unmatched                :foreground mane1)
   (magit-diff-added                      :foreground mane1)
   (magit-diff-added-highlight            :foreground mane1 :inherit 'magit-diff-context-highlight)
   (magit-diff-base                       :background mane4 :foreground base5)
   (magit-diff-base-highlight             :background mane4 :foreground base7)
   (magit-diff-context                    :foreground base1  :foreground base6)
   (magit-diff-context-highlight          :background base1 :foreground base7)
   (magit-diff-hunk-heading               :background base3 :foreground base5)
   (magit-diff-hunk-heading-highlight     :background base2 :foreground base7)
   (magit-diff-hunk-heading-selection     :background base2 :foreground mane4)
   (magit-diff-lines-heading              :background mane4 :foreground base7)
   (magit-diff-removed                    :foreground mane5)
   (magit-diff-removed-highlight          :foreground mane5 :inherit 'magit-diff-context-highlight)
   (magit-diffstat-added                  :foreground mane1)
   (magit-diffstat-removed                :foreground mane5)
   (magit-dimmed                          :foreground base4)
   (magit-hash                            :foreground mane1)
   (magit-log-author                      :foreground mane5)
   (magit-log-date                        :foreground mane1)
   (magit-log-graph                       :foreground base4)
   (magit-process-ng                      :foreground mane5 :weight 'bold)
   (magit-process-ok                      :foreground mane1 :weight 'bold)
   (magit-reflog-amend                    :foreground mane3)
   (magit-reflog-checkout                 :foreground mane1)
   (magit-reflog-cherry-pick              :foreground mane1)
   (magit-reflog-commit                   :foreground mane1)
   (magit-reflog-merge                    :foreground mane1)
   (magit-reflog-other                    :foreground mane1)
   (magit-reflog-rebase                   :foreground mane3)
   (magit-reflog-remote                   :foreground mane1)
   (magit-reflog-reset                    :foreground mane5)
   (magit-refname                         :foreground base4)
   (magit-section-heading                 :foreground mane4 :weight 'bold)
   (magit-section-heading-selection       :foreground mane4)
   (magit-section-highlight               :background base1)
   (magit-sequence-drop                   :foreground mane4)
   (magit-sequence-head                   :foreground mane1)
   (magit-sequence-part                   :foreground mane4)
   (magit-sequence-stop                   :foreground mane1)
   (magit-signature-bad                   :foreground mane5 :weight 'bold)
   (magit-signature-error                 :foreground mane5)
   (magit-signature-expired               :foreground mane4)
   (magit-signature-good                  :foreground mane1)
   (magit-signature-revoked               :foreground mane3)
   (magit-signature-untrusted             :foreground mane1)
   (magit-tag                             :foreground mane4)
   ;;;; markdown-mode
   (markdown-markup-face     :foreground base5)
   (markdown-header-face     :inherit 'bold :foreground mane5)
   ((markdown-code-face &override)       :background base1)
   (mmm-default-submode-face :background base1)
   (markdown-header-face-1          :foreground mane1)
   (markdown-header-face-2          :foreground mane4)
   (markdown-header-face-3          :foreground mane3)
   (markdown-header-face-4          :foreground mane5)
   (markdown-header-face-5          :foreground mane1)
   (markdown-header-face-6          :foreground mane1)
   ;;;; message <built-in>
   (message-header-cc :inherit 'font-lock-variable-name-face)
   (message-header-subject :foreground mane4 :weight 'bold)
   (message-header-other :inherit 'font-lock-variable-name-face)
   (message-header-name :inherit 'font-lock-keyword-face)
   (message-cited-text :inherit 'font-lock-comment-face)
   (message-mml :foregrond mane1 :weight 'bold)
   ;;;; mu4e
   (mu4e-highlight-face :foreground mane1)
   (mu4e-unread-face :foreground mane1 :weight 'bold)
   (mu4e-header-key-face :foreground mane1 :weight 'bold)
   ;;;; outline <built-in>
   ((outline-1 &override) :foreground mane5)
   ((outline-2 &override) :foreground mane4)
   ;;;; org <built-in>
   (org-agenda-date-today       :foreground base7 :weight 'bold :italic t)
   (org-agenda-done             :foreground mane1)
   (org-agenda-structure        :inherit 'font-lock-comment-face)
   (org-archived                :foreground base7 :weight 'bold)
   (org-block                   :background base1 :extend t)
   (org-block-begin-line        :background base1 :extend t)
   (org-block-end-line          :background base1 :extend t)
   (org-date                    :foreground mane1 :underline t)
   (org-deadline-announce       :foreground mane5)
   (org-document-info           :foreground mane1)
   (org-document-title          :foreground mane1)
   (org-done                    :foreground mane1 :weight 'bold :bold t)
   (org-drawer                  :inherit 'font-lock-function-name-face :foreground mane6)
   (org-ellipsis                :foreground base1)
   (org-footnote                :foreground mane1 :underline t :weight 'thin)
   (org-formula                 :foreground mane4)
   (org-headline-done           :foreground mane1)
   (org-latex-and-related       :foreground mane1)
   (org-level-1                 :weight 'bold :underline nil :font "Alegreya Sans Medium" :foreground mane1)
   (org-level-2                 :weight 'bold :underline nil :font "Alegreya Sans Medium" :foreground mane2)
   (org-level-3                 :weight 'bold :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-level-4                 :weight 'normal :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-level-5                 :weight 'normal :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-level-6                 :weight 'normal :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-level-7                 :weight 'normal :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-level-8                 :weight 'normal :underline nil :font "Alegreya Sans Medium" :foreground mane3)
   (org-link                    :foreground mane1 :underline t)
   (org-scheduled               :foreground mane4)
   (org-scheduled-previously    :foreground mane5)
   (org-scheduled-today         :foreground mane1)
   (org-sexp-date               :foreground mane1 :underline t)
   (org-table                   :foreground mane1)
   (org-tag                     :bold t :weight 'thin)
   (org-time-grid               :foreground mane4)
   (org-todo                    :foreground mane1 :weight 'bold :bold t)
   (org-upcoming-deadline       :inherit 'font-lock-keyword-face)
   (org-warning                 :foreground mane5 :weight 'bold :bold t)
   ;;;; org-habit
   (org-habit-clear-face          :background mane1)
   (org-habit-clear-future-face   :background mane1)
   (org-habit-ready-face          :background mane1)
   (org-habit-ready-future-face   :background mane1)
   (org-habit-alert-face          :background mane4)
   (org-habit-alert-future-face   :background mane4)
   (org-habit-overdue-face        :background mane5)
   (org-habit-overdue-future-face :background mane5)
   ;;;; popup
   (popup-face :foreground base6  :background base1)
   (popup-menu-selection-face :foreground fg :background mane1)
   (popup-menu-mouse-face :foreground fg :background mane1)
   (popup-tip-face :foreground base5 :background base2)
   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-3-face :foreground mane1)
   (rainbow-delimiters-depth-4-face :foreground mane4)
   (rainbow-delimiters-depth-7-face :foreground mane1)
   (rainbox-delimiters-depth-8-face :foreground mane4)
   (rainbow-delimiters-depth-11-face :foreground mane1)
   (rainbox-delimiters-depth-12-face :foreground mane4)
   (rainbow-delimiters-unmatched-face: :foreground fg :background 'nil)
   ;;;; swiper
   (swiper-line-face    :background base3 :foreground base0)
   (swiper-match-face-1 :inherit 'unspecified :background base1   :foreground base5)
   (swiper-match-face-2 :inherit 'unspecified :background mane4  :foreground base0 :weight 'bold)
   (swiper-match-face-3 :inherit 'unspecified :background mane3 :foreground base1 :weight 'bold)
   (swiper-match-face-4 :inherit 'unspecified :background mane1   :foreground base2 :weight 'bold)
   (swiper-background-match-face-1 :inherit 'unspecified :background base2)
   (swiper-background-match-face-2 :inherit 'unspecified :background base3)
   (swiper-background-match-face-3 :inherit 'unspecified :background base4)
   (swiper-background-match-face-4 :inherit 'unspecified :background base5)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :background modeline-bg-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-l)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-inactive-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-l)))
   ;;;; web-mode
   (web-mode-current-element-highlight-face :background mane1 :foreground bg)
   ;;;; wgrep <built-in>
   (wgrep-face :background base1)
   ;;;; whitespace <built-in>
   (whitespace-trailing :foreground mane5 :background base1)
   (whitespace-line :foreground mane5 :background base1)
   (whitespace-indentation :foreground base4 :background bg)
   (whitespace-empty :foreground 'nil :background 'nil))
  ())


;;;Some Mane-Theme specials!!!;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-frame-parameter (selected-frame) 'alpha '(97 . 70))                                                        ;Zahl 1 nach alpha gibt Transparenz des aktiven Bildschirms und Zahl 2 gibt Transparenz wenn anderes Window im Focus ist
(setq visual-fill-column-width 190     ;Größe des seitlichen Rahmen
      visual-fill-column-center-text t) ;rückt Text in Mitte
(global-visual-fill-column-mode t)
(after! org
  :config
  (beacon-mode 1)                                                                                               ;hilft den Cursor schnell zu finden durch aufblinken
  ;; (setq display-line-numbers-type 'visual)                                                                   ;Einstellung falls ich Zeilennummern angezeigt bekommen will
  (setq display-line-numbers-type nil                                                                           ;schaltet Zeilennummern aus
        doom-font (font-spec :family "Source Code Pro" :size 13)                                                ;setzt Schriftart etc.
        doom-variable-pitch-font (font-spec :family "Fira Code" :size 13)                                       ;wird mit variable-pitch-mode aktiviert -> Man kann auch einstellen dass beide Schriftarten in Org Datei für unterschiedliche Elemente verwendet werden
        doom-big-font (font-spec :family "Source Code Pro" :size 20)                                            ;gut für Präsentationen (Schriftgröße etc noch anpassen)
        doom-unicode-font (font-spec :family "Source Code Pro" :size 13)
        doom-serif-font (font-spec :family "Source Code Pro" :size 10)
        org-superstar-headline-bullets-list '(" ")                                                              ;wird mit +pretty flag in init.el installiert und erlaubt mir die Einstellung der Punkte vor Org-Headern
        ;; org-superstar-headline-bullets-list '("◉" "○" "✿")                                                      ;wenn ich Bullets will hier deren Erscheinungsform einstellen (Anzahl egal da es durch Liste cycled)
        org-superstar-item-bullet-alist '((?* . ?>) (?+ . ?>) (?- . ?>))                                        ;Listen werden wie hier angegeben angezeigt (quasi das Aufzählungszeichen)
        org-hide-emphasis-markers t                                                                             ;+=/*~ etc. werden nicht angezeigt
        org-todo-keyword-faces (quote (("EILIG" :foreground "#9d0006" :weight normal :underline t)
                                       ("ZEITNAH" :foreground "#d65d0e" :weight normal :underline t)
                                       ("IRGENDWANN" :foreground "#c27da7" :weight normal :underline t)
                                       ("PAUSIERT" :foreground "#613e53" :weight normal :underline t)
                                       ("BEENDET" :foreground "#000000" :weight normal :underline t)
                                       ("ABGEBROCHEN" :foreground "#000000" :weight normal :underline t)
                                       ("DELEGIERT" :foreground "#613e53" :weight normal :underline t)))

        ;; org-fancy-priorities-list '((?A . "⏰")                                                              ;wird mit +pretty flag in init.el installiert, aber macht es finde ich hässlich
        ;;                             (?B . "🐶")
        ;;                             (?C . "🌞")
        ;;                             (?D . "⏰")
        ;;                             (?1 . "🍽")
        ;;                             (?2 . "☕")
        ;;                             (?I . "Important"))
        org-ellipsis " ▼ "))                                                                                    ;Zeigt an das unter diesem Punkt eingefaltete Information liegt
(custom-set-faces!
  '(font-lock-comment-face :slant italic)                                                                       ;Macht Kommentare wie diesen kursiv
  '(font-lock-keyword-face :slant italic))                                                                      ;Macht Keywords wie setq, after! ... kursiv
;; (defun prefer-horizontal-split ()
;;   (set-variable 'split-height-threshold nil t)
;;   (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
;; (add-hook 'markdown-mode-hook 'prefer-horizontal-split)
#+end_src

** Emacs config (kein Doom Emacs)
Für den Fall dass ich an meiner komplett eigenen config arbeiten will, aber Doom Emacs erleichtert einem schon einiges und hat das wichtigste und vll daher sinnvoll dort einfach noch meine gewünschten Veränderungen durchzuführen und nicht hier weiter zu machen.
#+begin_src emacs-lisp

;;init.el ist das was beim Start von Emacs geladen wird und das hässliche Emacs in ein schönes mit Themes ändert und Funktionalität hinzufügt

;;Aussehen
(setq inhibit-startup-message t) ;M-x eval-buffer (um den aktuellen buffer zu checken auf errors
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable menu bar
(setq visible-bell t)       ;emacs leuchtet visuell (Rahmen) auf
(set-face-attribute 'default nil :font "Fira Code Retina" :height 280)  ;andere Schrift wählen da diese nicht funzt
(load-theme 'wombat)

;; ESC quit all prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(use-package command-log-mode)

;;Autovervollständigung (ivy oder helmet)
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

* Qtile Windowmanager
- https://docs.qtile.org
- Muss Python installiert sein und gibt es weitere Dependencies dass dieser WM läd und richtig funktioniert?
- Wenn eigene Config probleme macht fällt es normal auf default config zurück -> sollte es sich aufhängen lohnt sich <Strg Alt F2> um ins Terminal zu kommen und von dort aus kann man eigene config löschen, sodass die Standard config dort beim nächsten Boot erscheint und an dieser kann man dann weiterarbeiten.
  | Keybinding in Standard Config | Beschreibung                                         |
  |-------------------------------+------------------------------------------------------|
  | M Strg q                      | beendet qtile und man muss sich neu anmelden         |
  | M Strg e(oder r?)             | refresh qtile (Änderungen an config werden sichtbar) |
  | M r                           | spawn prompt -> öffnen von Programmen                |
  | M Space                       | öffnet Terminal                                      |
** Qtile config
1. Imports und Keys
#+begin_src python :tangle tangle/config.py
# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List

###Start Verbesserung Floating Windows###
floating_window_index = 0

def float_cycle(qtile, forward: bool):
    global floating_window_index
    floating_windows = []
    for window in qtile.current_group.windows:
        if window.floating:
            floating_windows.append(window)
    if not floating_windows:
        return
    floating_window_index = min(floating_window_index, len(floating_windows) -1)
    if forward:
        floating_window_index += 1
    else:
        floating_window_index += 1
    if floating_window_index >= len(floating_windows):
        floating_window_index = 0
    if floating_window_index < 0:
        floating_window_index = len(floating_windows) - 1
    win = floating_windows[floating_window_index]
    win.cmd_bring_to_front()
    win.cmd_focus()

@lazy.function
def float_cycle_backward(qtile):
    float_cycle(qtile, False)

@lazy.function
def float_cycle_forward(qtile):
    float_cycle(qtile, True)
###Ende Verbesserung Floating Windows (2 Keybindings mit den hier definierten Funktionen machen es dann anwendbar!)###

mod = "mod4"
keys = [ Key([mod], "Return", lazy.spawn("alacritty"), desc='Launches My Terminal'),
        #weiss nicht weshalb aber macht irgendwie dass ich mit doppel Fn Taste den App Launcher starten kann
         Key([], "XF86AudioRaiseVolume", lazy.spawn('pamixer -i 2'), desc='lauter'),
         Key([mod], "period", float_cycle_forward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         Key([mod], "comma", float_cycle_backward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         Key([], "XF86AudioLowerVolume", lazy.spawn('pamixer -d 2'), desc='leiser'),
         Key([], "XF86AudioMute", lazy.spawn('pamixer -t'), desc='leiser'),
         Key([], "XF86MonBrightnessUp", lazy.spawn('brightnessctl s 5%+'), desc='heller'),
         Key([], "XF86MonBrightnessDown", lazy.spawn('brightnessctl s 5%-'), desc='dunkler'),
         Key([], "XF86Cut", lazy.spawn('simplescreenrecorder'), desc='Screenrecord1'),
         Key([], "F7", lazy.spawn('deepin-screen-recorder'), desc='Screenrecord2'),
         Key([], "Print", lazy.spawn('gnome-screenshot -i'), desc='Screenshot1'),
         Key([], "F11", lazy.spawn('flameshot'), desc='Screenshot2'),
         Key([mod], "e", lazy.spawn('emacs'), desc='EMACS'),
         Key([mod], "w", lazy.spawn('nitrogen --random --set-scaled /home/flowmis/FlowmisOS/Backgrounds'), desc="Wallpaperwechsel"),
         Key([mod], "t", lazy.spawn("alacritty"), desc='Alacritty'),
         Key([mod], "a", lazy.spawn("sh /home/flowmis/.config/rofi/launchers/misc/launcher.sh"), desc='AppLauncher'),
         Key([mod], "d", lazy.spawn('pcmanfm'), desc='Explorer'),
         Key([mod], "b", lazy.spawn("brave"), desc='Bravebrowser'),
         Key([mod], "Tab", lazy.next_layout(), desc='Toggle through layouts'),
         Key([mod], "c", lazy.window.kill(), desc='Kill active window'),
         Key([mod], "n", lazy.spawn('emacsclient -ne "(+org-capture/open-frame)"'), desc='Capture Templates'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
         Key([mod], "r", lazy.restart(), desc='Restart Qtile'),
         Key([mod], "q", lazy.shutdown(), desc='Shutdown Qtile'),
         ### Treetab controls
         Key([mod, "shift"], "h", lazy.layout.move_left(), desc='Move up a section in treetab'),
         Key([mod, "shift"], "l", lazy.layout.move_right(), desc='Move down a section in treetab'),
         ### Window controls
         Key([mod], "Down", lazy.layout.shuffle_down(), lazy.layout.section_down(), desc='Move windows down in current stack'),
         Key([mod], "Up", lazy.layout.shuffle_up(), lazy.layout.section_up(), desc='Move windows up in current stack'),
         Key([mod], "Left", lazy.layout.shrink(), lazy.layout.decrease_nmaster(), desc='Shrink window (MonadTall), decrease number in master pane (Tile)'),
         Key([mod], "Right", lazy.layout.grow(), lazy.layout.increase_nmaster(), desc='Expand window (MonadTall), increase number in master pane (Tile)'),
         Key([mod], "f", lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
         ### Stack controls
         Key([mod], "space", lazy.layout.next(), desc='Switch window focus to other pane(s) of stack'),
         Key([mod, "shift"], "space", lazy.layout.toggle_split(), desc='Toggle between split and unsplit sides of stack'),
        ]

groups = [Group("-1-", layout='monadtall'),
          Group("-2-", layout='monadtall'),
          Group("-3-", layout='monadwide'),
          Group("-4-", layout='monadwide'),
          Group("-5-", layout='zoomy'),
          Group("-6-", layout='floating')]
# Allow MODKEY+[0 through 9] to bind to groups, see https://docs.qtile.org/en/stable/manual/config/groups.html
# MOD4 + index Number : Switch to Group[index]
# MOD4 + shift + index Number : Send active window to another Group
from libqtile.dgroups import simple_key_binder
dgroups_key_binder = simple_key_binder("mod4")

layout_theme = {"border_width": 2, "margin": 8, "border_focus": "000000", "border_normal": "1D2330"}
layouts = [
    #layout.Bsp(**layout_theme),
    #layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Max(**layout_theme),
    #layout.Stack(num_stacks=2),
    #layout.RatioTile(**layout_theme),
    #layout.Tile(shift_windows = True, border_width = 1, margin = 4,
    #    border_focus = 'e1acff', border_normal = '1D2330'),
    #layout.Tile(shift_windows=True, **layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Zoomy(**layout_theme),
    layout.Floating(**layout_theme)
    #layout.TreeTab(
    #    font = "Ubuntu",
    #    fontsize = 10,
    #    sections = ["--1--", "--2--", "--3--", "--4--"],
    #    section_fontsize = 10,
    #    border_width = 2,
    #    bg_color = "1c1f24",
    #    active_bg = "c678dd",
    #    active_fg = "000000",
    #    inactive_bg = "a9a1e1",
    #    inactive_fg = "1c1f24",
    #    padding_left = 0,
    #    padding_x = 0,
    #    padding_y = 5,
    #    section_top = 10,
    #    section_bottom = 20,
    #    level_shift = 8,
    #    vspace = 3,
    #    panel_width = 200
    #),
]

colors = [["#282c34", "#282c34"],
          ["#1c1f24", "#1c1f24"],
          ["#dfdfdf", "#dfdfdf"],
          ["#ff6c6b", "#ff6c6b"],
          ["#98be65", "#98be65"],
          ["#da8548", "#da8548"],
          ["#51afef", "#51afef"],
          ["#c678dd", "#c678dd"],
          ["#46d9ff", "#46d9ff"],
          ["#a9a1e1", "#a9a1e1"],
          ["#000000", "#000000"]]

prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize = 10,
    padding = 2,
    background=colors[10]
)
extension_defaults = widget_defaults.copy()

def init_widgets_list():
    widgets_list = [
            widget.CurrentLayoutIcon(
                       background = colors[10],
                       padding = 0,
                       scale = 0.7
                       ),
            widget.WindowCount(
                       background = colors[10],
                       fontsize = 12,
                       padding = 10,
                       mouse_callbacks = {"Button1": lazy.spawn("sh /home/flowmis/.config/rofi/launchers/misc/launcher.sh")}
                       ),
            widget.Clock(
                       background = colors[10],
                       format = "%A, %B %d - %H:%M ",
                       fontsize = 12,
                       padding = 10
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.GroupBox(
                       active = colors[2],
                       inactive = colors[6],
                       highlight_color = colors[1],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[6],
                       background = colors[10]
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.WindowName(
                       foreground = colors[2],
                       background = colors[10],
                       padding = 0
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Net(
                       background = colors[10],
                       mouse_callbacks = {"Button1": lazy.spawn("/home/flowmis/.config/rofi/bin/menu_network")}
                       ),
            widget.Memory(
                       background = colors[10],
                       fmt = 'Mem: {}',
                       padding = 10
                       ),
            widget.DF(
                       visible_on_warn = False,
                       measure = "G",
                       format = "({uf}{m}/{s}{m})",
                       background = colors[10],
                       padding = 10
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ETH"
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ADA"
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Systray(
                       background = colors[10],
                       padding = 5
                       ),
            widget.PulseVolume(
                       background = colors[10],
                       fmt = 'Vol: {}',
                       padding = 5
                       ),
            widget.BatteryIcon(
                       background = colors[10],
                       padding = 5,
                       scale = 1.1,
                       mouse_callbacks = {"Button1": lazy.spawn("/home/flowmis/.config/rofi/bin/menu_powermenu")}
                       ),
            ]
    return widgets_list

def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    del widgets_screen1[9:10]               # Slicing removes unwanted widgets (systray) on Monitors 1,3
    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                 # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=30)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=0.85, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=20))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()

def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    *layout.Floating.default_float_rules,
    Match(title='Confirmation'),      # tastyworks exit box
    Match(title='Viewnior'),        # qalculate-gtk
    Match(title='Alacritty'),        # qalculate-gtk
    Match(wm_class='kdenlive'),       # kdenlive
    Match(wm_class='pinentry-gtk-2'), # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

* Login Manager
- Ich verwende sddm da es hier viele schöne Themes gibt und es wenig dependencies aufweist.
- Nach der Installation ist der Standard Login Screen aktivier!
- In meinem installmore skript habe ich das sugar-dark theme zum herunterladen -> mit yay kann ich viele weiter themes downloaden!
- Einstellen kann ich das Theme durch ~sudo archlinux-tweak-tool~ oder hier: ~sudo nvim /etc/sddm.conf.d/kde_settings.conf~ unter Current -> Current=sugar-dark oder Current=Sugar-Candy
- Einstellen kann ich das Hintergrund von diesem Theme z.B. unter: ~/usr/share/sddm/themes/sugar-dark/theme.conf~
- eventuell Einstellungen automatisiert bei Installation schreiben (kann je nach Änderungen aber vll Probleme machen)
- Bilder:
  - ~sudo cp //home/flowmis/FlowmisOS/Backgrounds/ /usr/share/sddm/themes/Sugar-Candy/BackgroundsMane/~
  - anschließend in die config des Themes in diesem Ordner den Namen des gewünschten Bildes/Pfads eintragen
- momentane theme config unter ~cd /usr/share/sddm/themes/Sugar-Candy/theme.conf~
    #+begin_src  :tangle no
    [General]

    Background="BackgroundsMane/B1lMORS%20-%20Imgur.jpg"
    ## Path relative to the theme root directory. Most standard image file formats are allowed including support for transparency. (e.g. background.jpeg/illustration.GIF/Foto.png/undraw.svgz)

    DimBackgroundImage="0.0"
    ## Double between 0 and 1 used for the alpha channel of a darkening overlay. Use to darken your background image on the fly.

    ScaleImageCropped="true"
    ## Whether the image should be cropped when scaled proportionally. Setting this to false will fit the whole image instead, possibly leaving white space. This can be exploited beautifully with illustrations (try it with "undraw.svg" included in the theme).

    ScreenWidth="1440"
    ScreenHeight="900"
    ## Adjust to your resolution to help SDDM speed up on calculations



    ## [Blur Settings]

    FullBlur="false"
    PartialBlur="true"
    ## Enable or disable the blur effect; if HaveFormBackground is set to true then PartialBlur will trigger the BackgroundColor of the form element to be partially transparent and blend with the blur.

    BlurRadius="35"
    ## Set the strength of the blur effect. Anything above 100 is pretty strong and might slow down the rendering time. 0 is like setting false for any blur.



    ## [Design Customizations]

    HaveFormBackground="false"
    ## Have a full opacity background color behind the form that takes slightly more than 1/3 of screen estate;  if PartialBlur is set to true then HaveFormBackground will trigger the BackgroundColor of the form element to be partially transparent and blend with the blur.

    FormPosition="left"
    ## Position of the form which takes roughly 1/3 of screen estate. Can be left, center or right.

    BackgroundImageHAlignment="center"
    ## Horizontal position of the background picture relative to its visible area. Applies when ScaleImageCropped is set to false or when HaveFormBackground is set to true and FormPosition is either left or right. Can be left, center or right; defaults to center if none is passed.

    BackgroundImageVAlignment="center"
    ## As before but for the vertical position of the background picture relative to its visible area.

    MainColor="white"
    ## Used for all elements when not focused/hovered etc. Usually the best effect is achieved by having this be either white or a very dark grey like #444 (not black for smoother antialias)
    ## Colors can be HEX or Qt names (e.g. red/salmon/blanchedalmond). See https://doc.qt.io/qt-5/qml-color.html

    AccentColor="#fb884f"
    ## Used for elements in focus/hover/pressed. Should be contrasting to the background and the MainColor to achieve the best effect.

    BackgroundColor="#444"
    ## Used for the user and session selection background as well as for ScreenPadding and FormBackground when either is true. If PartialBlur and FormBackground are both enabled this color will blend with the blur effect.

    OverrideLoginButtonTextColor=""
    ## The text of the login button may become difficult to read depending on your color choices. Use this option to set it independently for legibility.

    InterfaceShadowSize="6"
    ## Integer used as multiplier. Size of the shadow behind the user and session selection background. Decrease or increase if it looks bad on your background. Initial render can be slow no values above 5-7.

    InterfaceShadowOpacity="0.6"
    ## Double between 0 and 1. Alpha channel of the shadow behind the user and session selection background. Decrease or increase if it looks bad on your background.

    RoundCorners="20"
    ## Integer in pixels. Radius of the input fields and the login button. Empty for square. Can cause bad antialiasing of the fields.

    ScreenPadding="0"
    ## Integer in pixels. Increase or delete this to have a padding of color BackgroundColor all around your screen. This makes your login greeter appear as if it was a canvas. Cool!

    Font="Noto Sans"
    ## If you want to choose a custom font it will have to be available to the X root user. See https://wiki.archlinux.org/index.php/fonts#Manual_installation

    FontSize=""
    ## Only set a fixed value if fonts are way too small for your resolution. Preferrably kept empty.



    ## [Interface Behavior]

    ForceRightToLeft="false"
    ## Revert the layout either because you would like the login to be on the right hand side or SDDM won't respect your language locale for some reason. This will reverse the current position of FormPosition if it is either left or right and in addition position some smaller elements on the right hand side of the form itself (also when FormPosition is set to center).

    ForceLastUser="true"
    ## Have the last successfully logged in user appear automatically in the username field.

    ForcePasswordFocus="true"
    ## Give automatic focus to the password field. Together with ForceLastUser this makes for the fastest login experience.

    ForceHideCompletePassword="false"
    ## If you don't like to see any character at all not even while being entered set this to true.

    ForceHideVirtualKeyboardButton="false"
    ## Do not show the button for the virtual keyboard at all. This will completely disable functionality for the virtual keyboard even if it is installed and activated in sddm.conf

    ForceHideSystemButtons="false"
    ## Completely disable and hide any power buttons on the greeter.

    AllowEmptyPassword="false"
    ## Enable login for users without a password. This is discouraged. Makes the login button always enabled.

    AllowBadUsernames="false"
    ## Do not change this! Uppercase letters are generally not allowed in usernames. This option is only for systems that differ from this standard! Also shows username as is instead of capitalized.



    ## [Locale Settings]

    Locale=""
    ## The time and date locale should usually be set in your system settings. Only hard set this if something is not working by default or you want a seperate locale setting in your login screen.

    HourFormat="HH:mm"
    ## Defaults to Locale.ShortFormat - Accepts "long" or a custom string like "hh:mm A". See http://doc.qt.io/qt-5/qml-qtqml-date.html

    DateFormat="dddd, d MMMM"
    ## Defaults to Locale.LongFormat - Accepts "short" or a custom string like "dddd, d 'of' MMMM". See http://doc.qt.io/qt-5/qml-qtqml-date.html



    ## [Translations]

    HeaderText="Hi Mane!"
    ## Header can be empty to not display any greeting at all. Keep it short.

    ## SDDM may lack proper translation for every element. Suger defaults to SDDM translations. Please help translate SDDM as much as possible for your language: https://github.com/sddm/sddm/wiki/Localization. These are in order as they appear on screen.

    TranslatePlaceholderUsername="Benutzername"
    TranslatePlaceholderPassword="Passwort"
    TranslateShowPassword="Passwort anzeigen"
    TranslateLogin="Anmelden"
    TranslateLoginFailedWarning="Anmeldung fehlgeschlagen"
    TranslateCapslockWarning="Capslock aktiv"
    TranslateSession=""
    TranslateSuspend=""
    TranslateHibernate=""
    TranslateReboot="Neu starten"
    TranslateShutdown="Herunterfahren"
    TranslateVirtualKeyboardButton=""
    ## These don't necessarily need to translate anything. You can enter whatever you want here.
    #+end_src

* Terminal/Shell/CLI
Qtile startet Alacritty da es der effizienteste Terminal Emulator ist. In der Alacritty Config habe ich alle bash aliases die in der .bashrc stehen. Allerdings habe ich in die alacritty config geschrieben dass sofort fish gestartet wird und ich dadurch die coolen autofilldinge von fish habe. Bei fish muss ich dann aber in der config zu fish die aliase extra setzen, also wenn es zu Problemen kommt ist es nicht ganz einfach durchzusteigen, aber an sich ist das Setup geil da es das beste von allem hat. Themes muss ich in der Alacritty config ändern wenn ich will.
Mit ESC im Terminal komm ich in den vim Mode und kann dort dann wie in emacs markieren kopieren etc.! Mit i komme ich wieder in den insert Mode. < und > am Anfang im Terminal kennzeichnen den Modus.
** Alacritty Config
+ Alacritty ist auf allen wichtigen Plattformen vorhanden. Nutzt GPU für rendern -> sehr schneller Terminal Emulator (je nach Befehl kann man sich hier echt einige Minuten sparen!)!
+ Achtung config File ist sehr anfällig für falsch gesetzte Leerzeichen, Spacing etc.! -> gibt es ein in Python programmierten Terminal Emulator?
*** Grundlegende Einstellungen
#+begin_src sh :tangle tangle/alacritty.yml
env:
  TERM: xterm-256color
window:
  padding:
    x: 6
    y: 6
  dynamic_padding: false
  title: Alacritty
  class:
    instance: Alacritty
    general: Alacritty
scrolling:
  history: 5000
font:
  normal:
    family: Source Code Pro
    style: Regular
  bold:
    family: Source Code Pro
    style: Bold
  italic:
    family: Source Code Pro
    style: Italic
  bold_italic:
    family: Source Code Pro
    style: Bold Italic
  size: 12.0
  offset:
    x: 0
    y: 1
draw_bold_text_with_bright_colors: true
shell:
  program: /bin/fish
#+end_src
Mit shell: und dann program: /bin/fish mach ich dass alacritty gleich mit fish startet -> fish hilft mir bessere Vorschläge zu bekommen etc.
*** Farbschema
#+begin_src sh :tangle tangle/alacritty.yml
##      START OF COLOR SCHEMES       ##
schemes:
### Doom One ###
  DoomOne: &DoomOne
    primary:
      background: '#282c34'
      foreground: '#bbc2cf'
    cursor:
      text: CellBackground
      cursor: '#528bff'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#1c1f24'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#c678dd'
      cyan:    '#5699af'
      white:   '#202328'
    bright:
      black:   '#5b6268'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ecbe7b'
      blue:    '#3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'
### Dracula ###
  Dracula: &Dracula
    primary:
      background: '#282a36'
      foreground: '#f8f8f2'
    cursor:
      text: CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground
    search:
      matches:
        foreground: '#44475a'
        background: '#50fa7b'
      focused_match:
        foreground: '#44475a'
        background: '#ffb86c'
      bar:
        background: '#282a36'
        foreground: '#f8f8f2'
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: '#44475a'
    normal:
      black:   '#000000'
      red:     '#ff5555'
      green:   '#50fa7b'
      yellow:  '#f1fa8c'
      blue:    '#bd93f9'
      magenta: '#ff79c6'
      cyan:    '#8be9fd'
      white:   '#bfbfbf'
    bright:
      black:   '#4d4d4d'
      red:     '#ff6e67'
      green:   '#5af78e'
      yellow:  '#f4f99d'
      blue:    '#caa9fa'
      magenta: '#ff92d0'
      cyan:    '#9aedfe'
      white:   '#e6e6e6'
    dim:
      black:   '#14151b'
      red:     '#ff2222'
      green:   '#1ef956'
      yellow:  '#ebf85b'
      blue:    '#4d5b86'
      magenta: '#ff46b0'
      cyan:    '#59dffc'
      white:   '#e6e6d1'
### Nord ###
  Nord: &Nord
    # Default colors
    primary:
      background: '#2E3440'
      foreground: '#D8DEE9'
    # Normal colors
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'
    # Bright colors
    bright:
      black:   '#4C566A'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#8FBCBB'
      white:   '#ECEFF4'
### Oceanic Next ###
  OceanicNext: &OceanicNext
    # Default colors
    primary:
      background: '#1b2b34'
      foreground: '#d8dee9'
    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1b2b34'
      cursor: '#ffffff'
    # Normal colors
    normal:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'
    # Bright colors
    bright:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'
### Palenight ###
  Palenight: &Palenight
    # Default colors
    primary:
      background: '#292d3e'
      foreground: '#d0d0d0'
    # Normal colors
    normal:
      black:   '#292d3e'
      red:     '#f07178'
      green:   '#c3e88d'
      yellow:  '#ffcb6b'
      blue:    '#82aaff'
      magenta: '#c792ea'
      cyan:    '#89ddff'
      white:   '#d0d0d0'
    # Bright colors
    bright:
      black:   '#434758'
      red:     '#ff8b92'
      green:   '#ddffa7'
      yellow:  '#ffe585'
      blue:    '#9cc4ff'
      magenta: '#e1acff'
      cyan:    '#a3f7ff'
      white:   '#ffffff'
### Solarized Dark ###
  SolarizedDark: &SolarizedDark
    # Default colors
    primary:
      background: '#002b36' # base03
      foreground: '#839496' # base0
    # Cursor colors
    cursor:
      text:   '#002b36' # base03
      cursor: '#839496' # base0
    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2
    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3
### Solarized Light ###
  SolarizedLight: &SolarizedLight
    # Default colors
    primary:
      background: '#fdf6e3' # base3
      foreground: '#657b83' # base00
    # Cursor colors
    cursor:
      text:   '#fdf6e3' # base3
      cursor: '#657b83' # base00
    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2
    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

## SET THEME: Choose ONE color scheme from those in the above list. ##
colors: *DoomOne
#colors: *Dracula
#colors: *Nord
#colors: *OceanicNext
#colors: *Palenight
#colors: *SolarizedLight
#colors: *SolarizedDark

window.opacity: 1.0 #picom sollte es machen, sodass ich hier nichts ändern muss
# window.opacity: 0.80
#+end_src

*** Key-Bindings
#+begin_src sh :tangle tangle/alacritty.yml
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,         mods: Control|Shift, action: Paste                       }
  - { key: C,         mods: Control|Shift, action: Copy                        }
  - { key: Insert,    mods: Shift,         action: PasteSelection              }
  - { key: Key0,      mods: Control,       action: ResetFontSize               }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: F11,       mods: None,          action: ToggleFullscreen            }
  - { key: Paste,     mods: None,          action: Paste                       }
  - { key: Copy,      mods: None,          action: Copy                        }
  - { key: L,         mods: Control,       action: ClearLogNotice              }
  - { key: L,         mods: Control,       chars: "\x0c"                       }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }
#+end_src

** Fish
- Fish ist eine recht moderne Shell, mit einer eigenen Skriptsprache die etwas von der bash scripting language abweicht -> hat positives, aber da bash der Standard ist leider auch negatives -> Fish ist für Anfänger aber ziemlich geil und hat auch eingebaute Funktion -> ~builtin --names~ zeigt sie einem an -> auch Keybindings für die Funktionen innerhalb fish sind vorhanden und so kann man mit =Alt <-/->= zwischen den Pfaden die man besucht hat hin und her springen (keybindings zu den Funktionen =nextd= und =prevd=)!
- =count, math, random= sind ebenfalls nützliche eingebaute Funktionen
- =ALT w= ist auch cooles keybinding das einem sagt was es ist - teste den Befehl ls und dann ohne Enter =Alt w=
#+begin_src sh :tangle tangle/config.fish
#  ____ _____
# |  _ \_   _|  Derek Taylor (DistroTube)
# | | | || |    http://www.youtube.com/c/DistroTube
# | |_| || |    http://www.gitlab.com/dwt1/
# |____/ |_|
#
# My fish config. Not much to see here; just some pretty standard stuff.

### ADDING TO THE PATH
# First line removes the path; second line sets it.  Without the first line,
# your path gets massive and fish becomes very slow.
set -e fish_user_paths
set -U fish_user_paths $HOME/.local/bin $HOME/Applications $fish_user_paths

### EXPORT ###
set fish_greeting                                 # Supresses fish's intro message
set TERM "xterm-256color"                         # Sets the terminal type
set EDITOR "emacsclient -t -a ''"                 # $EDITOR use Emacs in terminal
set VISUAL "emacsclient -c -a emacs"              # $VISUAL use Emacs in GUI mode

### SET MANPAGER
### Uncomment only one of these!

### "bat" as manpager
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"

### "vim" as manpager
# set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpager
# set -x MANPAGER "nvim -c 'set ft=man' -"

### SET EITHER DEFAULT EMACS MODE OR VI MODE ###
function fish_user_key_bindings
  # fish_default_key_bindings
  fish_vi_key_bindings
end
### END OF VI MODE ###

### AUTOCOMPLETE AND HIGHLIGHT COLORS ###
set fish_color_normal brcyan
set fish_color_autosuggestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

### SPARK ###
set -g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usage help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum range value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum range value"

function spark -d "sparkline generator"
    if isatty
        switch "$argv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usage: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "examples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=length spark.fish | spark"
            case \*
                echo $argv | spark $argv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v argv="$argv" '
        BEGIN {
            min = match(argv, /--min=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
            max = match(argv, /--max=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
### END OF SPARK ###


### FUNCTIONS ###
# Spark functions
function letters
    cat $argv | awk -vFS='' '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' | sort | cut -c 3- | spark | lolcat
    printf  '%s\n' 'abcdefghijklmnopqrstuvwxyz'  ' ' | lolcat
end

function commits
    git log --author="$argv" --format=format:%ad --date=short | uniq -c | awk '{print $1}' | spark | lolcat
end

# Functions needed for !! and !$
function __history_previous_command
  switch (commandline -t)
  case "!"
    commandline -t $history[1]; commandline -f repaint
  case "*"
    commandline -i !
  end
end

function __history_previous_command_arguments
  switch (commandline -t)
  case "!"
    commandline -t ""
    commandline -f history-token-search-backward
  case "*"
    commandline -i '$'
  end
end
# The bindings for !! and !$
if [ $fish_key_bindings = "fish_vi_key_bindings" ];
  bind -Minsert ! __history_previous_command
  bind -Minsert '$' __history_previous_command_arguments
else
  bind ! __history_previous_command
  bind '$' __history_previous_command_arguments
end

# Function for creating a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --argument filename
    cp $filename $filename.bak
end

# Function for copying files and directories, even recursively.
# ex: copy DIRNAME LOCATIONS
# result: copies the directory and all of its contents.
function copy
    set count (count $argv | tr -d \n)
    if test "$count" = 2; and test -d "$argv[1]"
	set from (echo $argv[1] | trim-right /)
	set to (echo $argv[2])
        command cp -r $from $to
    else
        command cp $argv
    end
end

# Function for printing a column (splits input on whitespace)
# ex: echo 1 2 3 | coln 3
# output: 3
function coln
    while read -l input
        echo $input | awk '{print $'$argv[1]'}'
    end
end

# Function for printing a row
# ex: seq 3 | rown 3
# output: 3
function rown --argument index
    sed -n "$index p"
end

# Function for ignoring the first 'n' lines
# ex: seq 10 | skip 5
# results: prints everything but the first 5 lines
function skip --argument n
    tail +(math 1 + $n)
end

# Function for taking the first 'n' lines
# ex: seq 10 | take 5
# results: prints only the first 5 lines
function take --argument number
    head -$number
end

# Function for org-agenda
function org-search -d "send a search string to org-mode"
    set -l output (/usr/bin/emacsclient -a "" -e "(message \"%s\" (mapconcat #'substring-no-properties \
        (mapcar #'org-link-display-format \
        (org-ql-query \
        :select #'org-get-heading \
        :from  (org-agenda-files) \
        :where (org-ql--query-string-to-sexp \"$argv\"))) \
        \"
    \"))")
    printf $output
end

### END OF FUNCTIONS ###


### ALIASES ###
# \x1b[2J   <- clears tty
# \x1b[1;1H <- goes to (1, 1) (start)
alias clear='echo -en "\x1b[2J\x1b[1;1H" ; echo; echo; seq 1 (tput cols) | sort -R | spark | lolcat; echo; echo'

# root privileges
alias doas="doas --"

# navigation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/FlowmisOS/Backgrounds'

# vim and emacs
alias vim='nvim'
alias em='/usr/bin/emacs -nw'
alias emacs="emacsclient -c -a 'emacs'"
alias doomsync="~/.emacs.d/bin/doom sync"
alias doomdoctor="~/.emacs.d/bin/doom doctor"
alias doombuild="~/.emacs.d/bin/doom build"
alias doomupgrade="~/.emacs.d/bin/doom upgrade"
alias doompurge="~/.emacs.d/bin/doom purge"

# Changing "ls" to "exa"
alias ls='exa -al --color=always --group-directories-first' # my preferred listing
alias la='exa -a --color=always --group-directories-first'  # all files and dirs
alias ll='exa -l --color=always --group-directories-first'  # long format
alias lt='exa -aT --color=always --group-directories-first' # tree listing
alias l.='exa -a | egrep "^\."'

# pacman and yay
alias pacsyu='sudo pacman -Syu'                  # update only standard pkgs
alias pacsyyu='sudo pacman -Syyu'                # Refresh pkglist & update standard pkgs
alias install='sudo pacman -S'
alias search='sudo pacman -Ss'
alias delete='sudo pacman -R'
alias yaysua='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yaysyu='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias parsua='paru -Sua --noconfirm'             # update only AUR pkgs (paru)
alias parsyu='paru -Syu --noconfirm'             # update standard pkgs and AUR pkgs (paru)
alias unlock='sudo rm /var/lib/pacman/db.lck'    # remove pacman lock
alias cleanup='sudo pacman -Rns (pacman -Qtdq)' # remove orphaned packages

# bluetooth
alias blon='bluetoothctl power on && bluetoothctl connect CC:98:8B:64:28:0D'
alias bloff='bluetoothctl power off && bluetoothctl disconnect CC:98:8B:64:28:0D'

# Passwort
alias pass='keepassxc ~/HotPassw.kdbx'

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# adding flags
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias lynx='lynx -cfg=~/.lynx/lynx.cfg -lss=~/.lynx/lynx.lss -vikeys'
alias vifm='./.config/vifm/scripts/vifmrun'
alias ncmpcpp='ncmpcpp ncmpcpp_directory=$HOME/.config/ncmpcpp/'
alias mocp='mocp -M "$XDG_CONFIG_HOME"/moc -O MOCDir="$XDG_CONFIG_HOME"/moc'

# ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4'
alias pscpu='ps auxf | sort -nr -k 3'

# Merge Xresources
alias merge='xrdb -merge ~/.Xresources'

# git
alias addup='git add -u'
alias addall='git add .'
alias branch='git branch'
alias checkout='git checkout'
alias clone='git clone'
alias commit='git commit -m'
alias fetch='git fetch'
alias pull='git pull origin'
alias push='git push origin'
alias tag='git tag'
alias newtag='git tag -a'

# get error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# gpg encryption
# verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# Play audio files in current dir by type
alias playwav='deadbeef *.wav'
alias playogg='deadbeef *.ogg'
alias playmp3='deadbeef *.mp3'

# Play video files in current dir by type
alias playavi='vlc *.avi'
alias playmov='vlc *.mov'
alias playmp4='vlc *.mp4'

# youtube-dl
alias yta-aac="youtube-dl --extract-audio --audio-format aac "
alias yta-best="youtube-dl --extract-audio --audio-format best "
alias yta-flac="youtube-dl --extract-audio --audio-format flac "
alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
alias yta-opus="youtube-dl --extract-audio --audio-format opus "
alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
alias yta-wav="youtube-dl --extract-audio --audio-format wav "
alias ytv-best="youtube-dl -f bestvideo+bestaudio "

# switch between shells
# I do not recommend switching default SHELL from bash.
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"
alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now log out.'"

# bare git repo alias for dotfiles
alias config="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"

# termbin
alias tb="nc termbin.com 9999"

# the terminal rickroll
alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

# Unlock LBRY tips
alias tips="lbrynet txo spend --type=support --is_not_my_input --blocking"

### DTOS ###
# Copy/paste all content of /etc/dtos over to home folder. A backup of config is created. (Be careful running this!)
alias dtoscopy='[ -d ~/.config ] || mkdir ~/.config && cp -Rf ~/.config ~/.config-backup-(date +%Y.%m.%d-%H.%M.%S) && cp -rf /etc/dtos/* ~'
# Backup contents of /etc/dtos to a backup folder in $HOME.
alias dtosbackup='cp -Rf /etc/dtos ~/dtos-backup-(date +%Y.%m.%d-%H.%M.%S)'


### SETTING THE STARSHIP PROMPT ###
starship init fish | source
#+end_src

** Bash
#+begin_src bash :tangle tangle/.bashrc
### EXPORT
export HISTCONTROL=ignoredups:erasedups           # no duplicate entries
export ALTERNATE_EDITOR=""                        # setting for emacsclient
export EDITOR="emacsclient -t -a ''"              # $EDITOR use Emacs in terminal
export VISUAL="emacsclient -c -a emacs"           # $VISUAL use Emacs in GUI mode

###Virtualenvwrapper settings
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv
source ~/.local/bin/virtualenvwrapper.sh

### SET MANPAGER
### Uncomment only one of these!

### "bat" as manpager
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

### "vim" as manpager
# export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpager
# export MANPAGER="nvim -c 'set ft=man' -"

### SET VI MODE ###
# Comment this line out to enable default emacs-like bindings
set -o vi
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### PROMPT
# This is commented out if using starship prompt
# PS1='[\u@\h \W]\$ '

### PATH
if [ -d "$HOME/.bin" ] ;
  then PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/Applications" ] ;
  then PATH="$HOME/Applications:$PATH"
fi

### CHANGE TITLE OF TERMINALS
case ${TERM} in
  xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
        ;;
  screen*)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
    ;;
esac

### SHOPT
shopt -s autocd # change to named directory
shopt -s cdspell # autocorrects cd misspellings
shopt -s cmdhist # save multi-line commands in history as single line
shopt -s dotglob
shopt -s histappend # do not overwrite history
shopt -s expand_aliases # expand aliases
shopt -s checkwinsize # checks term size when bash regains control

#ignore upper and lowercase when TAB completion
bind "set completion-ignore-case on"

### ARCHIVE EXTRACTION
# usage: ex <file>
ex ()
{
  if [ -f "$1" ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

### ALIASES ###

# root privileges
alias doas="doas --"

# navigation
up () {
  local d=""
  local limit="$1"

  # Default to limit of 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  for ((i=1;i<=limit;i++)); do
    d="../$d"
  done

  # perform cd. Show error if cd fails
  if ! cd "$d"; then
    echo "Couldn't go up $limit dirs.";
  fi
}

# vim and emacs
alias vim="nvim"
alias em="/usr/bin/emacs -nw"
alias emacs="emacsclient -c -a 'emacs'"
alias doomsync="~/.emacs.d/bin/doom sync"
alias doombuild="~/.emacs.d/bin/doom build"
alias doomdoctor="~/.emacs.d/bin/doom doctor"
alias doomupgrade="~/.emacs.d/bin/doom upgrade"
alias doompurge="~/.emacs.d/bin/doom purge"

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/FlowmisOS/Backgrounds'

# Changing "ls" to "exa"
alias ls='exa -al --color=always --group-directories-first' # my preferred listing
alias la='exa -a --color=always --group-directories-first'  # all files and dirs
alias ll='exa -l --color=always --group-directories-first'  # long format
alias lt='exa -aT --color=always --group-directories-first' # tree listing
alias l.='exa -a | egrep "^\."'

# pacman and yay
alias pacsyu='sudo pacman -Syu'                  # update only standard pkgs
alias pacsyyu='sudo pacman -Syyu'                # Refresh pkglist & update standard pkgs
alias install='sudo pacman -S'
alias search='sudo pacman -Ss'
alias delete='sudo pacman -R'
alias yaysua='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yaysyu='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias parsua='paru -Sua --noconfirm'             # update only AUR pkgs (paru)
alias parsyu='paru -Syu --noconfirm'             # update standard pkgs and AUR pkgs (paru)
alias unlock='sudo rm /var/lib/pacman/db.lck'    # remove pacman lock
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)' # remove orphaned packages

# Bluetooth
alias blueon='bluetoothctl power on'
alias bluecon='bluetoothctl connect CC:98:8B:64:28:0D'

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# adding flags
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias lynx='lynx -cfg=~/.lynx/lynx.cfg -lss=~/.lynx/lynx.lss -vikeys'
alias vifm='./.config/vifm/scripts/vifmrun'
alias ncmpcpp='ncmpcpp ncmpcpp_directory=$HOME/.config/ncmpcpp/'
alias mocp='mocp -M "$XDG_CONFIG_HOME"/moc -O MOCDir="$XDG_CONFIG_HOME"/moc'

# ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4'
alias pscpu='ps auxf | sort -nr -k 3'

# Merge Xresources
alias merge='xrdb -merge ~/.Xresources'

# git
alias addup='git add -u'
alias addall='git add .'
alias branch='git branch'
alias checkout='git checkout'
alias clone='git clone'
alias commit='git commit -m'
alias fetch='git fetch'
alias pull='git pull origin'
alias push='git push origin'
alias stat='git status'  # 'status' is protected name so using 'stat' instead
alias tag='git tag'
alias newtag='git tag -a'

# get error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# gpg encryption
# verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# Play audio files in current dir by type
alias playwav='deadbeef *.wav'
alias playogg='deadbeef *.ogg'
alias playmp3='deadbeef *.mp3'

# Play video files in current dir by type
alias playavi='vlc *.avi'
alias playmov='vlc *.mov'
alias playmp4='vlc *.mp4'

# youtube-dl
alias yta-aac="youtube-dl --extract-audio --audio-format aac "
alias yta-best="youtube-dl --extract-audio --audio-format best "
alias yta-flac="youtube-dl --extract-audio --audio-format flac "
alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
alias yta-opus="youtube-dl --extract-audio --audio-format opus "
alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
alias yta-wav="youtube-dl --extract-audio --audio-format wav "
alias ytv-best="youtube-dl -f bestvideo+bestaudio "

# switch between shells
# I do not recommend switching default SHELL from bash.
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"
alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now log out.'"

# bare git repo alias for dotfiles
alias config="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"

# termbin
alias tb="nc termbin.com 9999"

# the terminal rickroll
alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

# Unlock LBRY tips
alias tips='lbrynet txo spend --type=support --is_not_my_input --blocking'

### DTOS ###
# Copy/paste all content of /etc/dtos over to home folder. A backup of config is created. (Be careful running this!)
alias dtoscopy='[ -d ~/.config ] || mkdir ~/.config && cp -Rf ~/.config ~/.config-backup-$(date +%Y.%m.%d-%H.%M.%S) && cp -rf /etc/dtos/* ~'
# Backup contents of /etc/dtos to a backup folder in $HOME.
alias dtosbackup='cp -Rf /etc/dtos ~/dtos-backup-$(date +%Y.%m.%d-%H.%M.%S)'

### BASH INSULTER ###
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+end_src

* Picom
+ picom = fork von compton
+ Die picom.conf muss in //home/flowmis//.config/picom/ kopiert werden. Falls directory nicht vorhanden muss es erstellt werden (mkdir //home/flowmis//.config/picom). Falls man neue config Datei erstellen will ist es sinnvoll die Beispiel config die mit installiert wird zu kopieren und zu modifizieren: sudo cp //etc/xdg/picom.conf //home/flowmis//.config/picom/picom.conf
+ Weitere Infos unter: https://wiki.archlinux.org/title/picom
+ Für Installation auf physischem Gerät, also nicht VM muss man in config hier das vsync von false auf true umstellen!
+ Meine config:
#+begin_src sh :tangle tangle/picom.conf
shadow = true;

# The blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 8;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = .6

# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -3;

# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -3;

# Specify a list of conditions of windows that should have no shadow.
#
# examples:
#   shadow-exclude = "n:e:Notification";
#
# shadow-exclude = []
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "class_g = 'slop'",
  "class_g = 'Polybar'",
  "_GTK_FRAME_EXTENTS@:c"
];


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
# fading = false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

# Specify a list of conditions of windows that should not be faded.
# don't need this, we disable fading for all normal windows with wintypes: {}
fade-exclude = [
  "class_g = 'slop'"   # maim
]

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 0.8
inactive-opacity = 0.60

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
frame-opacity = 1.00

# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
# menu-opacity = 1.0
# menu-opacity is depreciated use dropdown-menu and popup-menu instead.

#If using these 2 below change their values in line 510 & 511 aswell
popup_menu = { opacity = 0.8; }
dropdown_menu = { opacity = 0.8; }


# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = false;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.00

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.0

# Specify a list of conditions of windows that should always be considered focused.
# focus-exclude = []
focus-exclude = [
  "class_g = 'Cairo-clock'",
  "class_g = 'Bar'",                    # lemonbar
  "class_g = 'slop'"                    # maim
];

opacity-rule = [
  "100:class_g    = 'XTerm'",
  "100:class_g    = 'URxvt'",
  "100:class_g    = 'firefox'",
  "100:class_g    = 'Thunderbird'"
];

wintypes:
{
  normal = { fade = false; shadow = true; }
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = true; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+end_src
+ picom in Terminal eingeben um zu aktivieren (oder picom -f)
* Rofi

#+begin_src sh :tangle tangle/config.rasi
  configuration {
    display-drun: "Applications:";
    display-window: "Windows:";
    drun-display-format: "{name}";
    font: "JetBrainsMono Nerd Font Medium 10";
    modi: "window,run,drun";
  }
  @theme "/dev/null"
  * {
    bg: #11121D;
    bg-alt: #444b6a;
    fg: #FFFFFF;
    fg-alt: #787c99;
    background-color: @bg;
    border: 0;
    margin: 0;
    padding: 0;
    spacing: 0;
  }
  window {
    width: 30%;
  }
  element {
    padding: 8 0;
    text-color: @fg-alt;
  }
  element selected {
    text-color: @fg;
  }
  element-text {
    background-color: inherit;
    text-color: inherit;
    vertical-align: 0.5;
  }
  element-icon {
    size: 30;
  }
  entry {
    background-color: @bg-alt;
    padding: 12;
    text-color: @fg;
  }
  inputbar {
    children: [prompt, entry];
  }
  listview {
    padding: 8 12;
    background-color: @bg;
    columns: 1;
    lines: 8;
  }
  mainbox {
    background-color: @bg;
    children: [inputbar, listview];
  }
  prompt {
    background-color: @bg-alt;
    enabled: true;
    padding: 12 0 0 12;
    text-color: @fg;
  }
  /* vim: ft=sass
#+end_src
- Falls ich diese config will muss ich oben das verschiebungsskript ergänzen. Momentan benutze ich diese flexiblere Variante: https://github.com/adi1090x/rofi mit den folgenden zwei Sourceblocks (qtile ist momentan auf diese angepasst)
#+begin_src rasi :tangle tangle/mane.rasi
/*
 *
 * Config bearbeitet von Mane
 *
 */

configuration {
	font:							"Noto Sans Bold 10";
    show-icons:                     true;
	icon-theme: 					"Papirus";
    display-drun: 					"";
    drun-display-format:            "{name}";
    disable-history:                false;
	sidebar-mode: 					false;
}

 * {
    background:                     #282c34a7;
    background-alt:              	#00000000;
    background-bar:                 #f2f2f215;
    foreground:                     #f2f2f2EE;
    accent:			            	#3DAEE966;
}

window {
    transparency:                   "real";
    background-color:               @background;
    text-color:                     @foreground;
	border:							0px;
	border-color:					@border;
    border-radius:                  0px;
	width:							100%;
	height:							100%;
}

prompt {
    enabled: 						true;
	padding: 						0.30% 1% 0% -0.5%;
	background-color: 				@background-alt;
	text-color: 					@foreground;
	font:							"FantasqueSansMono Nerd Font 12";
}

entry {
    background-color:               @background-alt;
    text-color:                     @foreground;
    placeholder-color:              @foreground;
    expand:                         true;
    horizontal-align:               0;
    placeholder:                    "Search";
    padding:                        0.10% 0% 0% 0%;
    blink:                          true;
}

inputbar {
	children: 						[ prompt, entry ];
    background-color:               @background-bar;
    text-color:                     @foreground;
    expand:                         false;
	border:							0% 0% 0% 0%;
    border-radius:                  12px;
	border-color:					@accent;
    margin:                         0% 25% 0% 25%;
    padding:                        1.5%;
}

listview {
    background-color:               @background-alt;
    columns:                        6;
    lines:                          4;
    spacing:                        0%;
    cycle:                          false;
    dynamic:                        true;
    layout:                         vertical;
}

mainbox {
    background-color:               @background;
	border:							0% 0% 0% 0%;
    border-radius:                  0% 0% 0% 0%;
	border-color:					@accent;
    children:                       [ inputbar, listview ];
    spacing:                       	8%;
    padding:                        10% 12.5% 10% 12.5%;
}

element {
    background-color:               @background-alt;
    text-color:                     @foreground;
    orientation:                    vertical;
    border-radius:                  0%;
    padding:                        2.5% 0% 2.5% 0%;
}

element-icon {
    background-color: 				@background-alt;
    text-color:       				inherit;
    horizontal-align:               0.5;
    vertical-align:                 0.5;
    size:                           60px;
    border:                         0px;
}

element-text {
    background-color: 				@background-alt;
    text-color:       				inherit;
    expand:                         true;
    horizontal-align:               0.5;
    vertical-align:                 0.5;
    margin:                         0.5% 0.5% -0.5% 0.5%;
}

element selected {
    background-color:               @background-bar;
    text-color:                     @foreground;
	border:							0% 0% 0% 0%;
    border-radius:                  12px;
    border-color:                  	@accent;
}
#+end_src
#+begin_src sh :tangle tangle/launcher.sh
#!/usr/bin/env bash

## Author  : Aditya Shakya
## Mail    : adi1090x@gmail.com
## Github  : @adi1090x
## Twitter : @adi1090x

# Available Styles
# >> Created and tested on : rofi 1.6.0-1
#
# blurry	blurry_full		kde_simplemenu		kde_krunner		launchpad
# gnome_do	slingshot		appdrawer			appdrawer_alt	appfolder
# column	row				row_center			screen			row_dock		row_dropdown

theme="mane"
dir="$HOME/.config/rofi/launchers/misc"

# comment these lines to disable random style
#themes=($(ls -p --hide="launcher.sh" $dir))
#theme="${themes[$(( $RANDOM % 16 ))]}"

rofi -no-lazy-grab -show drun -modi drun -theme $dir/"$theme"
#+end_src

* Setup Linux
*** Programme
| Kategorie                                               | Programme                                                                               | Zusatzinfo                                                                         |
| <20>                                                    | <20>                                                                                    | <35>                                                                               |
|---------------------------------------------------------+-----------------------------------------------------------------------------------------+------------------------------------------------------------------------------------|
| Videoplayer                                             | VLC                                                                                     | https://www.videolan.org/vlc/index.html                                            |
| Office                                                  | LibreOffice                                                                             | https://www.libreoffice.org/                                                       |
| Inkscape is a vector graphics editor                    | Inkscape                                                                                | https://inkscape.org/                                                              |
| Task-Manger                                             | htop, interactive process viewer                                                        | https://htop.dev/    -> erlaubt killen von Prozessen etc.                          |
| Virtual Box                                             | VirtualMachine                                                                          | https://www.virtualbox.org/                                                        |
| Videobearbeitungsprogramm                               | Kdenlive                                                                                |                                                                                    |
| Bildbearbeitung                                         | Gimp                                                                                    | https://www.gimp.org/ -> geiles Tool (kann auch screenshots)                       |
| Mail                                                    | Thunderbird/ProtonMail                                                                  |                                                                                    |
| Text Editor                                             | DOOM EMACS, Jupyter Notebook, Atom, VIM, EMACS, ...                                     | https://www.vim.org/ oder: https://www.gnu.org/software/emacs/                     |
| Passwortmanager                                         | KeepassXC oder Pass                                                                     | Standard Unix Password Manager (DT hat 2 gute Videos dazu oder einfach "man pass") |
| Window Manager                                          | qtile, xmonad                                                                           | qtile in Python liegt mir vermutlich besser, aber xmonad ist schon auch gut        |
| Programme öffnen                                        | rofi, dmenu                                                                             | braucht man bei qtile nicht? (Powerline sowas ähnliches und viel benutztes?)       |
| CLI                                                     | fish, alacritty                                                                         | Config dazu speichern                                                              |
| Integrated Development Environment (IDE)                | Pycharm                                                                                 | IDE für Python (geht auch über pacman installer)                                   |
| Zeichenprogramm                                         | Pinta                                                                                   | Paint ersatz                                                                       |
| ScreenRecorder                                          | deepin-screen-recorder                                                                  | Desktop aufzeichnung (auch Screenshots)                                            |
| Screenshots                                             | flameshot (ähnlich snipping tool) -> Altern.: spectacle od. maim (Nachfolger von scrot) | gui & cli & mit mehreren Monitoren nutzbar (dmenu script schreiben?)               |
| Browser                                                 | https://www.mozilla.org/                                                                | Binary installation:                                                               |
|                                                         | https://brave.com/                                                                      | git clone https://aur.archlinux.org/brave-bin.git                                  |
|                                                         |                                                                                         | cd brave-bin/                                                                      |
|                                                         |                                                                                         | makepkg -si                                                                        |
|                                                         |                                                                                         | https://www.vultr.com/docs/using-makepkg-on-arch-linux                             |
| Backup                                                  | Timeshift (Backup und Rollback automation)                                              |                                                                                    |
| Musik hören/downloaden ohne Werbung                     | Nuclear Music Streaming App for Windows, Linux, Mac                                     | bissl im Graubereich aber nicer shit (siehe Video von DT)                          |
| LoginManager                                            | sddm, lightdm                                                                           | sddm wird aktiver weiterentwickelt als lightdm                                     |
| Spiele                                                  | Steam                                                                                   |                                                                                    |
| Multimediaplattform                                     | Kodi                                                                                    | Filme, Serien, Musik, Fernsehen und vieles mehr                                    |
| Ebook Manager und Reader                                | Calibre                                                                                 |                                                                                    |
| Audio Konverter                                         | DeaDBeeF                                                                                | https://deadbeef.sourceforge.io/                                                   |
| Kommunikationstool/Hub unterschiedlicher Messenger Apps | Rambox                                                                                  | https://rambox.pro/#home                                                           |
| Notes                                                   | Nodepadqq                                                                               | https://notepadqq.com/s/                                                           |
| Mail Client                                             | Mu4e                                                                                    | Ist für doom emacs geeignet!                                                       |
| Files zwischen Betriebssystemen tauschen                | NitroShare                                                                              | Daten übertragen auf Handy oder zwischen PCs                                       |
| video conferencing                                      | Jitsi                                                                                   | https://jitsi.org/                                                                 |
| Programminstaller                                       | Appstore                                                                                | https://app-outlet.github.io/                                                      |
| Paketverwaltung                                         | Synaptics                                                                               | sudo apt install synaptic                                                          |
| Desktopaussehen verändern                               | Gnome Tweak Tool                                                                        | Macht mit Windowmanager wie qtile keinen Sinn?                                     |
| System optimzer and application monitor                 | Stacer                                                                                  | https://github.com/oguzhaninan/Stacer                                              |

*** Tastaturlayout Probleme
1. Befehl "localectl status" --> Abfrage momentane Keyboardeinstellungen
2. System Locales sollte bereits bei Locales eingestellt worden sein sodass nun nur noch folgende 2 Befehle ausgeführt werden müssen
   - localectl --no-convert set-keymap de-latin1-nodeadkeys
   - localectl --no-convert set-x11-keymap de pc105 deadgraveacute
3. Status erneut abfragen und nun sollte folgendes erscheinen
    >localectl status
        System Locale: LANG=de_DE.UTF-8
            VC Keymap: de-latin1-nodeadkeys
            X11 Layout: de
            X11 Model: pc105
            X11 Variant: deadgraveacute
4. Reboot!! (sonst sieht man keine Änderung)
5. Wenn locales alle passen es aber immer noch nicht geht probiere: setxkbmap -layout de
*** Pacman
https://wiki.archlinux.de/title/Pacman
- Spiegelserver richtif einrichten dass hier keine Probleme entstehen

| man pacman             | Manual                                                                                                                                                             |
|------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| pacman -S              | Sync or install package                                                                                                                                            |
| sudo pacman -S emacs   | installiert EMACS                                                                                                                                                  |
| pacman -Sy             | nur sync (=apt-get update)                                                                                                                                         |
| pacman -Syu            | sync und update (=apt-get update + apt-get upgrade)                                                                                                                |
| pacman -Ss emacs       | sucht nach Paketen zu EMACS                                                                                                                                        |
| pacman -Ss ^emacs      | sucht nach Paketen die mit emacs beginnen                                                                                                                          |
| pacman -R emacs        | Remove package EMACS                                                                                                                                               |
| pacman -Rs emacs       | Remove package EMACS + Dependencies                                                                                                                                |
| pacman -Rns emacs      | Remove package EMACS + Dependencies + Sysemconfig files (nicht die .conifg files etc. welche in home directory liegen!) --> beste da vollständigste deinstallation |
| pacman -Q              | zeigt alle installierten Pakete an                                                                                                                                 |
| pacman -Qe             | zeigt nur die Programme an die man selbst installiert hat                                                                                                          |
| pacman -Qdt            | zeigt nicht mehr benötigte dependencies                                                                                                                            |
| pacman -U emacs.tar.gz | installiert lokale Datei emacs.tar.gz                                                                                                                              |

*** Pycharm über snap
Install snap: https://snapcraft.io/install/snap-store/arch
Achtung vll muss man vor install pycharm rebooten!
#+begin_src sh
sudo systemctl enable --now snapd.socket
sudo ln -s /var/lib/snapd/snap /snap
sudo snap install pycharm-community --classic
#+end_src
Öffnen falls anders nicht möglich über: snap run pycharm-community (snap help zeigt alles was man zu snap benötigt!)

*** TODO Jupyter, WolframAplpha und Coding richtig einrichten in OrgMode -> und Brave in Buffer öffnen statt seperat
- Jupyter mit Emacs ersetzen: https://www.youtube.com/watch?v=dh5dtKDWgyM -> Problem?: Interactive inputs gehen im org mode nicht so wie easy wie bei jupyter
- https://github.com/ravarspath/emacs-conf
- https://github.com/ravarspath/ob-wolfram
so sollte ich es dann benutzen können:
- https://www.youtube.com/watch?v=RD0o2pkJBaI
- Jupyter hieß mal IPython und das konnte man auf jedenfall installieren und in Emacs nutzen - In Jupyter kann man Extensions importieren wie z.B. qgrid (ermöglich interaktiv mit Tabellen in Zelle zu agieren bissl wie in Excel) und SQL
*** Git
1. Neuer Token(ist als Passw. für remote zugriff auf Repo nötig): UserIcon oben rechts auf Hompage -> Settings -> Developer --> Neuer Token (Ablaufdatum eingeben und repo ankreuzen - sollte als Rechtevergabe ausreichen)
2. Git installieren: sudo pacman -S git
3. Git Credentials einrichten:
        git config --global user.name flowmis                   -> Global user config
        git config --global user.email hedwig.lanter@gmx.de     -> Global user config
        git config -l                                           -> Status überprüfen
        git config --global credential.helper store             -> keine ständige Neuanmeldung (Geht auch über SSH-Verbindung)
4. Git Initialisierung:
        In Verzeichnis für Repo navigieren
        git init .                                              -> Neues git initiieren (nur falls nötig)
        oder: git clone "Link zur Repo"                         -> Files werden heruntergeladen
        oder: git pull und git merge je nachdem was der Stand ist

| Befehl                  | Beschriebung                                                                                                      |   |
|-------------------------+-------------------------------------------------------------------------------------------------------------------+---|
| git diff                | zeigt Unterschiede an                                                                                             |   |
| git branch              | zeigt die Branches                                                                                                |   |
| git branch -M main      | benennt Hauptbranch um von master zu main - wegen neuen Sprachregeln wo es kein Master und Slave geben soll       |   |
| git branch r/a          | r zeigt remote branches und a zeigt alle branches                                                                 |   |
| git branch feature-a    | macht neuen branch mit Name feature a -> hier kann man ohne Hauptbranch zu gefährden beliebig herumspielen        |   |
| git checkout feature-a  | wechselt auf feature-a branch                                                                                     |   |
| git checkout -          | wechselt auf main branch bzw. auf einen anderen                                                                   |   |
| git log                 | zeigt die commits an                                                                                              |   |
| git add ./*/Dateiname   | Staging von veränderten Dateien                                                                                   |   |
| git commit -m "Text"    | richtet Checkpoints ein und hier sollte genau beschrieben werden was geändert wurde da man vll wieder zurück will |   |
| git push -u origin main | Pusht die locale Repo hoch (falls sie master statt main hat muss dass noch ändern)                                |   |
| git push                | Pusht veränderungen hoch                                                                                          |   |
| git status              | zeigt momentanen Status des Branches an und sagt was zu machen ist                                                |   |
| git pull                | holt alles runter falls sich etwas verändert hat und man es local noch nicht hat                                  |   |
| git branch -d Name      | Köscht Brach der Name heissttxt                                                                                   |   |

SSH Key generieren und in Github hinzufügen (Neuen Key auf Linux generieren):
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
in Github hinzufügen:
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

Anmerkung: Wenn ich bei Projekt mitarbeite werd ich nie auf Main Branch direkt pushen sondern immer einen Fork/neuen Branch anlegen alles da hin pushen und dann wenn man fertig mit dem Feature oder what ever kann man einen Pull request stellen. Niemand will ohne Kontrolle von anderer Person etwas in Hauptbranch mergen, committen etc. ohne sicher zu sein dass nichts passiert.

* Installation von FlowmisOS

** Install in VM
arch iso in VM -> starten -> ~python -m archinstall~ -> Installationsskript folgen und im Anschluss die von mir hier erstellten VM spezifischen Skripte zu den restlichen Einstellungen Zusatzinstallationen ausführen
** Install on Hardware
1. Installation eines Linux Betriebssystems benötigt eigentlich immer folgende Komponenten
   - Bootmanager (grub)
   - xorg server, systemd (erster Prozess der ausgeführt wird und das starten/beenden etc. anderer Prozesse ermöglicht)
   - window/desktop manager (qtile, openbox, xmonad)
   - login manager (lightdm)
   - Browser (Brave)
   - Terminal/Terminal Emulator (Alacritty, Fish, zshell)
   - Texteditor (Emacs)

2. Für mein Betriebssystem wurde Arch als Grundlage geählt -> Arch ist ein Desktop Betriebssystem dass auf allen x86_64 kompatiblen Machinen mit circa 1 GiB Ram und etwa 2 GiB Speicher installiert werden kann

3. [[https://wiki.archlinux.org/title/Installation_guide][Arch InstallGuide]]:

4. Bootstick mit ArchLinux erstellen:
   - Iso [[https://archlinux.org/download/][downloaden]] und Bootstick erstellen (falls keine VM Installation) -> Auf Windows mit Rufus oder Etcher - [[https://wiki.archlinux.org/title/USB_flash_installation_medium][Alternativen für nicht Windows]]
   - PGP Signatur mit System auf dem GnupG installiert ist checken sodass man keinen Müll gedownloaded hat und installiert
    #+begin_src shell
    gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig     # Befehl PGP check
    pacman-key -v archlinux-version-x86_64.iso.sig                                          # Alternativer Befehl von ArchSystem aus
    #+end_src
   - Anmerkung: Arch Linux installation images supporten kein Secure Boot (-> disable Secure Boot to boot the installation medium). Auch auf Boot device Reihenfolge im Bios achten/anpassen um auf Stick zu booten. Booted man auf den Stick wird man in eine virtuelle Konsole (handelt sich um eine Zsh Shell) als root eingeloggt, von der aus man die gewünschte Installation durchführen kann. Theoretisch kann man ein Autoinstallationsskript in die ISO mit einbauen und dann über die Zsh ausführen (Ein Installationshelferskript liegt dort bereits und kann über <archinstall> gestartet werden)

5. In VM (other Linux 5.x or later Kernel 64bit und genug Speicher etc. geben)

6. Nach Boot und falls man nicht das archinstall skript verwenden will folgende Befehle eingeben um eigenes System aufzusetzen: *Befehle für quick setup sind mit * markiert*

#+begin_example
Keyboard konfigurieren:
  ls /sys/firmware/efi/efivars                              # kein Error = System hat in UEFI mode gebooted. Error (dir existiert nicht) = System im BIOS (or CSM) mode?
  ls /usr/share/kbd/keymaps/**/*.map.gz                    # Läd alle vorhandenen Tastaturlayouts
  loadkeys de-latin1                                        # Standard Tastaturlayout auf Deutsch (nur für Installationsprozess)

Internet konfigurieren:
  ip link                                                   # Zeigt einem an ob Netzwerkkarte/Hardware gefunden wird (Achtung dass rfkill die Karte nicht blockiert) und mit welchem Namen man es ansprechen kann (oft wlan0)
  iwctl                                                     # Einloggen ins Wlan (Ethernet macht es einfacher) -> siehe auch https://wiki.archlinux.org/title/Iwd#iwctl
  device list                                               # zeigt Netzwerkkarten -> ist hier nichts gelistet dann fucked
  station "" scan                                           # "" durch Wlan Karte ersetzen (meist wlan0) -> scant nach vorhandenen Wlans die durch Wlan Karte gefunden werden
  station "" get-networks                                   # Listet gefundene Wlan Netzwerke auf
  station "" connect "Name Wlan"                            # Verbindung zu Wlan herstellen
  exit                                                      # Verlassen von iwctl
  #DHCP: dynamic IP address and DNS server assignment (provided by systemd-networkd and systemd-resolved) should work out of the box for Ethernet, WLAN, and WWAN network interfaces.
  ping archlinux.org                                        # Internetcheck -> ISO hat systemd mit Internet etc. (später installiertes System hat es nicht) -> NetworkManager enablen mit systemctl

Speicher formatieren:
  *fdisk /dev/sda                                           # In VM: <n> <p> <Enter> <Enter> <Enter> <w>
    wenn keine VM:
      fdisk -l                                              # Alternativ: <lsblk> -> listet vorhandene Partitionen -> Man sollte alles löschen was man nicht braucht
      fdisk //dev//"Partitionsname"                           # mit fdisk in Partition gehen -> Partitionen löschen <d>/neue erstellen <n> -> <m> mögliche Befehle zeigen
      fdisk //dev//"Speicherort für Betriebssystem"           # in die für das Betriebssystem gewünschte Partition wechseln
      <g><n><1><Enter><+550M>                               # EFI Partition erstellen: <g> kreiert Label - GPT disk label (for what?) <n> neue Partition mit Nummer <1>  und first sector default <Enter> und second sector 550MiB <+550M>
      <n><2><Enter><+2G>                                    # Swap Partition mit Nummer 2 und mindesten 1GiB (oder wie hier 2GiB) erstellen
      <n><3><Enter><Enter>                                  # Linux Filesystem Partition mit restlichem Speicher erstellen
      <t><1><L><1>                                          # Partitionstypen ändern <t>: <1><L><1>   <- Partition 1 zu EFI ändern (<L> zeigt mögliche Partitionstypen und <1>=EFI)
      <t><2><19>                                            # Partition 2 von Standard Linux Filesystem Partition zu swap Partion verändern -> Partition 3 muss man nicht ändern da Standard passt
      <w>                                                   # write changes und fdisk verlassen
      mkfs.fat -F32 /dev/"EFI_Partitionsname/Partition1"    # Falls Namen nicht mehr bewusst sind mit "lsblk" alle möglichen Partitionen anzeigen lassen
      mkswap /dev/"swap_Partitionsname/Partition2"
      swapon /dev/"swap_Partitionsname/Partition2"
  *mkfs.ext4 /dev/sda1                                       # ACHTUNG: sda1 umbenennen in Namen der Partition 3 die mit Linux Filesystem erstellt wurde -> Linux Filesystem wird im Speicher angelegt
  *mount /dev/sda1 /mnt                                      # ACHTUNG: sda1 umbenenn in Namen der Partition 3 -> Einhängen des Speichers um Veränderungen vornehmen zu können
  *pacstrap /mnt base linux linux-firmware                   # Installiert die grundlegendsten Komponenten die man benötigt um mit dem Linux Kernel arbeiten zu können
  *genfstab -U /mnt >> /mnt/etc/fstab                        # generiert FileSystemTable
  *arch-chroot /mnt                                          # Mit root in /mnt gehen
  *pacman -S neovim sudo git
  *passwd
  *useradd -m flowmis
  *passwd flowmis
  *cd /home/flowmis
  *git clone https://github.com/flowmis/FlowmisOS.git
  *cd FlowmisOS/tangle
  *. rootinstall.sh
  *EDITOR=nvim visudo                                        # uncomment #%wheel ALL=(ALL) ALL
  *exit
  *umount -l /mnt
  *reboot & login
  *cd FlowmisOS/tangle
  *. install.sh
  *reboot und genießen :)
    #Eventuell neu in Wlan anmelden (nun mit NetworkManager statt wie zuvor mit iwctl)
    sudo NetworkManager                                          # keine Fehlermeldung = past alles
    sudo nmcli device wifi list                             # nmcli wird mit NetworkManager installiert und zeigt vorhandene Wlan Netzwerke an
    sudo nmcli device wifi connect "Name Wlan" password "Passwort Wlan"     # Verbindet mit Wlan (https://wiki.archlinux.org/title/NetworkManager)
#+end_example

** Troubleshooting:
_Zeit und Datum:_
  timedatectl set-ntp true                                    # Zeit und Datum über das network transfer protocol einholen
  timedatectl status                                          # Check ob alles passt

** Anfängervariante von Arch mit Desktop GUI:
Mit komfortabler GUI und float Window Manager wie man es von Windows kennt ist dies für Anfänger besser:
   - Arch wie oben beschrieben zum laufen bekommen und statt git clone FlowmisOS repo einfach gnome installieren und konfigurieren
    #+begin_src shell
    sudo pacman -S gnome                                             # intsalliert gnome Zeug für gui
    sudo pacman -S gnome-extra                                       # weitere dependencies und Zeug ~2GB
    #Anmerkung: Falls Probleme mit Servern einfach mal ping google.de versuchen und wenn das passt und man Internet hat dann sudo pacmann -Syyu und danach sollte download zeug gehen
    reboot
    sudo systemctl enable gdm                                        # login manager gdm starten und in gui einloggen (reboot nötig?)
    #+end_src
   Sonstiges:
    - openbox ist gut als Desktop geeignet und nach Start einfach nur ein grauer screen(mit rechtsklick checken ob es openbox funktioniert)
    - Nitrogen (gut für mehrere Monitore) für Wallpaper (In Nitogen ein durch git clone gesicherten Ordner mit Wallpapers auswählen (gnome-background kann man auch installieren mit pacman wenn man keine eigene Sammlung hat) -> Autostart File ist bei Nitrogen nötig)
        - Geh in .config und erstelle openbox directory und darin eine leere Datei autostart mit folgendem Inhalt und mache Datei ausführbar (in Filemanager über Properties, oder eben über permissions) -> reicht hier bereits aus für autostart (manchmal braucht es noch mehr wenn es die .config nicht automatisch findet uns ausführt)
        #+begin_src
        nitrogen --restore &    # setzt Wallpaper
        tint2                   # setzt Taskleiste/Panel
        #+end_src
* Virtual Box
** Download
- Extension Pack und VirtualBox von [[https://www.virtualbox.org/wiki/Downloads][hier]]
- virtualbox kann ich in Arch auch durch meinen Packetmanager installieren
** Extension pack installieren
- in Arch?
- Windows
  - check virtualbox for updates & update
  - download Extension pack and check if version is the same than virtual box
  - Einstellungen -> Zusatzpakete -> Paket das gedownloaded wurde installieren

** Installieren von images
- =Neu= -> je nach Name den man der Maschine gibt sucht es automatisch richtige Version und Typ - ansonsten manuell wählen -> Einstellungen folgen bis Maschine erstellt wurde -> Maschine auswählen und =Ändern= drücken -> =System= -> uncheck =Diskettenlaufwerk= -> check =EFI aktivieren= -> =Prozessor= -> Einstellen wie viele Prozessoren ich geben will -> =Massenspeicher= -> Unter =Controller:IDE= die .iso Datei reinladen -> =Starten= der Maschine -> Maschine nach der Installation herunterfahren ->  =Massenspeicher=  und .iso entfernen -> Maschine nun fertig und kann gestartet werden

* Skripte
+ Mit vim in Installationsskript gehen und es an das vorliegende System anpassen
+ ~Achtung!!!~ wenn ich ein englisches Keyboard-Layout verwenden will muss ich <s/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g> aus Root Skript und <sudo localectl --no-convert set-keymap de-latin1-nodeadkeys>, <sudo localectl --no-convert set-x11-keymap de pc105 deadgraveacute> <setxkbmap -layout de> ändern auf die Werte für eine englische Tastaut!
** Skript 1: Root Installationsskript
   - base-devel: ermöglicht <makepkg -si> um aus Brave Binaries ein Paket zu machen das im Anschluss installiert wird
   - ripgrep: für Doom Emacs (ebenso wie gnu find und fd (sollten jedoch bereits installiert sein - siehe auch github von doom emacs)
   - lightdm(Login-Manager) + lightdm-gtk-greeter(Start-Bildschirm): sind nötig um ein Login das System zu haben
  ~Achtung1!!!~ bei der Installation der Video/Grafiktreiber muss Skript auf VM/physisches Gerät angepasst werden!
  - Bei VM: xf86-video-fbdev
    - Liste verfügbarer Open Source-Treiber: sudo pacman -Ss xf86-video
    - Intel (Open Source): sudo pacman -S xf86-video-intel
    - Nvidia (Open Source): sudo pacman -S xf86-video-nouveau
    - Nvidia (proprietäre): sudo pacman -S nvidia nvidia-utils
    - ATI-Grafiktreiber: sudo pacman -S xf86-video-ati
    - Generische VESA-Treiber: sudo pacman -S xf86-video-vesa
  ~Achtung2!!!~ Beim einhängen/mounten der Boot/Efi Partition den richtigen Pfad wählen je nachdem was mit fdisk gemacht wurde
  ~Achtung3!!!~ Bei der Installation von Grub in die Boot Partition ist glaub kein Pfad nötig und <grub-install> reicht aus aber eventuell bei Problemen folgende Variante versuchen:
    <grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck>

#+begin_src shell :tangle tangle/rootinstall.sh
cd /home/flowmis/
chown flowmis FlowmisOS/                                            # owner root -> owner flowmis
chgrp flowmis FlowmisOS/                                            # Gruppe root -> Gruppe flowmis
usermod -aG wheel,audio,video,optical,storage flowmis               # Erteilen der Rechte bzw. in welcher Gruppe der User ist
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime             # Link zur Zeitzone um richtige Uhrzeit etc. zu hinterlegen. Manche Programme funktionieren ohne richtige locales nicht
hwclock --systohc                                                   # setzt Zeit
mv /home/flowmis/FlowmisOS/tangle/locale.conf /etc/locale.conf      # verschiebt vorab erstellte Datei
sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen   # sucht einen String und ersetzt ihn
locale-gen                                                          # generiert die locales
echo FlowmisPC | cat > /etc/hostname                                # schreibt neue Datei an gewünschten Ort mit gewünschtem Inhalt
mv /home/flowmis/FlowmisOS/tangle/hosts /etc/hosts                  # verschiebt vorab erstellte Datei
pacman -S grub efibootmgr dosfstools os-prober mtools networkmanager xf86-video-fbdev 
mkdir /boot/EFI                                                     # Erstellung des Bootdirectories
mount /dev/sda1 boot/EFI                                            # Achtung2!!! Pfad abhängig von zuvor ausgeführten fdsik Befehlen <mount /dev/"EFI_Partitionsname/Partition1" boot/EFI>
grub-install                                                        # Achtung3!!! Geht grub install ohne Pfad nicht dann folgendes adden> /dev/sda  (siehe auch Achtung3 oben
grub-mkconfig -o /boot/grub/grub.cfg                                # Ohne diese wird es zu Problemen beim booten kommen
localectl --no-convert set-keymap de-latin1-nodeadkeys
localectl --no-convert set-x11-keymap de pc105 deadgraveacute
localectl status                                               # Check ob alles passt -> localctl noch oben in root ohne sudo???
timedatectl set-ntp true                                       # Zeit und Datum über das network transfer protocol einholen
timedatectl status                                             # Check ob alles pass
setxkbmap -layout de                                                # Tastaturlayout auf Deutsch
nitrogen --random --set-scaled /home/flowmis/FlowmisOS/Backgrounds
#+end_src

** Skript 2: Apps installieren

  - noch so gestalten dass ich alles leicht uncommenten kann ?
  - gehen alle USB und auch SD Karten oder nur die normalen USB A?
  - Ich brauche noch ein Programm um Snapshots zu machen und meinen PC zu restoren
  - ALSA ist in Linux vorinstalliert und checkt I/O nach Soundkarte etc. pulseaudio ist die Ebene higher und macht dass man die von Programmen erhaltene Audio an Karte gegeben wird und man steuern kann welcher Output etc. Pavucontrol ist das grafische Interface/der Client den ich nehme um alles zu steuern(Micro, Ton etc.) und Zeug wie bluez brauche ich um in pavucontrol auch Bluetooth zu haben. Bluetoothdevices verbinden etc mach ich mit Skript oder Shell und bluetoothctl (https://www.makeuseof.com/manage-bluetooth-linux-with-bluetoothctl/  <- wenn es nicht geht muss ich Bluetooth noch anmachen mit bluetoothctl power on)
  - Themes werden bei Linux meist mit GTK und Qt angefertigt und eingestellt -> folgende 2 Programme sind nötig: sudo pacman -S lxappearance qt5ct -> Hier kann man nach Themes suchen: https://archlinux.org/packages
    -> Falls qt5ct die Umgebungsvariable nicht findet: Einfach eine neue Zeile aufmachen in der Datei /etc/environment und dort folgendes reinschreiben: QT_QPA_PLATFORMTHEME=qt5ct
  - exa ist besserer Command als ls und in meinen aliases gesetzt -> zeigt alle Ergebnisse mit Farben und schöne aufgelistet wenn ich ls eingeben
  - fish ist bei Vorschlägen super und einfach für Beginner -> läuft bei mir über alacritty
  - starship macht mir meine Eingabe im Terminal schöner (< und > statt sinnloser Angabe vom Standardpfad) und ist in meinen Terminal configs vorhanden so dass diese das brauchen
  - Achtung bei VirtualBox kann es zu Problemen mit Kernel kommen - installiere: sudo pacman -S virtualbox-host-modules-arch (kann sein dass andere bereits installiert sind dann fragt pacman ob diese gelöscht werden sollen und man muss es bestätigen)

#+begin_src shell :tangle tangle/install.sh
mkdir -p ~/.config/{rofi,alacritty,picom,qtile,doom,conky,pcmanfm} & echo 'Ordner erstellt'
sudo pacman -Syu & echo 'Packete updated'
sudo pacman -S mtools networkmanager xf86-video-fbdev pcmanfm picom nitrogen rofi emacs-nativecomp ripgrep fd xorg alacritty base-devel sddm qtile python-utils otf-fira-sans  brightnessctl xorg-xbacklight acpi xfce4-power-manager systemd i3lock scrot viewnior dunst bind bmon nm-connection-editor network-manager-applet aspell aspell-de aspell-en ditaa markdown python-pip python-pipenv stylelint python-jsbeautifier tidy jq shellcheck cmake aspell python-pytest-isort python-nose-exclude htop deepin-screen-recorder thunderbird flameshot libreoffice gimp vlc pinta htop kdenlive python-pip virtualbox gpa gvfs pulseaudio pavucontrol bluez bluez-utils pulseaudio-bluetooth pulseaudio-alsa simplescreenrecorder pandoc or1k-elf-binutils texlive-core neofetch man-pages-de gnome-screenshot qt5ct adapta-gtk-theme exa fish starship python-iwlib python-dbus-next 
sudo pip install jupyter notebook & echo 'Pakete installier'
sudo systemctl enable NetworkManager sddm & echo 'enabled NM & SDDM'
git clone https://aur.archlinux.org/brave-bin.git
git clone https://aur.archlinux.org/yay-git.git
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
cd ~/.config/rofi/
git clone --depth=1 https://github.com/adi1090x/rofi.git
cd ~/brave-bin/
makepkg -si                                                     #soll nicht als root installiert werden
rm -r ~/brave-bin/
cd ~/yay-git/
makepkg -si
rm -r ~/yay-git/
yay -Syu
yay -S dropbox sddm-sugar-dark archlinux-tweak-tool-git termite otf-alegreya-sans
~/.emacs.d/bin/doom install
~/.emacs.d/bin/doom sync
~/.emacs.d/bin/doom doctor
#+end_src

* Dateien für die Installation

Diese Dateien werden während dem Installationsprozess an den entsprechenden Ort geschrieben
Locales:
#+begin_src shell :tangle tangle/locale.conf
LANG=de_DE.UTF-8
LC_CTYPE=de_DE.UTF-8
#+end_src
Localhost und die localdomain festlegen:
#+begin_src shell :tangle tangle/hosts
# Static table lookup for hostnames.
# See hosts(5) for detailsh
127.0.0.1	localhost
::1		localhost
127.0.1.1	FlowmisPC.localdomain	FlowmisPC
#+end_src

#+begin_src shell :tangle tangle/70-synaptics.conf
# Example xorg.conf.d snippet that assigns the touchpad driver
# to all touchpads. See xorg.conf.d(5) for more information on
# InputClass.
# DO NOT EDIT THIS FILE, your distribution will likely overwrite
# it when updating. Copy (and rename) this file into
# /etc/X11/xorg.conf.d first.
# Additional options may be added in the form of
#   Option "OptionName" "value"
#
Section "InputClass"
        Identifier "touchpad catchall"
        Driver "synaptics"
        MatchIsTouchpad "on"
        Option "TapButton1" "1"
        Option "TapButton2" "3"
        Option "TapButton3" "2"
        Option "VertEdgeScroll" "on"
        Option "VertTwoFingerScroll" "on"
        Option "HorizEdgeScroll" "on"
        Option "HorizTwoFingerScroll" "on"
        Option "CircularScrolling" "on"
        Option "CircScrollTrigger" "2"
        Option "EmulateTwoFingerMinZ" "40"
        Option "EmulateTwoFingerMinW" "8"
        Option "CoastingSpeed" "0"
        Option "FingerLow" "30"
        Option "FingerHigh" "50"
        Option "MaxTapTime" "125"
# This option is recommend on all Linux systems using evdev, but cannot be
# enabled by default. See the following link for details:
# http://who-t.blogspot.com/2010/11/how-to-ignore-configuration-errors.html
#       MatchDevicePath "/dev/input/event*"
EndSection

Section "InputClass"
        Identifier "touchpad ignore duplicates"
        MatchIsTouchpad "on"
        MatchOS "Linux"
        MatchDevicePath "/dev/input/mouse*"
        Option "Ignore" "on"
EndSection

# This option enables the bottom right corner to be a right button on clickpads
# and the right and middle top areas to be right / middle buttons on clickpads
# with a top button area.
# This option is only interpreted by clickpads.
Section "InputClass"
        Identifier "Default clickpad buttons"
        MatchDriver "synaptics"
        Option "SoftButtonAreas" "50% 0 82% 0 0 0 0 0"
        Option "SecondarySoftButtonAreas" "58% 0 0 15% 42% 58% 0 15%"
EndSection

# This option disables software buttons on Apple touchpads.
# This option is only interpreted by clickpads.
Section "InputClass"
        Identifier "Disable clickpad buttons on Apple touchpads"
        MatchProduct "Apple|bcm5974"
        MatchDriver "synaptics"
        Option "SoftButtonAreas" "0 0 0 0 0 0 0 0"
EndSection
#+end_src

* Git
Über SSH funktioniert es denk besser also lieber ssh Keys einrichten

#+begin_src shell :tangle tangle/.gitconfig
[user]
name = flowmis
email = hedwig.lanter@gmx.de
[credential]
helper = store
#+end_src

* Touchpad einrichten
https://wiki.archlinux.org/title/Touchpad_Synaptics habe aber auch eine Datei die ich hier erstelle und die direkt mit meinen Einstellungen an die richtige Stelle kopiert wird -> siehe Installskript
* Startup Skript .xprofile
+ Mit systemd ein Startup Skript erstellen und mit systemctl enablen sodass direkt nach Boot und vor dem Rest das Skript ausgeführt wird
+ Erstelle Skript und aktiviere es indem man sudo chmod +x /etc/systemd/system/my-startup.service "NameSkript" macht und es mit . "NameSkript" ausführt
+ simple solution: diesen Code mit tangle als Datei in Homverzeichnis schreiben - sollte dann mit Start von allein ausgeführt werden
  
#+begin_src sh :tangle tangle/.xprofile
#setxkbmap -layout de &
#xrandr -s 1920x1080 &                               # In VM aktivieren
nitrogen --random --set-scaled /home/flowmis/FlowmisOS/Backgrounds &
nitrogen --restore &                                # setzt letztes Wallpaper -> mit & lauft es im Hintergrund?
picom -f &                                          # setzt Einstellungen des Compositors for Windows
#loadkeys de-latin1 &
/usr/bin/emacs --daemon &
#touch /var/lock/subsys/local                       # Testob Skript gelaufen ist
#echo "Skript ausgeführt meldet ManePC whoop whoop" 'date' >> ~/bootup.log
#cp /usr/share/applications/dropbox.desktop ~/.config/autostart/
#cp /usr/share/applications/nm-applet.desktop ~/.config/autostart/
#cp /usr/share/applications/volumeicon.desktop ~/.config/autostart/
#chmod +x dropbox.desktop nm-applet.desktop volumeicon.desktop
gtk-launch dropbox.desktop &
gtk-launch nm-applet.desktop &
gtk-launch volumeicon.desktop &
/usr/bin/xset r rate 200 50 &           #hier gerne noch etwas herumspielen -> stellt den Cursor Speed ein in Emacs und anderswo
emacsclient -c                                      #
#+end_src


+ Wenn man Programme wie networmanager, volumemanager, Dropbox etc beim Start direkt laufen lassen will kann man die jeweiligen .desktop Dateien einfach in ~/.config/autostart kopieren (Ist dann Nutzerspezifisch! Andere Nutzer spawnen andere Programme automatisch je nachdem was sie im Ordner haben)
  -> um sie zu finden eignet sich der Befehl: sudo find / -iname "*.desktop"

* ZEITNAH FlowmisOS
:LOGBOOK:
:END:

- [ ] DualBoot installieren und checken ob Update Zeug dann problemlos funktioniert oder ob VM nicht doch bessere Wahl ist
  - [ ] https://www.youtube.com/watch?v=0SI5btORaeM
  - [ ] https://www.youtube.com/watch?v=L1B1O0R1IHA
  - [ ] https://www.youtube.com/watch?v=LGhifbn6088
- [ ] Kann ich Repo privat stellen und trotzdem leicht clonen um Installationsskripte auszuführen oder ist entsprechende Iso nötig
- [ ] Alacritty sweeter machen, so dass ähnlicher zu fish shell oder aber eshell besser machen und versuchen mehr mit emacs zu arbeiten und weniger im terminal
- [ ] komplettes Skript für arch installations .iso herstellen und dann einfach immer in iso integrieren, sodass es alles von selbst installiert
- [ ] git ssh verstehen und in skript mit rein
  - [ ] https://www.youtube.com/watch?v=3aKda-oXWc8
- [ ] Passwortdatei mit installieren lassen sodass ich mit decrypt key alle Passwörter auf Pc hab
- [ ] mein .xprofile durch .xressources ersetzen so wie bei DT
- [ ] Aussortieren dass nach installation alles unnötige gelöscht wird und minimum an Programmen etc vorhanden ist (während der installation geclonte repos mit sudo Gruppe rechten löschen und gegebenenfalls neu clonen als richtiger user)
- [ ] HDMI und zeite Bildschirme ebenso wie USB besser erkennen und formatieren können bzw Einstellungen machen können
- [ ] Grafikkartenprobleme lösen (https://wiki.freedesktop.org/nouveau/Optimus/,... )
- [ ] Qtile Widgets überarbeiten
  - [ ] Widgets überarbeiten
  - [ ] Transparenz der Dinge hinter Fullscreen oder zumindest der "Taskbar" auf 100% sodass Fullscreen schöner aussieht
  - [ ] Neue Floating Windows die aufpoppen in den Vordergrund bringen
- [ ] EMACS
  - [ ] Eigenes Theme überarbeiten -> Markierungszeug mit =+~*... schöner machen (verbatim heisst es?)
- [ ] .bashrc bashprofile und bashhistory zu configs
- [ ] Dependencys für Qtile und Emacs in Installskript, sodass es von Beginn an top funzt -> Wenn alles clean und fertig dann nochmal Neuinstallation in VirtualBox testen und generell cleane lauffähige VM oder Docker Container von meinem Betriebssystem erstellen - erst wenn es so stabil ist dass ich kaum noch Änderungen vornehme!

- [ ] automatisiertes verschieben von Dateien nach dem speichern
#+begin_src shell
cp -r ~/FlowmisOS/tangle/config.el ~/.config/doom/
cp -r ~/FlowmisOS/tangle/init.el ~/.config/doom/
cp -r ~/FlowmisOS/tangle/packages.el ~/.config/doom/
# cp -r ~/FlowmisOS/tangle/banner ~/.config/doom/
# cp -r ~/FlowmisOS/tangle/themes ~/.config/doom/
# cp -r ~/FlowmisOS/tangle/eshell ~/.config/doom/
# cp -r ~/FlowmisOS/tangle/config.py ~/.config/qtile/config.py
# cp -r ~/FlowmisOS/tangle/python-white.png ~/.config/qtile/pyhton-white.png
# cp -r ~/FlowmisOS/tangle/launcher.sh ~/.config/rofi/launchers/misc/launcher.sh
# cp -r ~/FlowmisOS/tangle/mane.rasi ~/.config/rofi/launchers/misc/mane.rasi
# cp -r ~/FlowmisOS/tangle/config.rasi ~/.config/rofi/config.rasi
# cp -r ~/FlowmisOS/tangle/.xprofile ~/.xprofile
# cp -r ~/FlowmisOS/tangle/.bashrc ~/.bashrc
# cp -r ~/FlowmisOS/tangle/alacritty.yml ~/.config/alacritty/alacritty.yml
# cp -r ~/FlowmisOS/tangle/config.fish ~/.config/fish/config.fish
# cp -r ~/FlowmisOS/tangle/.gitconfig ~/.gitconfig
# cp -r ~/FlowmisOS/tangle/.git-credentials ~/.git-credentials
# cp -r ~/FlowmisOS/tangle/picom.conf ~/.config/picom/picom.conf
# wegen sudo in Terminal kopieren und dort ausführen bis ich es aus Emacs auch kann: sudo cp -r ~/FlowmisOS/tangle/70-synaptics.conf /etc/X11/xorg.conf.d/70-synaptics.conf
echo done
#+end_src

#+RESULTS:
: done
