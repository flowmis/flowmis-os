:Einstellungen:
#+STARTUP: folded hideblocks shrink
#+begin_src shell
# mkdir ~/.config/doom/ ~/.config/doom/ ~/.config/doom/banner/ ~/.config/doom/themes/ ~/.config/doom/eshell/
cp -u ~/flowmis-os/tangle/config.el ~/.config/doom/config.el && cp -u ~/flowmis-os/tangle/init.el ~/.config/doom/init.el && cp -u ~/flowmis-os/tangle/packages.el ~/.config/doom/packages.el && cp -u ~/flowmis-os/tangle/start.org ~/.config/doom/start.org && cp -R ~/flowmis-os/tangle/banner/ ~/.config/doom/ && cp -R ~/flowmis-os/tangle/themes/ ~/.config/doom/ && cp -R ~/flowmis-os/tangle/eshell/ ~/.config/doom/ && echo '###########################Doom ready###########################'
cp -u ~/flowmis-os/tangle/config.py ~/.config/qtile/config.py && cp -u ~/flowmis-os/tangle/python-white.png ~/.config/qtile/pyhton-white.png && echo '###########################Qtile ready###########################'
# cp -u ~/flowmis-os/tangle/launcher.sh ~/.config/rofi/launchers/misc/launcher.sh
# cp -u ~/flowmis-os/tangle/mane.rasi ~/.config/rofi/launchers/misc/mane.rasi
# cp -u ~/flowmis-os/tangle/config.rasi ~/.config/rofi/config.rasi
# cp -u ~/flowmis-os/tangle/.xprofile ~/.xprofile
# cp -u ~/flowmis-os/tangle/.Xressources ~/.Xressources
# cp -u ~/flowmis-os/tangle/.bashrc ~/.bashrc
# cp -u ~/flowmis-os/tangle/alacritty.yml ~/.config/alacritty/alacritty.yml
# cp -u ~/flowmis-os/tangle/config.fish ~/.config/fish/config.fish
# cp -u ~/flowmis-os/tangle/.gitconfig ~/.gitconfig
cp -u ~/flowmis-os/tangle/picom.conf ~/.config/picom/picom.conf
echo done
#+end_src

#+RESULTS:
| ###########################Doom  | ready########################### |
| ###########################Qtile | ready########################### |
| done                             |                                  |

:END:
#+TITLE: Install flowmis-os
-------------------------------------------------------------------------------------------------------------------
- [[~/flowmis-os/flowmis-os.org][flowmis-os]]
-------------------------------------------------------------------------------------------------------------------

* Installation flowmis-os on Windows mit wsl
https://www.youtube.com/watch?v=h0Wg_aknGdc
* Installation

- [ ] Booted man auf den Stick wird man in eine virtuelle Konsole (handelt sich um eine Zsh Shell) als root eingeloggt, von der aus man die gewünschte Installation durchführen kann. Theoretisch kann man ein Autoinstallationsskript in die ISO mit einbauen und dann über die Zsh ausführen
- _Problemlösung:_
  - [[https://wiki.archlinux.org/title/Installation_guide][Arch InstallGuide]] bei Fragen/Problemen
  - Wenn ich feststecke kann ich mit <C-M-F2> in die tty wechseln und mit root und cli Einstellungen rückgängig machen -> C=Strg, M=Alt, F2 muss eventuell mit Fn zusammen gedrückt werden!
  - Etwas vergessen: kann nach der Installation erneut auf Bootstick booten und von diesem die Linux-Filesystem partition mounten und mit arch-chroot auf diese gehen und Dinge installieren (im root Modus und mit hoffentlich funktionierendem Internet)

** Installationsdateien

- Locales:

#+begin_src shell :tangle tangle/locale.conf
LANG=de_DE.UTF-8
LC_CTYPE=de_DE.UTF-8
#+end_src

- Localhost und die localdomain festlegen:

#+begin_src shell :tangle tangle/hosts
# Static table lookup for hostnames.
# See hosts(5) for detailsh
127.0.0.1    localhost
::1          localhost
127.0.1.1    FlowmisPC.localdomain    FlowmisPC
#+end_src

** Installation
1. Arch iso downloaden:
   - Check ob Datei original und unverändert ist:
      #+begin_src shell
   gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig     # Befehl PGP check
   pacman-key -v archlinux-version-x86_64.iso.sig                                          # Alternativer Befehl von ArchSystem aus
      #+end_src
2. _Falls VM:_ ISO in die VM laden + Speicher, CPU, RAM, GPU etc. der virtuellen Maschine zuweisen und mit funktionsfähigem Internet (auf dem Hostsystem) die VM booten
   - Standardmäßig Skript install-vm verwenden. Falls ich Installation in VM lieber step by step (wie bei Hardware machen will) um alles selbst zu konfigurieren, muss ich das untere Skript install-hardware-modified verwenden.
   - Zusätzliche Infos für Copy-Paste und geteilten Ordner hier: [[~/flowmis-os/flowmis-os.org::VirtualBox][VirtualBox]]
    #+begin_src shell :tangle tangle/install-vm-mit-skript.sh
   # 1. ~python -m archinstall~
   #    Einstellungen:
   #    - Sprache auf de & locale-lang auf de.DE
   #    - Grub als Bootloader wählen
   #    - Root Passwort vergeben + Account/User mit Passwort erstellen
   #    - Profil auf xorg ändern
   #    - Dem Gerät entsprechende Grafiktreiber wählen
   #    - pulseaudio wählen
   #    - NetworkManager wählen
   #    - Timezone auf Europe-Berlin
   #    - Zusatzpakete angeben: git sudo networkmanager
   #    - Festplatte wählen, alles wipen + ext4 filesystem konfigurieren
   #    - Installation starten
   # 2. shutdown, iso/installationsmedium entfernen, boot & login -> Internet sollte gehen und arch-minimal ist fertig installiert!
   # 3. Falls kein Internet - mit nmcli im Wlan anmelden
   # 4. VM konfigurieren:
   # - sudo pacman -S virtualbox-guest-utils openssh
   # - sudo VBoxClient-all
   # - In VirtualBox Einstellungen der jeweiligen VM  -> Allgemein -> Erweitert -> Gemeinsame Zwischenablage & Drag'n'Drop auf bidirektional stellen
   # - In VirtualBox Einstellungen der jeweiligen VM  -> Allgemein -> Gemeinsame Ordner -> "Hinzufügen" drücken unter: Ordner der virtuellen Maschine -> Pfad Ordnername etc beispielsweise wie folgt angeben (Ordner sollte vorab auf beiden Systemen erstellt werden): <C:\Users\manem\Desktop\share -- share -- automatisch einbinden -- Einbindungspunkt leer lassen>
   # - Ordner einhängen und checken ob es geht: sudo mount -t vboxsf share /home/flowmis/share
   # - fstab um folgende Linie ergänzen dass geteilter Ordner automatisch eingehängt wird:
       # cloud						/home/flowmis/cloud	vboxsf		defaults 	0 0
   # - .ssh nach ~ kopieren + cd in .ssh und chmod 0700 id_rsa sodass anschließend mit git clone git@github.com:flowmis/flowmis-os.git mein Repo geklont werden kann
   # 5. Dieses Skript ausführen + rebooten + Qtile statt Wayland wählen und anmelden - fertig ist flowmis-os-minimal und weitere Module direkt aus Emacs installieren:
   mkdir -p ~/.config/{alacritty,fish,picom} && echo 'Ordner erstellt'
   sudo cp -r ~/flowmis-os/tangle/70-synaptics.conf /etc/X11/xorg.conf.d/70-synaptics.conf && echo '###########################Touchpad sollte funktionieren###########################'
   cp -r ~/flowmis-os/tangle/alacritty.yml ~/.config/alacritty/alacritty.yml && cp -r ~/flowmis-os/tangle/config.fish ~/.config/fish/config.fish && echo '###########################Terminals ready###########################'
   # cp -r ~/flowmis-os/tangle/.xprofile ~/.xprofile
   cp -r ~/flowmis-os/tangle/.bashrc ~/.bashrc && cp -r ~/flowmis-os/tangle/.gitconfig ~/.gitconfig && cp -r ~/flowmis-os/tangle/picom.conf ~/.config/picom/picom.conf && echo '###########################Starteinstellungen vorhanden###########################'
   sudo pacman -Syu && sudo pacman -S qtile picom fish eza starship alacritty pcmanfm nitrogen sddm emacs-nativecomp neovim fd ripgrep gnupg gpa keepassxc && echo 'Packete updated and installed'
   # eza: Der Befehl ls gibt schönerer/funktionalere Darstellung aus -> meine aliase ändern machen dass ich ls weiterhin verwenden kann und nicht eza schreiben muss
   # starship: Shell wird übersichtlicher: < und > statt sinnloser Angabe vom Standardpfad
   # base-devel: ermöglicht <makepkg -si> um aus Binaries ein Paket zu machen das im Anschluss installiert werden kann
   # ripgrep: für Doom Emacs (ebenso wie gnu find und fd (sollten jedoch bereits installiert sein - siehe auch github von doom emacs)
   sudo systemctl enable sddm
   cd ~ && git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d && ~/.emacs.d/bin/doom install && ~/.emacs.d/bin/doom sync && ~/.emacs.d/bin/doom doctor && echo 'Installation beendet'
   #+end_src
    #+begin_src shell :tangle tangle/install-hardware.sh
   ###Achtung: Auf Hardware machen mehrere Partitionen Sinn
   # fdisk -l                                                                    # Alternativ: <lsblk>
   # fdisk /dev/sda                                                              # mit fdisk in Partition gehen -> Partitionen löschen <d>/neue erstellen <n> -> <m> mögliche Befehle zeigen
   # <g><n><1><Enter><+550M>                                                     # EFI Partition erstellen: <g> kreiert Label - GPT disk label (Achtung falls MBR verwendet wurde) <n> neue Partition mit Nummer <1>  und first sector default <Enter> und second sector 550MiB <+550M>
   # <n><2><Enter><+2G>                                                          # Swap Partition mit Nummer 2 und mindesten 1GiB (oder wie hier 2GiB) erstellen
   # <n><3><Enter><Enter>                                                        # Linux Filesystem Partition mit restlichem Speicher erstellen
   # <t><1><L><1>                                                                # Partition 1 zu EFI ändern (<L> zeigt mögliche Partitionstypen und <1>=EFI)
   # <t><2><19>                                                                  # Partition 2 zu Swap ändern -> Partition 3 muss man nicht ändern da Standard Linux Filesystem passt
   # <w>                                                                         # write changes und fdisk verlassen
   # mkfs.fat -F32 /dev/sda1
   # mkswap /dev/sda2
   # swapon /dev/sda2
   # mkfs.ext4 /dev/sda3
   # mount /dev/sda3 /mnt
   ###Einfache Variante ohne mehrere Partitionen
   # fdisk /dev/sda + <n> + <p> + <Enter> + <Enter> + <Enter> <w>
   # fdisk -l                                                                  # check Partionen -> Alternativ: lsblk
   # mkfs.ext4 /dev/sda1
   ##System einrichten
   # mount /dev/sda1 /mnt
   # pacstrap /mnt base linux linux-firmware                                   # Installiert die grundlegendsten Komponenten die man benötigt um mit dem Linux Kernel arbeiten zu können
   # genfstab -U /mnt >> /mnt/etc/fstab                                        # generiert FileSystemTable
   # arch-chroot /mnt                                                          # Mit root in /mnt gehen
   # pacman -S neovim sudo git
   # passwd
   # useradd -m flowmis
   # passwd flowmis
   # usermod -aG wheel,audio,video,optical,storage flowmis                     # Erteilen der Rechte bzw. in welcher Gruppe der User ist
   # pacman -S grub efibootmgr dosfstools os-prober mtools networkmanager sddm
   # cd /home/flowmis/ && git clone https://github.com/flowmis/flowmis-os.git
   # . /home/flowmis/flowmis-os/tangle/install-hardware-modified.sh
   cd /home/flowmis/ && chown flowmis flowmis-os/ && chgrp flowmis flowmis-os/   # Mit root geclonte Repo auf richtigen Nutzer mit richtigen Rechten geändert
   ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime                     # Link zur Zeitzone um richtige Uhrzeit etc. zu hinterlegen. Manche Programme funktionieren ohne richtige locales nicht
   hwclock --systohc                                                           # setzt Zeit
   mv /home/flowmis/flowmis-os/tangle/locale.conf /etc/locale.conf              # verschiebt vorab erstellte Datei
   sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen           # sucht einen String und ersetzt ihn
   locale-gen                                                                  # generiert die locales
   echo FlowmisPC | cat > /etc/hostname                                        # schreibt neue Datei an gewünschten Ort mit gewünschtem Inhalt
   mv /home/flowmis/flowmis-os/tangle/hosts /etc/hosts                          # verschiebt vorab erstellte Datei
   ##Grafiktreiber wählen - bei 2 sollte man nur die Treiber der guten Grafikkarte installieren
   pacman -S xf86-video-fbdev                                                # Grafiktreiber VM
   ##Sonstiges
   # mkdir /boot/EFI                                                           # Erstellung des Bootdirectories
   # mount /dev/sda boot/EFI                                                   # was ist die EFI ppartition in der VM - habe ich ja nicht angelegt???
   # grub-install                                                              # Eventuell muss Pfad mit angegeben werden: grub-install /dev/sda
   # grub-mkconfig -o /boot/grub/grub.cfg                                      # Ohne diese wird es zu Problemen beim booten kommen
   # EDITOR=nvim visudo                                                        # uncomment #%wheel ALL=(ALL) ALL
   # systemctl enable NetworkManager
   # systemctl enable sddm
   # exit
   # umount -l /mnt
   # reboot & login
   # sudo NetworkManager                                                       # keine Fehlermeldung = past alles
   # sudo nmcli device wifi list                                               # nmcli wird mit NetworkManager installiert und zeigt vorhandene Wlan Netzwerke an
   # sudo nmcli device wifi connect "Name Wlan" password "Passwort Wlan"       # Verbindet mit Wlan (https://wiki.archlinux.org/title/NetworkManager)
   ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime                     # Link zur Zeitzone um richtige Uhrzeit etc. zu hinterlegen. Manche Programme funktionieren ohne richtige locales nicht
   hwclock --systohc                                                           # setzt Zeit
   mv /home/flowmis/flowmis-os/tangle/locale.conf /etc/locale.conf              # verschiebt vorab erstellte Datei
   sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen           # sucht einen String und ersetzt ihn
   locale-gen                                                                  # generiert die locales
   echo FlowmisPC | cat > /etc/hostname                                        # schreibt neue Datei an gewünschten Ort mit gewünschtem Inhalt
   mv /home/flowmis/flowmis-os/tangle/hosts /etc/hosts                          # verschiebt vorab erstellte Datei
   # localectl --no-convert set-keymap de-latin1-nodeadkeys && localectl --no-convert set-x11-keymap de pc105 deadgraveacute && localectl status
   # setxkbmap -layout de                                                      # Tastaturlayout auf Deutsch
   # timedatectl set-ntp true && timedatectl status                            # Zeit und Datum über das network transfer protocol einholen
   #+end_src
3. _Falls Hardware:_ Bootstick erstellen (Achtung Bootstick der mir balena etcher erstellt wurde macht Probleme -> Mit rufus erstellen und bei Partitionsschema GPT statt MBR wählen um mit grub-install bei manueller Installation keine Probleme zu bekommen weil falsches Partitionsschema vorliegt). BIOS Bootreihenfolge ändern, UEFI auswählen (nicht CMS) und secureboot disablen -> Booten
   - checken ob Installationsmedium richtig funktioniert
        ~ls /sys/firmware/efi/efivars~                               # kein Error = System hat in UEFI mode gebooted. Error (dir existiert nicht) = System im BIOS (or CSM) mode?
   - Internet über Lankabel oder iwctl aktivieren und checken ob es geht
        ~ip link~                                                    # Zeigt einem an ob Netzwerkkarte/Hardware gefunden wird und mit welchem Namen weitergemacht werden kann - oft wlan0 (Achtung dass rfkill die Karte nicht blockiert)
        ~iwctl~                                                      # Einloggen Wlan (Ethernet eigentlich zu bevorzugen) -> siehe auch https://wiki.archlinux.org/title/Iwd#iwctl
        ~device list~                                                # zeigt Netzwerkkarten -> ist hier nichts gelistet dann fucked
        ~station "" scan~                                            # "" durch Wlan Karte ersetzen (meist wlan0) -> scant nach vorhandenen Wlans die durch Wlan Karte gefunden werden
        ~station "" get-networks~                                    # Listet gefundene Wlan Netzwerke auf
        ~station "" connect "Name Wlan"~                             # Verbindung zu Wlan herstellen
        ~exit~                                                       # Verlassen von iwctl
        ~ping google.de~                                             # Internet check
   - Keyboardlayout wählen
        ~ls /usr/share/kbd/keymaps/**/*.map.gz~                      # Läd alle vorhandenen Tastaturlayouts
        ~loadkeys de-latin1~                                         # Standard Tastaturlayout auf Deutsch (nur für Installationsprozess)



* Module installieren & konfigurieren

src-blocks mit sudo Befehlen auszuführen:

    1) einzelne Befehle indem man eine Variable mitgibt
    #+begin_src sh :var Passw=(read-passwd "112123")
    echo ${Passw} | sudo pacman -Syu & echo 'Packete updated'
    #+end_src

    2) /sudo:: als dir angeben wie ich es im folgenden tue
    #+begin_src sh :dir /sudo::
    sudo pacman -S qtile fish alacritty pcmanfm sddm emacs-nativecomp neovim fd ripgrep
    #+end_src

** Yay + Yay Packages

In Terminal/Eshell ausführen (Befehl um es an Eshell repl zu senden?) da Emacs zwischendrin sudo legitmation braucht und auf Fragen geantwortet werden was Probleme verursacht wenn man mit org-src block nicht interaktiv agieren kann

#+begin_src sh
sudo pacman -S base-devel
cd ~ && git clone https://aur.archlinux.org/yay-git.git && cd ~/yay-git/ && makepkg -si && cd ~ && rm -rf ~/yay-git/ && yay -Syu && yay -S archlinux-tweak-tool-git termite otf-alegreya-sans mu && echo '###########################installed yay###########################'
#+end_src

** Brave

In Terminal/Eshell ausführen (Befehl um es an Eshell repl zu senden?) da Emacs zwischendrin sudo legitmation braucht und auf Fragen geantwortet werden was Probleme verursacht wenn man mit org-src block nicht interaktiv agieren kann

#+begin_src sh
cd ~ && git clone https://aur.archlinux.org/brave-bin.git && cd ~/brave-bin/ && makepkg -si && cd ~ && rm -rf ~/brave-bin/ && echo '###########################installed brave###########################'
#+end_src

** Qtile
#+begin_src sh  :dir /sudo::
sudo pacman -S python-iwlib python-dbus-next qt5ct mypy && echo 'Pyhton Zeug installiert'
sudo pacman -S python-utils && qtile check && echo 'Qtile dependencies installiert'
#+end_src

- https://docs.qtile.org
- Muss Python installiert sein und gibt es weitere Dependencies dass dieser WM läd und richtig funktioniert?
- Wenn eigene Config probleme macht fällt es normal auf default config zurück -> sollte es sich aufhängen lohnt sich <Strg Alt F2> um ins Terminal zu kommen und von dort aus kann man eigene config löschen, sodass die Standard config dort beim nächsten Boot erscheint und an dieser kann man dann weiterarbeiten.
  | Keybinding in Standard Config | Beschreibung                                         |
  |-------------------------------+------------------------------------------------------|
  | M Strg q                      | beendet qtile und man muss sich neu anmelden         |
  | M Strg e(oder r?)             | refresh qtile (Änderungen an config werden sichtbar) |
  | M r                           | spawn prompt -> öffnen von Programmen                |
  | M Space                       | öffnet Terminal                                      |

*** Qtile config

#+begin_src python :tangle tangle/config.py
from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

mod = "mod4"
terminal = guess_terminal()

##################################################################################### Farben

colors = [["#FBF1C7", "#FBF1C7"],   #0
          ["#F2E5BC", "#F2E5BC"],   #1
          ["#00606B", "#00606B"],   #2
          ["#613E53", "#613E53"],   #3
          ["#C27DA7", "#C27DA7"],   #4
          ["#00606B", "#00606B"],   #5
          ["#613E53", "#613E53"],   #6
          ["#C275A7", "#C275A7"],   #7
          ["#D65D0E", "#D65D0E"],   #8
          ["#9D0006", "#9D0006"],   #9
          ["#000000", "#000000"],   #10
          ["#FFFFFF", "#FFFFFF"],   #11
          ["#7F001E", "#7F001E"],   #12
          ["#F0F0F0", "#F0F0F0"],   #13
          ["#EBDBB2", "#EBDBB2"],   #14
          ["#D5C4A1", "#D5C4A1"],   #15
          ["#BDAE93", "#BDAE93"],   #16
          ["#A89584", "#A89584"],   #17
          ["#504945", "#504945"],   #18
          ["#3C3836", "#3C3836"],   #19
          ["#282828", "#282828"],   #20
          ["#1D2021", "#1D2021"],   #21
          ["#B16286", "#B16286"]]   #22

##################################################################################### Keybindings
floating_window_index = 0

def float_cycle(qtile, forward: bool):
    global floating_window_index
    floating_windows = []
    for window in qtile.current_group.windows:
        if window.floating:
            floating_windows.append(window)
    if not floating_windows:
        return
    floating_window_index = min(floating_window_index, len(floating_windows) -1)
    if forward:
        floating_window_index += 1
    else:
        floating_window_index += 1
    if floating_window_index >= len(floating_windows):
        floating_window_index = 0
    if floating_window_index < 0:
        floating_window_index = len(floating_windows) - 1
    win = floating_windows[floating_window_index]
    win.cmd_bring_to_front()
    win.cmd_focus()
@lazy.function
def float_cycle_backward(qtile):
    float_cycle(qtile, False)
@lazy.function
def float_cycle_forward(qtile):
    float_cycle(qtile, True)

keys = [
    ### Fenster bewegen und layout wählen
    Key([mod], "period", float_cycle_forward, desc='FloatingWindow vor/hinter ein anderes bringen'),
    Key([mod], "comma", float_cycle_backward, desc='FloatingWindow vor/hinter ein anderes bringen'),
    Key([mod], "c", lazy.window.kill(), desc="Kill focused window"),
    Key([mod], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "Return", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Wechsel zwischen solit und full stack"), #Vergößerung/Verkleinerung einers Fensters im Stack (wenn dieses gesplitet ist)
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "shift"], "space", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    ### Programme starten
    Key([mod], "space", lazy.spawn(terminal), desc="Launch terminal"),
    Key([], "print", lazy.spawn('flameshot gui'), desc='Screenshot2'),
    Key([mod], "w", lazy.spawn('nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'), desc="Wallpaperwechsel"),
    Key([mod], "e", lazy.spawn('emacs'), desc='EMACS'),    #'emacs  ~/cloud/life/raum/.org/home.org' wenn man bestimmte Datei beim Start öffnen will
    Key([mod], "t", lazy.spawn('emacsclient -ce "(shell)"'), desc='eshell in neuem Frame'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
    Key([mod], "p", lazy.spawn('keepassxc /home/flowmis/cloud/life/energie/self-sovereignity/privacy-security/passwörter/hotpassw.kdbx'), desc='Passwortmanager'),    #'emacs ~/cloud/life/raum/home.org' wenn man bestimmte Datei beim Start öffnen will
    Key([mod], "s", lazy.spawn('spotify-launcher'), desc="Spotify"),
    Key([mod], "d", lazy.spawn('pcmanfm'), desc='Explorer'),
    Key([mod], "b", lazy.spawn("brave"), desc='Bravebrowser'),
    Key([mod, "control"], "g", lazy.spawn("brave --app=https://chat.openai.com/"), desc='BraveApp-GPT'),
    Key([mod, "control"], "1", lazy.spawn("brave --app=https://mbox1.belwue.de/"), desc='MailSeminarStuttgart'),
    Key([mod, "control"], "2", lazy.spawn("brave --app=https://bap.navigator.web.de/"), desc='MailWeb'),
    Key([mod], "n", lazy.spawn('emacsclient -ne "(+org-capture/open-frame)"'), desc='Capture Templates'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
]

##################################################################################### Desktop-Einstellungen
groups = [Group(i) for i in "123"]

for i in groups:
    keys.extend(
        [
            # mod + Zahl -> wechselt den "Desktop"
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod + shift + Zahl -> verschiebt aktives Fenster auf anderen "Desktop"
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    layout.Columns(border_focus=colors[2], border_width = 3, margin = 8),
    layout.Max(border_focus=colors[2], border_width = 3, margin = 8),
    # layout.Stack(num_stacks=2),
    layout.Bsp(border_focus=colors[2], border_width = 3, margin = 8),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    layout.TreeTab(border_focus=colors[2], border_width = 3),
    # layout.VerticalTile(),
    # layout.Zoomy(),
    # layout.Floating()
]

widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize=13,
    padding=6,
    background=colors[20],
    foreground = colors[1],
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.CurrentLayoutIcon(padding = 1),
                widget.TextBox(text = '|', padding = 10),
                widget.WindowCount(),
                widget.TextBox(text = '|', padding = 10),
                widget.Clock(format = "%A, %B %d - %H:%M ", padding = 10),
                widget.GroupBox(
                    active = colors[2],
                    inactive = colors[6],
                    highlight_color = colors[1],
                    highlight_method = "line",
                    this_current_screen_border = colors[6],
                    this_screen_border = colors [4],
                    other_current_screen_border = colors[6],
                    other_screen_border = colors[4],
                    foreground = colors[6],
                    background = colors[10]),
                widget.Prompt(),
                widget.WindowName(),
                widget.Net(),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.QuickExit(default_text = '⏻'),
            ],
            24,
            border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

floating_layout = layout.Floating(
    border_focus=colors[2],  # Hier die gewünschte Rahm(en)farbe angeben
    border_width = 4,  # Hier die gewünschte Rahm(en)farbe angeben
    float_rules=[*layout.Floating.default_float_rules, Match(title='Confirmation'), Match(title='Alacritty'), Match(title='Keepassxc'),
                 ]
)


# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

_OLD-Version - vll ist hiervon mal noch was zu gebrauchen:_
#+begin_src python Alte Version
# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List

###Start Verbesserung Floating Windows###
floating_window_index = 0

def float_cycle(qtile, forward: bool):
    global floating_window_index
    floating_windows = []
    for window in qtile.current_group.windows:
        if window.floating:
            floating_windows.append(window)
    if not floating_windows:
        return
    floating_window_index = min(floating_window_index, len(floating_windows) -1)
    if forward:
        floating_window_index += 1
    else:
        floating_window_index += 1
    if floating_window_index >= len(floating_windows):
        floating_window_index = 0
    if floating_window_index < 0:
        floating_window_index = len(floating_windows) - 1
    win = floating_windows[floating_window_index]
    win.cmd_bring_to_front()
    win.cmd_focus()

@lazy.function
def float_cycle_backward(qtile):
    float_cycle(qtile, False)

@lazy.function
def float_cycle_forward(qtile):
    float_cycle(qtile, True)
###Ende Verbesserung Floating Windows (2 Keybindings mit den hier definierten Funktionen machen es dann anwendbar!)###

mod = "mod4"
keys = [ Key([mod], "Return", lazy.spawn("alacritty"), desc='Launches My Terminal'),
        #weiss nicht weshalb aber macht irgendwie dass ich mit doppel Fn Taste den App Launcher starten kann
         # Key([], "XF86AudioRaiseVolume", lazy.spawn('pamixer -i 2'), desc='lauter'),
         Key([mod], "period", float_cycle_forward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         Key([mod], "comma", float_cycle_backward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         # Key([], "XF86AudioLowerVolume", lazy.spawn('pamixer -d 2'), desc='leiser'),
         # Key([], "XF86AudioMute", lazy.spawn('pamixer -t'), desc='leiser'),
         # Key([], "XF86MonBrightnessUp", lazy.spawn('brightnessctl s 5%+'), desc='heller'),
         # Key([], "XF86MonBrightnessDown", lazy.spawn('brightnessctl s 5%-'), desc='dunkler'),
         # Key([], "XF86Cut", lazy.spawn('simplescreenrecorder'), desc='Screenrecord1'),
         # Key([], "F7", lazy.spawn('deepin-screen-recorder'), desc='Screenrecord2'),
         # Key([], "Print", lazy.spawn('gnome-screenshot -i'), desc='Screenshot1'),
         Key([], "print", lazy.spawn('flameshot gui'), desc='Screenshot2'),
         Key([mod], "e", lazy.spawn('emacs'), desc='EMACS'),    #'emacs  ~/cloud/life/raum/.org/home.org' wenn man bestimmte Datei beim Start öffnen will
         Key([mod], "p", lazy.spawn('keepassxc /home/flowmis/cloud/life/energie/self-sovereignity/privacy-security/passwörter/hotpassw.kdbx'), desc='Passwortmanager'),    #'emacs ~/cloud/life/raum/home.org' wenn man bestimmte Datei beim Start öffnen will
         Key([mod], "w", lazy.spawn('nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'), desc="Wallpaperwechsel"),
         Key([mod], "s", lazy.spawn('spotify-launcher'), desc="Spotify"),
         Key([mod], "t", lazy.spawn('emacsclient -ce "(shell)"'), desc='eshell in neuem Frame'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
         Key([mod], "d", lazy.spawn('pcmanfm'), desc='Explorer'),
         Key([mod], "b", lazy.spawn("brave"), desc='Bravebrowser'),
         Key([mod], "m", lazy.spawn("brave --app=https://chat.openai.com/"), desc='BraveApp-GPT'),
         Key([mod], "n", lazy.spawn('emacsclient -ne "(+org-capture/open-frame)"'), desc='Capture Templates'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
         Key([mod], "Tab", lazy.next_layout(), desc='Toggle through layouts'),
         Key([mod], "c", lazy.window.kill(), desc='Kill active window'),
         Key([mod], "r", lazy.restart(), desc='Restart Qtile'),
         Key([mod], "q", lazy.shutdown(), desc='Shutdown Qtile'),
         ### Treetab controls
         Key([mod, "shift"], "h", lazy.layout.move_left(), desc='Move up a section in treetab'),
         Key([mod, "shift"], "l", lazy.layout.move_right(), desc='Move down a section in treetab'),
         ### Window controls
         Key([mod], "Down", lazy.layout.shuffle_down(), lazy.layout.section_down(), desc='Move windows down in current stack'),
         Key([mod], "Up", lazy.layout.shuffle_up(), lazy.layout.section_up(), desc='Move windows up in current stack'),
         Key([mod], "Left", lazy.layout.shrink(), lazy.layout.decrease_nmaster(), desc='Shrink window (MonadTall), decrease number in master pane (Tile)'),
         Key([mod], "Right", lazy.layout.grow(), lazy.layout.increase_nmaster(), desc='Expand window (MonadTall), increase number in master pane (Tile)'),
         Key([mod], "f", lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
         ### Stack controls
         Key([mod], "space", lazy.layout.next(), desc='Switch window focus to other pane(s) of stack'),
         Key([mod, "shift"], "space", lazy.layout.toggle_split(), desc='Toggle between split and unsplit sides of stack'),
        ]

groups = [Group("-1-", layout='monadtall'),
          Group("-2-", layout='monadtall'),
          Group("-3-", layout='monadwide'),
          Group("-4-", layout='monadwide'),
          Group("-5-", layout='zoomy'),
          Group("-6-", layout='floating')]
# Allow MODKEY+[0 through 9] to bind to groups, see https://docs.qtile.org/en/stable/manual/config/groups.html
# MOD4 + index Number : Switch to Group[index]
# MOD4 + shift + index Number : Send active window to another Group
from libqtile.dgroups import simple_key_binder
dgroups_key_binder = simple_key_binder("mod4")

layout_theme = {"border_width": 2, "margin": 8, "border_focus": "000000", "border_normal": "1D2330"}
layouts = [
    #layout.Bsp(**layout_theme),
    #layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Max(**layout_theme),
    #layout.Stack(num_stacks=2),
    #layout.RatioTile(**layout_theme),
    #layout.Tile(shift_windows = True, border_width = 1, margin = 4,
    #    border_focus = 'e1acff', border_normal = '1D2330'),
    #layout.Tile(shift_windows=True, **layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Zoomy(**layout_theme),
    layout.Floating(**layout_theme)
    #layout.TreeTab(
    #    font = "Ubuntu",
    #    fontsize = 10,
    #    sections = ["--1--", "--2--", "--3--", "--4--"],
    #    section_fontsize = 10,
    #    border_width = 2,
    #    bg_color = "1c1f24",
    #    active_bg = "c678dd",
    #    active_fg = "000000",
    #    inactive_bg = "a9a1e1",
    #    inactive_fg = "1c1f24",
    #    padding_left = 0,
    #    padding_x = 0,
    #    padding_y = 5,
    #    section_top = 10,
    #    section_bottom = 20,
    #    level_shift = 8,
    #    vspace = 3,
    #    panel_width = 200
    #),
]

colors = [["#282c34", "#282c34"],
          ["#1c1f24", "#1c1f24"],
          ["#dfdfdf", "#dfdfdf"],
          ["#ff6c6b", "#ff6c6b"],
          ["#98be65", "#98be65"],
          ["#da8548", "#da8548"],
          ["#51afef", "#51afef"],
          ["#c678dd", "#c678dd"],
          ["#46d9ff", "#46d9ff"],
          ["#a9a1e1", "#a9a1e1"],
          ["#000000", "#000000"]]

prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize = 10,
    padding = 2,
    background=colors[10]
)
extension_defaults = widget_defaults.copy()

def init_widgets_list():
    widgets_list = [
            widget.CurrentLayoutIcon(
                       background = colors[10],
                       padding = 0,
                       scale = 0.7
                       ),
            widget.WindowCount(
                       background = colors[10],
                       fontsize = 12,
                       padding = 10,
                       ),
            widget.Clock(
                       background = colors[10],
                       format = "%A, %B %d - %H:%M ",
                       fontsize = 12,
                       padding = 10
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.GroupBox(
                       active = colors[2],
                       inactive = colors[6],
                       highlight_color = colors[1],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[6],
                       background = colors[10]
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.WindowName(
                       foreground = colors[2],
                       background = colors[10],
                       padding = 0
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Net(
                       background = colors[10],
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ETH"
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ADA"
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Systray(
                       background = colors[10],
                       padding = 5
                       ),
            widget.PulseVolume(
                       background = colors[10],
                       fmt = 'Vol: {}',
                       padding = 5
                       ),
            widget.BatteryIcon(
                       background = colors[10],
                       padding = 5,
                       scale = 1.1,
                       ),
            ]
    return widgets_list

def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    del widgets_screen1[9:10]               # Slicing removes unwanted widgets (systray) on Monitors 1,3
    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                 # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=30)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=0.85, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=20))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()

def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    ,*layout.Floating.default_float_rules,
    Match(title='Confirmation'),      # tastyworks exit box
    Match(title='Viewnior'),        # qalculate-gtk
    Match(title='Alacritty'),        # qalculate-gtk
    Match(wm_class='kdenlive'),       # kdenlive
    Match(wm_class='pinentry-gtk-2'), # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

** Emacs
_Mobiler Zugriff auf meine .org Dateien über:_
- Organice: https://organice.200ok.ch/
- Orgzly: https://orgzly.com/
- Orgro: https://orgro.org/
- official Emacs build for Android - still a little bit rough: https://f-droid.org/packages/org.gnu.emacs/

_Emacs im Terminal über:_
- Termux: run Emacs in terminal mode to have full Org Mode functionality.

Für die Installation: Erst yay und yay Packages installieren! Fall Icons nicht richtig angezeigt werden in der doom-modeline und dired kann ich die Funktionen nach der Installation ausführen um die Icons zu installieren <M-x all-the-icons-install-fonts> <M-x nerd-icons-install-fonts> ->Dann folgendes:

#+begin_src sh  :dir /sudo::
sudo pacman -S shellcheck scrot imagemagick discount python-nose-exclude xclip gnuplot python-pip python-pipenv tidy python-pytest-isort python-jsbeautifier cmake stylelint isync jupyter-notebook && echo 'Doom dependencies installiert'
mkdir ~/.config/doom/ ~/.config/doom/ ~/.config/doom/banner/ ~/.config/doom/themes/ ~/.config/doom/eshell/
cp -u ~/flowmis-os/tangle/config.el ~/.config/doom/config.el && cp -u ~/flowmis-os/tangle/init.el ~/.config/doom/init.el && cp -u ~/flowmis-os/tangle/packages.el ~/.config/doom/packages.el && cp -R ~/flowmis-os/tangle/banner/ ~/.config/doom/ && cp -R ~/flowmis-os/tangle/themes/ ~/.config/doom/ && cp -R ~/flowmis-os/tangle/eshell/ ~/.config/doom/ && echo '###########################Doom ready###########################'
rm -rf ~/.doom.d && doomsync && doomdoctor
#+end_src

*** DoomEmacs init

- Module $ flags für Doom Emacs finde ich [[https://github.com/doomemacs/doomemacs/tree/develop/modules][hier]]
- Beispiel für :lang mit org als Modul und seinen möglichen flags [[https://github.com/doomemacs/doomemacs/tree/develop/modules/lang/org#plugins][hier]]

#+BEGIN_SRC elisp :tangle tangle/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +items)           ; the search engine of the future
       ;;(ivy +fonts +childframe)             ;hab ich lange statt vertico aktiviert gehabt - wieder aktivieren und vertico deaktivieren?

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;; doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extras)         ; ligatures and symbols to make your code pretty again
       ;; minimap           ; show a map of the code on the side
       ;; modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;(spell +aspell) ; hatte ich lange aktiviert
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
;       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +pretty            ; installiert org-fancy priorities, org-superstar, org-appear
        +noter
;        +jupyter
;        +ipython
         +pandoc
         +gnuplot)               ; organize your plain life in plain text
       php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;; (mu4e +org +gmail)
       ;;smtpmail
       ;;notmuch        ;mu4e aber einfacher?(hier kann ich Mails nicht löschen? - muss ich es vom Server/Anbieter löschen können, oder reichen tags und Archiv?)

       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

*** DoomEmacs packages

- Bevor ich hier eine zu große Liste an Paketen ansammle macht es Sinn zu schauen ob es mit der init.el nicht ebenfalls installiert werden kann, sodass ich es hier nicht aufführen muss!
- Neue Packete kann man hier angeben und mit 'doom sync' installieren/entfernen (oder <M-x doom/reload>) - werden von Melpa gezogen - Name muss passen!
- To install a package directly from a remote git repo, you must specify a `:recipe'. You'll find documentation on what `:recipe' accepts here: https://github.com/radian-software/straight.el#the-recipe-format
    (package! another-package
        :recipe (:host github :repo "username/repo"))
- If the package you are trying to install does not contain a PACKAGENAME.el file, or is located in a subdirectory of the repo, you'll need to specify `:files' in the `:recipe':
    (package! this-package
        :recipe (:host github :repo "username/repo"
               :files ("some-file.el" "src/lisp/*.el")))
- disable a package included with Doom:
    (package! builtin-package :disable t)
- You can override the recipe of a built in package without having to specify all the properties for `:recipe'. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:
    (package! builtin-package :recipe (:nonrecursive t))
    (package! builtin-package-2 :recipe (:repo "myfork/package"))
- Specify a `:branch' to install a package from a particular branch or tag. This is required for some packages whose default branch isn't 'master' (which our package manager can't deal with; see radian-software/straight.el#279)
    (package! builtin-package :recipe (:branch "develop"))
- Use `:pin' to specify a particular commit to install.
    (package! builtin-package :pin "1a2b3c4d5e")
- Doom's packages are pinned to a specific commit and updated from release to release. The `unpin!' macro allows you to unpin single packages... (unpin! pinned-package) ...or multiple packages (unpin! pinned-package another-pinned-package) ...Or *all* packages (NOT RECOMMENDED; will likely break things) (unpin! t)

#+begin_src elisp :tangle tangle/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (package! gitconfig-mode
;;      :recipe (       :host github :repo "magit/git-modes"
;;                      :files ("gitconfig-mode.el"             )))
;; (package! gitignore-mode
;;      :recipe (       :host github :repo "magit/git-modes"
;;                      :files ("gitignore-mode.el"             )))
;; (package! dashboard)
(package! dired-open)
(package! org-tree-slide)
(package! ox-reveal)
(package! beacon)
(package! gptel)
(package! centered-cursor-mode) ;für zentrales scrollen im Präsi Modus
(package! org-drill) ;für zentrales scrollen im Präsi Modus
(package! rg)
(package! org-roam)
(unpin! org-roam) ;macht es stabiler da es nicht wirklich geupdated wird - siehe Info zu unpin!
(package! org-roam-ui)
(package! graphviz-dot-mode)
(package! doom-modeline)
(package! org-fancy-priorities :disable t)
(package! org-download)
(package! imenu-list)
(package! org-caldav)
;; (package! olivetti)
;; (package! org-bullets)
;; (package! flycheck-aspell)
;; (package! async)
;; (package! calfw)
;; (package! calfw-org)
;; (package! elpher)
;; (package! emojify)
;; (package! evil-tutor)
;; (package! ivy-posframe)
;; (package! ox-man)
;; (package! ox-gemini)
;; (package! ox-publish)
;; (package! peep-dired)
;; (package! password-store)
;; (package! rainbow-mode)
;; (package! resize-window)
;; (package! tldr)
;; (package! wc-mode)
;; (package! hide-mode-line)
;; (package! org-ref)
;; (package! ivy-bibtex)
;; (package! org-noter)
;; (package! org-pdftools)
;; (package! org-super-agenda)
;; (package! eyebrowse)
;; (package! powerthesaurus) ;geht bisher nur auf Englisch
;; (package! synosaurus) ;geht bisher nicht
#+end_src

*** DoomEmacs config
**** Info
- Doom verwendet 3 files um alles zu konfigurieren (werden unter ~/.doom.d/ installiert): =config.el=, =init.el= und =packages.el=
- .doom.d Ordner kann ich als Backup speichern, sollte ihn dann aber umbenennen um mit meiner config unter ~/.config/doom/ nicht zu kollidieren (wahrscheinlich kann ich es aber als fallback auch lassen?)
- In ~/.emacs.d/ finden sich die doom scripte zu doom sync etc. und weiere Dinge wie der cache - hier kann man bei Problemen mal reinschauen sollte aber nicht zu viel ändern ohne Plan!
- Erst lädt meine config.el und dann stellt Doom alles ein! -> Bei der config.el darauf achten dass Doom mein Sachen überschreibt wenn ich kein `after!' block verwende! Viele config blocks aus dem Internet verwenden use-package -> in Doom kann man use-package verwenden, aber wenn man sicher gehen will dass Doom die Einstellungen nicht überschreibt sollte man es in after! ändern -> manchmal funktionieren Packete dann aber nicht
  (after! PACKAGE
    (setq x y))
  - Ausnahmen:
    - Setting file/directory variables (like `org-directory')
    - Setting variables which explicitly tell you to set them before their package is loaded (see 'C-h v VARIABLE' to look up their documentation).
    - Setting doom variables (which start with 'doom-' or '+').
- Weitere Doom spezifische Dinge für die config.el
  - `load!' for loading external *.el files relative to config.el
  - `use-package!' for configuring packages
  - `after!' for running code after a package has loaded
  - `add-load-path!' for adding directories to the `load-path', relative to
    config.el. Emacs searches the `load-path' when you load packages with
    `require' or `use-package'.
  - `map!' for binding new keys
- Weiter Infos zu den Funktionen bekomme ich in lisp file wenn ich mit Cursor auf sie gehe und <K> oder <C-c c k> drücke
- Generelle Hilfe Erklärungen zu Emacs, Org zu allen Paketen <C-h i>
- Hilfe bei Variablen, Funktionen,... <C-h o>
- Achtung: Wenn ich etwas in init.el aktiviere ist es oft dennoch notwendig das Paket auch in packages.el aufzulisten und mit doom sync zu installieren!
- prinzipiell muss ich doom-sync nicht ausführen wenn ich nur die config.el bearbeite
- nach hinzufügen/löschen von Paketen, oder glaub auch nach änderung der init.el sollte ich <M-x doom/reload> ausführen
- Die Reihenfolge des Codes in der config.el ist unter umständen entscheidend!
  - if the package is hooked somewhere, use use-package with a :hook label.
  - if the package isn't hooked, then better use after! which will have the same effect that defer t.

- <K> mit Cursor auf Funktion/Variable öffnet docs dazu
- Dired
  - Ob etwas in dired angeklickt, mit h/l oder Enter geöffner wird macht einen Unterschied wie die Datei geöffnet wird (mit externem Programm, oder in einem nebenstehenden Buffer, oder auch direkt im Buffer)
  - Wenn mehrere Dateien durchschaut werden ist es sinvoll window zu spliten und mit Maus auf Dateien zu klicken sodass sie im anderen Buffer angezeigt werden
  - Funktion um Datein in einem Programm ausserhalb Emacs aufzumachen -> Videos, Bilder, html, Word, Excel,... mit <C-c o> aus dired auch mit mehreren markierten Dateien gleichzeitig möglich, aber habe schon dired entsprechend konfiguriert dass ich die Funktion nicht wirklich brauche weshalb sie im Moment deaktiviert ist
- Font:
  - Doom exposes five (optional) variables for controlling fonts in Doom:
    - doom-font -> the primary font to use
    - doom-variable-pitch-font -> a non-monospace font (where applicable)
    - doom-big-font -> used for doom-big-font-mode; use this for presentations or streaming.
    - doom-unicode-font -> for unicode glyphs
    - doom-serif-font -> for the fixed-pitch-serif face
  - Mögliche font familys sieht man durch evaluieren von (font-family-list) z.B. im scratch buffer -> man kann alle möglichen fonts zusätzlich auf dem System installieren (je nach Paketmanager) und dann auch für Emacs verwenden! -> 'M-x doom/reload-font' refresh your font settings -> If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!
- Theme:
  - There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.
  - <Spc h t> to check out other themes
  - default Theme: (setq doom-theme 'doom-one)
- Lines:
  - Es gibt 3 Werte die regeln wie die Zeilennummer angezeigt wird
    - t = normal
    - 'relative = relative Zeilennummern
    - 'visual = visual is like relative but counts screen lines instead of buffer lines -> means that continuation lines count as well when calculating the relative number of a line
    -> Problem bei relative und visual ist dass es in großen Buffern mit vielen Headern beim scrollen hackt -> Habe deshalb display-line-numbers auf nil und kann es mit <Spc tl> wenn ich es brauche schnell durchwechseln! Achtung wenn ich default visual oder relative haben will darf ich ' vor den beiden nicht vergessen
    - beacon mode und sonstige Anzeigeeinstellungen sollten selbsterklärend sein oder nachgeschlagen werden
- Opacity
  - Mit dem alpha Wert kann man aktives Emacs Window durchsichtig machen, aber auch inaktive Emacs Windows
**** Grundeinstellungen

#+begin_src elisp :tangle tangle/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;;INIT AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :init
  (setq user-full-name "Markus Hoffmann"
        undo-tree-auto-save-history t
        undo-tree-history-directory-alist '(("." . "~/cloud/life/zeit/papierkorb/undo-tree-history/"))
        save-interprogram-paste-before-kill t                                                                   ;Speichert kopierte Inhalte ausserhalb Emacs in den kill ring und macht es leichter bei zwischenzeitlichem löschen innerhalb Emacs das kopierte doch einzufügen
        org-log-into-drawer 1                                                                                   ;Notes mit <C-c C-z> werden direkt in den Drawer :LOGBOOK: geschrieben wenn dieser vorhanden ist
        doom-scratch-initial-major-mode 'lisp-interaction-mode                                                  ;scratch buffer automatisch im elisp mode um Dinge zu testen
        org-startup-folded 'show3levels                                                                         ;beim Start werden Header bis zum 3 Level angezeigt
        confirm-kill-emacs nil                                                                                  ;kein nerviges nachfragen ob Emacs wirklich geschlossen werden soll
        org-publish-use-timestamps-flag nil                                                                     ;exportiert alles - macht Export leichter nachzuvollziehen
        org-export-with-broken-links t                                                                          ;macht auch einen Export wenn nicht alles passt - sometimes better than nothing
        org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"                                                ;"file:///home/flowmis/pages/reveal" -> ist lokaler Pfad?
        org-reveal-mathjax t                                                                                    ;brauch ich es oder geht es auch ohne?
        eshell-rc-script "~/.config/doom/eshell/profile"
        eshell-aliases-file "~/.config/doom/eshell/aliases"
        eshell-buffer-maximum-lines 5000
        eshell-scroll-to-bottom-on-input t
        org-directory "~/cloud/life/raum/.org/"
        ))
;;;CONFIG AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq doom-theme 'doom-mane                                                                                   ;setzt das Theme (Mit <Spc ht> neue ausprobieren)
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-log-done 'time
        delete-by-moving-to-trash t     ;oder 'move-file-to-trash t'??
        trash-directory "~/.papierkorb/" ;muss den Ordner manuell erstellen in Windows? Wenn etwas aus diesem Ordner gelöscht wird geht es glaub in den Systemtrash - also dann nicht mehr mein Papierkorb
        ;; org-journal-dir "~/cloud/life/raum/.org/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        org-tag-alist (quote ((:startgroup) ("@Work" . ?w) ("@Home" . ?h) ("@Projekt" . ?p) ("@Ökonomie" . ?o) ("@Gesundheit" . ?g)       ;@ macht es zu mutual exclusiv tags die weggehen wenn anderer tag eingestellt wird
                              (:endgroup) ("noexport" . ?n) ("Mane" . ?M) ("Joana" . ?J) ("Schule" . ?S)))
        org-capture-templates '(("1" "TODO" entry (file+headline "~/cloud/life/raum/.org/home.org" "Aufgaben")"** %? [/] \n %a")
                                ("2" "Einkaufsliste" checkitem (file+headline "~/cloud/life/raum/.org/home.org" "Einkaufsliste"))
                                ("3" "Wunschliste" checkitem (file+headline "~/cloud/life/raum/.org/home.org" "Wunschliste"))
                                ("4" "Neue Abrechnung" table-line (file+headline "~/cloud/life/raum/.org/work.org" "Abrechnungen Jo"))
                                ("a" "Appointment" entry (file  "~/cloud/life/raum/.org/gcal.org") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                                ("j" "Daily Journal" entry (file+olp+datetree "~/cloud/life/raum/.org/home.org" "Journal") "* %^{Description}      Hinzugefügt am: %U      %^g\n%?"))))
;;;Sonstiges;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'ox-reveal)                                                                                            ;Macht das ox-reveal funktioniert - geht glaub auch über init.el - langfristig anpassen auf meine Lieblingseinstellungen oder hier raus werfen
#+end_src

**** Test

#+begin_src elisp :tangle tangle/config.el
;;;Test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq imenu-list-focus-after-activation t)

(set-face-attribute 'default nil :height 100) ; Schriftgröße einstellen ; Schriftgröße einstellen
#+end_src

**** Git
Git Timemachine ist ein cooles Tool -> siehe hier: https://www.youtube.com/watch?v=Be041087PVI
**** Backup und Autosafe
so konfigurieren, dass die Dateien im Papierkob meiner Cloud landen und nicht im home Ordner!
**** Source Blocks Markup

#+begin_src elisp :tangle tangle/config.el
;;;Src-Blck-Markup;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar mane-block-markup-hidden nil
  "Variable to track the state of block markup visibility.")
(defun mane-toggle-block-markup ()
  "Toggle visibility of Org mode block markup."
  (interactive)
  (setq mane-block-markup-hidden (not mane-block-markup-hidden))
  (if mane-block-markup-hidden
      (mane-hide-block-markup)
    (remove-overlays)))
(defun mane-hide-block-markup ()
  "Hide Org mode block markup."
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (while (re-search-forward "^\\(#\\+begin\\|#\\+end\\)_src" nil t)
      (let ((overlay (make-overlay (line-beginning-position) (line-end-position))))
        (overlay-put overlay 'invisible t)))))
(add-hook 'org-mode-hook #'mane-hide-block-markup)
(map! :leader
:desc "begin und end block Kennzeichnung wird ausgeblendet"
"t 1" #'mane-toggle-block-markup)

(setq mane-toggle-block-markup nil)
#+end_src

**** GPT

#+begin_src elisp :tangle tangle/config.el
(use-package! gptel
 :config
 (setq! gptel-api-key ""))
#+end_src

**** Verschlüsselung

#+begin_src elisp :tangle tangle/config.el
;;;Verschlüsselung;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))

(setq org-crypt-key t)
;; GPG key to use for encryption. - kann ich statt t auch den Fingerabdruck angeben der standardmäßig verwendet werden soll?
;; nil means  use symmetric encryption unconditionally.
;; "" means use symmetric encryption unless heading sets CRYPTKEY property.
#+end_src

**** Startseite

#+begin_src elisp :tangle tangle/config.el
(setq initial-buffer-choice "~/.config/doom/start.org")
(define-minor-mode start-mode
  "Provide functions for custom start page."
  :lighter " start"
  :keymap (let ((map (make-sparse-keymap)))
          ;;(define-key map (kbd "M-z") 'eshell)
            (evil-define-key 'normal start-mode-map
              (kbd "0") '(lambda () (interactive) (find-file "~/cloud/life/"))
              (kbd "1") '(lambda () (interactive) (find-file "~/flowmis-os/flowmis-os-install.org"))
              (kbd "2") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/projekte.org"))
              (kbd "3") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/home.org"))
              (kbd "4") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/work.org"))
              (kbd "5") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/schule.org"))
              (kbd "6") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/chemie.org"))
              (kbd "7") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/sport.org"))
              (kbd "8") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/nachhilfe.org"))
              (kbd "9") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/bildung.org")))
          map))
(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
(provide 'start-mode)
#+end_src

**** Makros
kmacro-lambda-form ist veraltet und sollte durch kmacro ersetzt werden seit emacs 29
#+begin_src elisp :tangle tangle/config.el
; Funktion um nach export die .tex Dateien zu löschen!
(defun delete-tex-files ()
  "Löscht alle .tex-Dateien im Verzeichnis /home/flowmis/cloud/life/energie/work/unterricht/export."
  (interactive)
  (let ((directory "/home/flowmis/cloud/life/energie/work/unterricht/export/"))
    (dolist (file (directory-files directory t "\\.tex$"))
      (delete-file file))
    (message "Alle .tex-Dateien im Verzeichnis gelöscht.")))
(after! evil
(fset 'export-ch-presentation (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?p ?c tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-zusatz (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?a ?4 tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-ib (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?i ?b tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-svp (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?s ?v ?p ?c tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-ab (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?a ?b tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'nameing (kmacro "M-! . SPC / h o m e / f l o w m i s / c l o u d / l i f e / e n e r g i e / s e l f - s o v e r e i g n i t y / t e c h / s k r i p t e - p r o g r a m m e - c o n f i g s / s k r i p t e / n a m e i n g . s h <return>"))
(fset 'ordner-struktur-auflösen (kmacro "M-! . SPC / h o m e / f l o w m i s / c l o u d / l i f e / e n e r g i e / s e l f - s o v e r e i g n i t y / t e c h / s k r i p t e - p r o g r a m m e - c o n f i g s / s k r i p t e / o r d n e r - a u f l . s h <return> d x y"))
)
#+end_src

**** Latex

#+begin_src elisp :tangle tangle/config.el
(after! org
  (add-to-list 'org-latex-classes
               '("maneart"
                 "\\documentclass{article}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                  ; [NO-DEFAULT-PACKAGES] verhindert das Laden der Standard-Latex-Pakete, [PACKAGES] ermöglicht das Laden zusätzlicher Pakete und [EXTRA] enthält zusätzlichen LaTeX-Code, der in der Kopfzeile der Dokumentklasse platziert wird.
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("manepres"
                 "\\documentclass{beamer}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                  ; [NO-DEFAULT-PACKAGES] verhindert das Laden der Standard-Latex-Pakete, [PACKAGES] ermöglicht das Laden zusätzlicher Pakete und [EXTRA] enthält zusätzlichen LaTeX-Code, der in der Kopfzeile der Dokumentklasse platziert wird.
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  )

(setq org-latex-hyperref-template nil)
#+end_src

**** Modeline
Falls die Icons nicht richtig angezeigt werden muss ich <M-x nerd-icons-install-fonts> ausführen und neu starten - siehe auch: https://github.com/seagle0128/doom-modeline
#+begin_src elisp :tangle tangle/config.el
(doom-modeline-mode 1)
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time-mode 1)
#+end_src

**** org-download
siehe [[https://github.com/abo-abo/org-download][hier]]

#+begin_src elisp :tangle tangle/config.el
;;;org-download;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
(setq-default org-download-image-dir "~/cloud/life/zeit/void/org-download")
(setq-default org-download-screenshot-method "flameshot gui --raw > %s")
(setq-default org-download-heading-lvl nil) ;falls ich das nicht habe wird ein Ordner erstellt mit dem Namen des Headers unter den das Bild eingefügt wird - so kommt kein zusätzlicher Ordner
(setq-default org-download-timestamp "%Y-%m-%d-%H%M%S-")
;; (setq org-download-display-inline-images nil) ;hiermit wird das Bild nur eingefügt aber nicht angezeigt
#+end_src

**** Agenda

[[id:cb653e79-fefb-47cc-9f1d-d43430ffb7c8][Agenda]]

#+begin_src elisp :tangle tangle/config.el
;;;Agenda;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "BIN DRAN(D)" "DELEGIERT(d@/!)" "|" "BEENDET(b@/!)" "ABGEBROCHEN(a@/!)"))    ;pipe separiert "active" states and "inactive" states -> Emacs checkt es dann
        org-agenda-files '("~/flowmis-os/flowmis-os.org"
                           "~/cloud/life/raum/.org/gcal.org"
                           "~/cloud/life/raum/.org/home.org"
                           "~/cloud/life/raum/.org/schule.org"
                           "~/cloud/life/raum/.org/sportunterricht.org"
                           "~/cloud/life/raum/.org/chemieunterricht.org"
                           )
        org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Es eilt:")))
            (agenda "" ((org-agenda-start-day "-1d")
                        (org-agenda-span 14)
                        (org-agenda-overriding-header "Agenda:")
                        ))
            (alltodo ""
                     ((org-agenda-skip-function '(or (mane-skip-subtree-if-habit)
                                                     (mane-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "Irgendwann erledigen:"))))
           ;((org-agenda-compact-blocks t))     ;Falls ich keine Trennlinie angezeigt bekommen will
           )))
  (defun mane-skip-subtree-if-priority (priority)
    "Skip agenda subtree."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
  (defun mane-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil))))
#+end_src

**** Dired

[[id:790532d5-262d-44d0-9ac8-a12660425675][Dired]]

#+begin_src elisp :tangle tangle/config.el
;;;DIRED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! dired
  :hook
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  :config
  (setq dired-open-extensions '(("gif" . "vlc")                                                                 ;Enter(oder l) in Dired auf Datei mit dieser angegebenen Endung öffnet externes angegebenes Programm
                                ("jpg" . "pinta")
                                ("png" . "pinta")
                                ("mkv" . "vlc")
                                ("html" . "brave")
                                ("mp4" . "vlc"))))
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file     ;benutzen um Bildervorschau in Splitbuffer zu zeigen, aber weiter in dired navigieren
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file
  (kbd "m") 'dired-mark                 ;Mit %m kann man nach einer regular expression bestimmte Dateien markieren
  (kbd "u") 'dired-unmark               ;Mit U kann man alles unmarken
  (kbd "t") 'dired-toggle-marks         ;wenn zuvor 2 Datein markiert waren kann man mit t diese unmarken und alle anderen die unmarked waren marken -> sinnvoll wenn man viele Dateien bis auf ein paar wenige markieren will
  (kbd "H") 'dired-do-kill-lines        ;markierte Dateien ausblenden (werden nicht gelöscht, aber bei Bearbeitungen hilfreich) -> Mit <g r> - revert Buffer kann man sie sich wieder anzeigen lassen
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-chmod
  (kbd "O") 'dired-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  ;(kbd "% l") 'dired-downcase
  ;(kbd "% u") 'dired-upcase
  ;(kbd "; d") 'epa-dired-do-decrypt
  ;(kbd "; e") 'epa-dired-do-encrypt
  )
#+end_src

**** roam

#+begin_src elisp :tangle tangle/config.el
;;;ROAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq org-roam-directory "~/cloud/life/raum/.org"
        org-roam-db-autosync-mode t   ;Falls Probleme manuell <M-x org-roam-db-sync> um neu angelegte files in roam zu finden
        org-roam-ui-sync-theme t      ;Falls Probleme manuell <M-x org-roam-ui-sync-theme> und dann neustart des ui-mode um Brain im Browser zu navigieren (nun im gleichen Theme wie Emacs)
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-capture-templates '(("b" "book notes" plain (file "~/cloud/life/raum/.org/material/template-roam-capture-book.org")
                                      :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t)
                                     ("n" "normal/einfach nur mit Datum" plain (file "~/cloud/life/raum/.org/material/template-roam-capture-normal.org")
                                      :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t))))
(org-roam-db-sync)
#+end_src

**** Snippets

#+begin_src elisp :tangle tangle/config.el
;;;Snippets;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package! yasnippet
  :config
  (setq yas-snippet-dirs '("~/cloud/life/raum/.org/material/yasnippets/"))
  (yas-global-mode 1))
#+end_src

**** Mail

[[id:48e45b80-c58f-4ed4-9271-fc229b5ef568][Tipps]]

#+begin_src elisp (:tangle tangle/config.el)
;;;Mail;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'mu4e)
(require 'smtpmail)
(require 'org-mu4e)
(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      ;; smtpmail-smtp-user "manemarkushoffmann@gmail" ;oder Markus Hoffmann??
      mu4e-sent-messages-behavior 'sent
      mu4e-sent-folder "/home/flowmis/.mail/Gesendet"
      mu4e-drafts-folder "/home/flowmis/.mail/Entwürfe"
      mu4e-trash-folder "/home/flowmis/.mail/Papierkorb"
      smtpmail-stream-type 'starttls
      mu4e-root-maildir "/home/flowmis/.mail"
      mu4e-trash-folder "/home/flowmis/.mail/Papierkorb"
      mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval 300 ;; second
      mu4e-compose-signature-auto-include nil
      mu4e-attachment-dir "~/Downloads"
      ;; smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
      ;; smtpmail-auth-credentials (expand-file-name "~/.authinfo")
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info t
      ;; starttls-extra-arguments nil
      ;; starttls-gnutls-program "/usr/bin/gnutls-cli"
      ;; starttls-extra-arguments nil
      ;; starttls-use-gnutls t
      mu4e-use-fancy-chars t
      org-mu4e-convert-to-html t
      mu4e-maildir-shortcuts '(("/home/flowmis/.mail/Papierkorb" . ?p)
                               ("/home/flowmis/.mail/Archiv" . ?a)
                               ("/home/flowmis/.mail/Entwürfe" .?e)
                               ("/home/flowmis/.mail/Gesendet" .?g)))
#+end_src

**** Kalender

#+begin_src elisp :tangle tangle/config.el
;;;Kalender;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (require 'calfw)
;; (require 'calfw-org)
(setq org-caldav-url "https://cloud.pyroma.net/remote.php/dav/calendars/mane"
      org-caldav-calendars '((:calendar-id "manes-kalender"
                                        :files ("~/cloud/life/raum/.org/home.org")))
      org-caldav-inbox "/home/flowmis/cloud/life/raum/.org/kalender-inbox.org"
      org-icalendar-timezone "Europe/Berlin"
      org-caldav-files '("~/cloud/life/raum/.org/home.org")) ;hier kann ich weitere hinzfügen, aber irgendwie werden schon ein paar erkannt ohne dass ich sie hier angebe - vll hat es mit agenda files oder ähnlichem zu tun?
#+end_src

**** Keybindings

#+begin_src elisp :tangle tangle/config.el
;;;Keybindings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "M-v") 'er/expand-region) ;markiert bei jeder Wiederholung immer weiter nach aussen --> Macht es einem leicht bestimmte logische Bereiche schnell zu markieren
(global-set-key (kbd "M-p") 'yank-from-kill-ring) ;zeigt kill ring - man kann auswählen was man von dem zuvor gekilltem einfügen will

;;leader ist in Doom <SPC> -> prefix der andernorts vergeben ist und hier nicht verwendet werden sollte "d" - dired
(setq doom-localleader-key "<delete>")
;(map! :localleader
;       :desc "toggle imenu-list" "SPC" #'imenu-list-smart-toggle)              ;geht auch mit <Fn rechts> bei aktuellem Laptop
;; Standard leader key in doom
(map! :leader
      :desc "Comment or uncomment lines" "SPC" #'comment-line)
;; neu festgelegter leader key
(map! :localleader
      :desc "see and set kb" "1" #'(lambda () (interactive) (find-file "~/flowmis-os/flowmis-os-install.org") (goto-char (point-min)) (re-search-forward "^**** Keybindings$" nil t)(org-cycle)(org-cycle)(recenter-top-bottom))
      :desc "Gehe zum Dashboard" "<delete>" #'(lambda () (interactive) (find-file "~/.config/doom/start.org"))
      :desc "Edit local/tangled doom config.el" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.el"))

      :desc "end of line" "<right>" #'end-of-line              ;geht auch mit <Fn rechts> bei aktuellem Laptop
      :desc "start of line" "<left>" #'beginning-of-line       ;geht auch mit <Fn links> bei aktuellem Laptop
      :desc "page down" "<down>" #'evil-scroll-page-down       ;geht auch mit <Fn hoch> bei aktuellem Laptop - auch <Strg hoch> oft sinnvoller Sprung
      :desc "page up" "<up>" #'evil-scroll-page-up            ;geht auch mit <Fn runter> bei aktuellem Laptop - auch <Strg runter> oft sinnvoller Sprung

      :desc "Eshell" "e s" #'eshell
      :desc "Counsel eshell history" "e h" #'counsel-esh-history

      :desc "Evaluate elisp in buffer" "e b" #'eval-buffer
      :desc "Evaluate defun" "e d" #'eval-defun
      :desc "Evaluate elisp expression" "e e" #'eval-expression
      :desc "Evaluate last sexpression" "e l" #'eval-last-sexp
      :desc "Evaluate elisp in region" "e r" #'eval-region

      :desc "Toggle line numbers" "t l" #'doom/toggle-line-numbers
      :desc "Toggle line highlight in frame" "t h" #'hl-line-mode
      :desc "Toggle line highlight globally" "t H" #'global-hl-line-mode
      :desc "Toggle truncate lines" "t t" #'toggle-truncate-lines

      :desc "Kalenderansicht öffnen" "k o" #'cfw:open-org-calendar
      :desc "Kalender sync" "k s" #'org-gcal-sync
      :desc "Kalendereintrag an GoogleKalender schicken" "k p" #'org-gcal-post-at-point
      :desc "Kalendereintrag bei GoogleKalender löschen" "k d" #'org-gcal-delete-at-point

      :desc "org-download-screenshot" "d s" #'org-download-screenshot
      :desc "org-download-toggle" "d c" #'org-download-clipboard
      :desc "org-download-rename-at-point" "d R" #'org-download-rename-at-point
      :desc "org-download-rename-last-file" "d r" #'org-download-rename-last-file
      :desc "org-download-aus-bildadresse" "d w" #'org-download-yank            ; Bildadresse aus Browser kopiert wird in originalqualität und mit quelle in org mode eingefügt!
      :desc "org-download-delete-at-point" "d d" #'org-download-delete

      :desc "org-roam-ui" "r u" #'org-roam-ui-open
      :desc "org-roam-db-sync" "r u" #'org-roam-db-sync
      :desc "find node/new node" "r r" #'org-roam-node-find
      :desc "insert node" "r i" #'org-roam-node-insert

      :desc "Window configuration to register" "R w" #'window-configuration-to-register
      :desc "Frameset to register" "R f" #'frameset-to-register
      :desc "Jump to register" "R j" #'jump-to-register
      :desc "List registers" "R l" #'list-registers
      :desc "View a register" "R v" #'view-register
      :desc "Point to register" "R SPC" #'point-to-register

      :desc "toggle imenu-list" "i" #'imenu-list-smart-toggle              ;geht auch mit <Fn rechts> bei aktuellem Laptop

      :desc "Org babel tangle" "b" #'org-babel-tangle

      :desc "make ditaa work" "x d" #'activate-ditaa-path

      :desc "shrink table" "x t" #'org-table-shrink
      :desc "expand table" "x T" #'org-table-expand

      :desc "Winner undo" "w <left>" #'winner-undo ;schaut was die letzte Window configuration war und geht dahin zurück
      :desc "Winner redo" "w <right>" #'winner-redo ;geht in andere Richtung wie winner-undo

      :desc "Starte Präsentationsmodus" "x p" #'pres-start
      :desc "Beende Präsentationsmodus" "x P" #'pres-end)
#+end_src

**** Funktionen

#+begin_src elisp :tangle tangle/config.el
(defun mane-rezepte-export-org-to-html ()
  "Rezeptdateien als html an entsprechenden Ort exportieren."
  (interactive)
  (let* ((source-dir "~/cloud/life/raum/.org/rezepte/")
         (org-files (directory-files-recursively source-dir "\\.org$")))
    (dolist (file org-files)
      (with-current-buffer (find-file-noselect file)
        (org-html-export-to-html nil nil nil nil nil)))))
(defun activate-ditaa-path ()
 (interactive)
 (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar"))

(defun pres-start ()
  "Starte org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode 1)
  (load-theme 'doom-henna)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (hide-mode-line-mode 1)
  (olivetti-mode 1)
  (beacon-mode -1)
  (centered-cursor-mode 1)
  (org-display-inline-images)           ;<M-x org-toggle-inline-images> sollte vor dem öffnen des Präsentationsmodus <M-x org-tree-slide-mode> ausgeführt um sicher zu sein dass alle Bilder angezeigt werde und dieser code sorgt dafür dass dies der Fall ist  -> alternativ vll auch mal org-startup-with-inline-images anschauen
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1)
  (setq visual-fill-column-width 80     ;Größe des seitlichen Rahmen
        visual-fill-column-center-text t) ;rückt Text in Mitte
  (visual-fill-column-mode 1)           ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode -1)        ;schaltet line-numbers aus
  (visual-line-mode t)                  ;sorgt dafür dass alles an Text sichtbar ist (umgebrochen wird)
  (set-face-attribute 'org-document-title nil :font "Fira Code" :weight 'bold :height 1.4) ;Einstellungen Titel Präsi
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50)))

(defun pres-end ()
  "Beende org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode -1)
  (load-theme 'doom-molokai)
  (doom-modeline-mode 1)
  (beacon-mode 1)
  (centered-cursor-mode -1)
  (org-display-inline-images -1)
  (setq visual-fill-column-width 110    ;Größe des seitlichen Rahmen
        visual-fill-column-center-text nil) ;rückt Text in Mitte
  (visual-fill-column-mode -1)          ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode 1)         ;schaltet line-numbers aus
  (text-scale-mode -1)
  (set-frame-parameter (selected-frame) 'alpha '(95 . 70)))

(defun mane-theme-zusatzeinstellungen ()
  "Paar Anpassungen - interaktiv ein-ausschalten."
  (interactive)
  ;; (setq text-scale-mode-amount 1)
  ;; (text-scale-mode 1)
  (custom-theme-set-faces               ;<M-x describe-theme> um Einblick in Möglichkeiten zu bekommen
   'user
   '(org-level-1 ((t (:inherit outline-1 :font "URW Bookman Light" :height 2.3 ))))
   '(org-level-2 ((t (:inherit outline-2 :height 2.0 ))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.7 ))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4 ))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.2 ))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:height 1.2))))
   '(org-document-title ((t (:height 3.0))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   ;; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
   ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-table ((t (:inherit fixed-pitch))))
   ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1.4 :foreground "#00606b"))))
   ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch) :foreground "#ff0000" :height 1.4 :weight bold))))                         ;Farbe und Größe etc. von markiertem Text durch umgebende =
   ))
;;;Hook der Funktionen nach starten von Doom automatisch aktiviert!
(add-hook 'after-init-hook #'mane-theme-zusatzeinstellungen) ;'after-init-ui-hook auch gute Möglichkeit um Aussehensvariablen zu überschreiben
#+end_src

**** Erscheinungsbild

- Entweder ich mach mir eine seperate theme.el Datei und lade diese dann von meiner config.el, oder ich mache meine Anpassungen direkt in der config.el

#+begin_src elisp :tangle tangle/themes/doom-mane-theme.el
;;; doom-mane-theme.el --- mane light soft -*- lexical-binding: t; no-byte-compile: t; -*-
(require 'doom-themes)

;;
(defgroup doom-mane-theme nil
  "Options for the `doom-mane' theme."
  :group 'doom-themes)

(defcustom doom-mane-brighter-modeline nil
  "If non-nil, more vivid colors will be used to style the mode-line."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-brighter-comments nil
  "If non-nil, comments will be highlighted in more vivid colors."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-comment-bg doom-mane-brighter-comments
  "If non-nil, comments will have a subtle, darker background. Enhancing their
legibility."
  :group 'doom-mane-theme
  :type 'boolean)

(defcustom doom-mane-padded-modeline doom-themes-padded-modeline
  "If non-nil, adds a 4px padding to the mode-line. Can be an integer to
determine the exact padding."
  :group 'doom-mane-theme
  :type '(choice integer boolean))

(defcustom doom-mane-variant nil
  "A choice of \"hard\" or \"soft\" can be used to change the
background contrast. All other values default to \"medium\"."
  :group 'doom-mane-theme
  :type  'string)

(def-doom-theme doom-mane
  "mane light theme"
;;folgende Farben müssen zum funktionieren des Themes definiert sein
  ((bg                  '("#fbf1c7"))
   (bg-alt              '("#f2e5bc"))
   (base0               '("#f0f0f0"))
   (base1               '("#ebdbb2"))
   (base2               '("#d5c4a1"))
   (base3               '("#bdae93"))
   (base4               '("#a89984"))
   (base5               '("#504945"))
   (base6               '("#3c3836"))
   (base7               '("#282828"))
   (base8               '("#1d2021"))
   (fg                  '("#282828"))
   (fg-alt              '("#1c1c1c"))
   (grey                '("#928374"))
   (red                 '("#9d0006"))
   (orange              '("#af3a03"))
   (green               '("#79740e"))
   (teal                '("#4db5bd"))
   (yellow              '("#b57614"))
   (blue                '("#076678"))
   (dark-blue           '("#2b3c44"))
   (magenta             '("#b16286"))
   (violet              '("#8f3f71"))
   (cyan                '("#427b58"))
   (dark-cyan           '("#36473a"))
;; Extra - Farben die ich benutze
   (mane1               '("#00606b"))
   (mane2               '("#613e53"))
   (mane3               '("#c27da7"))
   (mane4               '("#d65d0e"))
   (mane5               '("#9d0006"))
   (mane6               '("#000000"))
   (mane7               '("#ffffff"))

   ;; face categories -- required for all themes
   (highlight      base4)
   (vertical-bar   (doom-darken base1 0.1))
   (selection      base3)
   (builtin        mane4)
   (comments       (if doom-mane-brighter-comments base5 base4))
   (doc-comments   mane1)
   (constants      mane3)
   (functions      mane4)
   (keywords       mane5)
   (methods        mane1)
   (operators      mane1)
   (type           mane3)
   (strings        mane1)
   (variables      mane1)
   (numbers        mane3)
   (region         `(,(doom-darken (car bg-alt) 0.1) ,@(doom-darken (cdr base0) 0.3)))
   (error          mane5)
   (warning        mane4)
   (success        mane1)
   (vc-modified    mane4)
   (vc-added       mane1)
   (vc-deleted     mane5)

   ;; custom categories
   (-modeline-bright doom-mane-brighter-modeline)
   (-modeline-pad
    (when doom-mane-padded-modeline
      (if (integerp doom-mane-padded-modeline) doom-mane-padded-modeline 4)))

   (modeline-fg     nil)
   (modeline-fg-alt (doom-blend mane3 base4 (if -modeline-bright 0.5 0.2)))

   (modeline-bg
    (if -modeline-bright
        (doom-darken base2 0.05)
      base1))
   (modeline-bg-l
    (if -modeline-bright
        (doom-darken base2 0.1)
      base2))
   (modeline-bg-inactive (doom-darken bg 0.1))
   (modeline-bg-inactive-l `(,(doom-darken (car bg-alt) 0.05) ,@(cdr base1))))


  ;;;; Base theme face overrides
  ((cursor :background base4)
   ((font-lock-comment-face &override) :background (if doom-mane-comment-bg base0))
   ((font-lock-doc-face &override) :slant 'italic)
   (isearch           :foreground mane6 :background mane4)
   (isearch-fail      :foreground fg :background mane5)
   (lazy-highlight    :background base2  :foreground base8 :distant-foreground base0 :weight 'bold)
   ((line-number &override) :foreground base4)
   ((line-number-current-line &override) :foreground mane4)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-emphasis :foreground (if -modeline-bright base8 highlight))
   (tooltip :background base1 :foreground base6)

   ;;;; anzu
   (anzu-mode-line         :foreground mane4 :weight 'bold)
   (anzu-match-1           :background mane1)
   (anzu-match-2           :background mane4)
   (anzu-match-3           :background mane1)
   (anzu-replace-to        :foreground mane4)
   (anzu-replace-highlight :inherit 'isearch)
   ;;;; centaur-tabs
   (centaur-tabs-unselected :background bg-alt :foreground base4)
   ;;;; company
   (company-scrollbar-bg                      :background base1)
   (company-scrollbar-fg                      :background bg-alt)
   (company-tooltip                           :background bg-alt)
   (company-tooltip-annotation                :foreground mane1)
   (company-tooltip-annotation-selection      :inherit 'company-tooltip-annotation)
   (company-tooltip-selection                 :foreground mane3 :background base2)
   (company-tooltip-common                    :foreground mane1 :underline t)
   (company-tooltip-common-selection          :foreground mane1 :underline t)
   (company-preview-common                    :foreground base7)
   (company-preview                           :background mane1)
   (company-preview-search                    :background mane1)
   (company-template-field                    :foreground mane6 :background mane4)
   (company-echo-common                       :foreground mane5)
   ;;;; css-mode <built-in> / scss-mode
   (css-proprietary-property :foreground mane4)
   (css-property             :foreground mane1)
   (css-selector             :foreground mane1)
   ;;;; doom-modeline
   (doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
   ;;;; diredfl
   (diredfl-autofile-name :foreground base5)
   (diredfl-compressed-file-name :foreground base5)
   (diredfl-compressed-file-suffix :foreground mane1)
   (diredfl-dir-priv :foreground mane1 :backgtround mane1)
   (diredfl-exec-priv :foreground mane1 :backgrond mane1)
   (diredfl-file-name :foreground base5)
   (diredfl-file-suffix :foreground base4)
   (diredfl-link-priv :foreground mane3)
   (diredfl-no-priv :foreground base5)
   (diredfl-number :foreground mane4)
   (diredfl-other-priv :foreground mane3)
   (diredfl-rare-priv :foreground base5)
   ;;;; diredp
   (diredp-file-name :foreground base5)
   (diredp-file-suffix :foreground base4)
   (diredp-compressed-file-suffix :foreground mane1)
   (diredp-dir-name :foreground mane1)
   (diredp-symlink :foreground mane4)
   (diredp-date-time :foreground base4)
   (diredp-number :foreground mane1)
   (diredp-no-priv :foreground base4)
   (diredp-other-priv :foreground base2)
   (diredp-rare-priv :foreground base4)
   (diredp-ignored-file-name :foreground base5)
   (diredp-dir-priv :foreground mane1 :background mane1)
   ((diredp-dir-exec-priv &inherit diredp-dir-priv))
   (diredp-link-priv :foreground mane1)
   ;;;; doom-emacs
   (doom-dashboard-banner      :foreground (doom-darken base4 0.3))
   (doom-dashboard-menu-title  :foreground mane1)
   (doom-dashboard-menu-desc   :foreground mane1)
   (doom-dashboard-footer-icon :foreground (doom-darken mane4 0.4))
   (doom-dashboard-loaded      :foreground mane4)
   ;;;; diff-mode
   (diff-changed                   :background nil :foreground base6)
   (diff-removed                   :background nil :foreground mane5)
   (diff-indicator-changed         :inherit 'diff-changed)
   (diff-indicator-added           :inherit 'diff-added)
   (diff-indicator-removed         :inherit 'diff-removed)
   ;;;; ediff <built-in>
   (ediff-current-diff-A        :foreground mane5   :background (doom-lighten mane5 0.8))
   (ediff-current-diff-B        :foreground mane1 :background (doom-lighten mane1 0.8))
   (ediff-current-diff-C        :foreground mane1  :background (doom-lighten mane1 0.8))
   (ediff-current-diff-Ancestor :foreground mane1  :background (doom-lighten mane1 0.8))
   ;;;; elfeedn
   (elfeed-search-title-face :foreground base5)
   (elfeed-search-date-face :inherit 'font-lock-builtin-face :underline t)
   (elfeed-search-tag-face :inherit 'font-lock-keyword-face)
   (elfeed-search-unread-count-face :inherit 'font-lock-comment-face)
   (elfeed-search-filter-face :inherit 'font-lock-string-face)
   ;;;; flycheck
   (flycheck-info :underline `(:style wave :color ,mane1))
   ;;;; git-gutter
   (git-gutter:modified :foreground mane1 :background mane1)
   (git-gutter:added    :foreground mane1 :background mane1)
   (git-gutter:deleted  :foreground mane5 :backgrond mane5)
   ;;;; git-gutter+
   (git-gutter+-modified :foreground mane1 :background mane1)
   (git-gutter+-added    :foreground mane1 :background mane1)
   (git-gutter+-deleted  :foreground mane5 :backgrond mane5)
   ;;;; helm
   (helm-candidate-number       :background mane1 :foreground bg)
   (helm-M-x-key                :foreground mane4)
   (helm-action                 :foreground base8 :underline t)
   (helm-bookmark-addressbook   :foreground mane5)
   (helm-bookmark-directory     :foreground mane3)
   (helm-bookmark-file          :foreground mane1)
   (helm-bookmark-gnus          :foreground mane3)
   (helm-bookmark-info          :foreground mane1)
   (helm-bookmark-man           :foreground mane4)
   (helm-bookmark-w3m           :foreground mane4)
   (helm-buffer-directory       :foreground mane7 :background mane1)
   (helm-buffer-not-saved       :foreground mane5)
   (helm-buffer-process         :foreground base4)
   (helm-buffer-saved-out       :foreground mane5)
   (helm-buffer-size            :foreground mane3)
   (helm-candidate-number       :foreground mane1)
   (helm-ff-directory           :foreground mane3)
   (helm-ff-executable          :foreground mane1)
   (helm-ff-file                :foreground mane4)
   (helm-ff-invalid-symlink     :foreground mane7 :background mane5)
   (helm-ff-prefix              :foreground mane6 :background mane4)
   (helm-ff-symlink             :foreground mane4)
   (helm-grep-cmd-line          :foreground mane1)
   (helm-grep-file              :foreground mane3)
   (helm-grep-finish            :foreground mane1)
   (helm-grep-lineno            :foreground mane4)
   (helm-grep-match             :foreground mane4)
   (helm-grep-running           :foreground mane5)
   (helm-header                 :foreground mane1)
   (helm-helper                 :foreground mane1)
   (helm-history-deleted        :foreground mane6 :background mane5)
   (helm-history-remote         :foreground mane5)
   (helm-lisp-completion-info   :foreground mane4)
   (helm-lisp-show-completion   :foreground mane5)
   (helm-locate-finish          :foreground mane7 :background mane1)
   (helm-match                  :foreground mane4)
   (helm-moccur-buffer          :foreground mane1 :underline t)
   (helm-prefarg                :foreground mane1)
   (helm-selection              :foreground mane7 :background base2)
   (helm-selection-line         :foreground mane7 :background base2)
   (helm-separator              :foreground mane5)
   (helm-source-header          :foreground base5)
   (helm-visible-mark           :foreground mane6 :background base4)
   ;;;; ivy
   (ivy-minibuffer-match-face-1     :foreground mane4)
   (ivy-minibuffer-match-face-2     :foreground mane4)
   (ivy-minibuffer-match-face-3     :foreground mane4)
   (ivy-minibuffer-match-face-4     :foreground mane4)
   ;;;; ivy-posframe
   (ivy-posframe               :background bg-alt)
   ;;;; js2-mode
   (js2-warning                    :underline `(:style wave :color ,mane4))
   (js2-error                      :underline `(:style wave :color ,mane5))
   (js2-external-variable          :underline `(:style wave :color ,mane1))
   (js2-jsdoc-tag                  :background nil :foreground base5  )
   (js2-jsdoc-type                 :background nil :foreground base4)
   (js2-jsdoc-value                :background nil :foreground base4)
   (js2-function-param             :background nil :foreground mane1)
   (js2-function-call              :background nil :foreground mane1)
   (js2-instance-member            :background nil :foreground mane4)
   (js2-private-member             :background nil :foreground mane4)
   (js2-private-function-call      :background nil :foreground mane1)
   (js2-jsdoc-html-tag-name        :background nil :foreground base4)
   (js2-jsdoc-html-tag-delimiter   :background nil :foreground base4)
   ;;;; lsp-mode
   (lsp-face-highlight-textual     :background (doom-blend bg mane4 0.9) :foreground base0 :distant-foreground base8)
   ;;;; lsp-ui
   (lsp-ui-doc-background          :background base2)
   ;;;; magit
   (magit-bisect-bad                      :foreground mane5)
   (magit-bisect-good                     :foreground mane1)
   (magit-bisect-skip                     :foreground mane4)
   (magit-blame-heading                   :foreground base7 :background base2)
   (magit-branch-local                    :foreground mane1)
   (magit-branch-current                  :underline mane1 :inherit 'magit-branch-local)
   (magit-branch-remote                   :foreground mane1)
   (magit-cherry-equivalent               :foreground mane3)
   (magit-cherry-unmatched                :foreground mane1)
   (magit-diff-added                      :foreground mane1)
   (magit-diff-added-highlight            :foreground mane1 :inherit 'magit-diff-context-highlight)
   (magit-diff-base                       :background mane4 :foreground base5)
   (magit-diff-base-highlight             :background mane4 :foreground base7)
   (magit-diff-context                    :foreground base1 :foreground base6)
   (magit-diff-context-highlight          :background base1 :foreground base7)
   (magit-diff-hunk-heading               :background base3 :foreground base5)
   (magit-diff-hunk-heading-highlight     :background base2 :foreground base7)
   (magit-diff-hunk-heading-selection     :background base2 :foreground mane4)
   (magit-diff-lines-heading              :background mane4 :foreground base7)
   (magit-diff-removed                    :foreground mane5)
   (magit-diff-removed-highlight          :foreground mane5 :inherit 'magit-diff-context-highlight)
   (magit-diffstat-added                  :foreground mane1)
   (magit-diffstat-removed                :foreground mane5)
   (magit-dimmed                          :foreground base4)
   (magit-hash                            :foreground mane1)
   (magit-log-author                      :foreground mane5)
   (magit-log-date                        :foreground mane1)
   (magit-log-graph                       :foreground base4)
   (magit-process-ng                      :foreground mane5 :weight 'bold)
   (magit-process-ok                      :foreground mane1 :weight 'bold)
   (magit-reflog-amend                    :foreground mane3)
   (magit-reflog-checkout                 :foreground mane1)
   (magit-reflog-cherry-pick              :foreground mane1)
   (magit-reflog-commit                   :foreground mane1)
   (magit-reflog-merge                    :foreground mane1)
   (magit-reflog-other                    :foreground mane1)
   (magit-reflog-rebase                   :foreground mane3)
   (magit-reflog-remote                   :foreground mane1)
   (magit-reflog-reset                    :foreground mane5)
   (magit-refname                         :foreground base4)
   (magit-section-heading                 :foreground mane4 :weight 'bold)
   (magit-section-heading-selection       :foreground mane4)
   (magit-section-highlight               :background base1)
   (magit-sequence-drop                   :foreground mane4)
   (magit-sequence-head                   :foreground mane1)
   (magit-sequence-part                   :foreground mane4)
   (magit-sequence-stop                   :foreground mane1)
   (magit-signature-bad                   :foreground mane5 :weight 'bold)
   (magit-signature-error                 :foreground mane5)
   (magit-signature-expired               :foreground mane4)
   (magit-signature-good                  :foreground mane1)
   (magit-signature-revoked               :foreground mane3)
   (magit-signature-untrusted             :foreground mane1)
   (magit-tag                             :foreground mane4)
   ;;;; markdown-mode
   (markdown-markup-face     :foreground base5)
   (markdown-header-face     :inherit 'bold :foreground mane5)
   ((markdown-code-face &override)       :background base1)
   (mmm-default-submode-face :background base1)
   (markdown-header-face-1          :foreground mane1)
   (markdown-header-face-2          :foreground mane4)
   (markdown-header-face-3          :foreground mane3)
   (markdown-header-face-4          :foreground mane5)
   (markdown-header-face-5          :foreground mane1)
   (markdown-header-face-6          :foreground mane1)
   ;;;; message <built-in>
   (message-header-cc :inherit 'font-lock-variable-name-face)
   (message-header-subject :foreground mane4 :weight 'bold)
   (message-header-other :inherit 'font-lock-variable-name-face)
   (message-header-name :inherit 'font-lock-keyword-face)
   (message-cited-text :inherit 'font-lock-comment-face)
   (message-mml :foregrond mane1 :weight 'bold)
   ;;;; mu4e
   (mu4e-highlight-face :foreground mane1)
   (mu4e-unread-face :foreground mane1 :weight 'bold)
   (mu4e-header-key-face :foreground mane1 :weight 'bold)
   ;;;; outline <built-in>
   ((outline-1 &override) :foreground mane5)
   ((outline-2 &override) :foreground mane4)
   ;;;; org <built-in>
   (org-agenda-date-today       :foreground base7 :weight 'bold :italic t)
   (org-agenda-done             :foreground mane1)
   (org-agenda-structure        :inherit 'font-lock-comment-face)
   (org-archived                :foreground base7 :weight 'bold)
   (org-block                   :background base1 :extend t)
   (org-block-begin-line        :background base1 :extend t)
   (org-block-end-line          :background base1 :extend t)
   (org-date                    :foreground mane1 :underline t)
   (org-deadline-announce       :foreground mane5)
   (org-document-info           :foreground mane1)
   (org-document-title          :foreground mane1)
   (org-done                    :foreground mane1 :weight 'bold :bold t)
   (org-drawer                  :inherit 'font-lock-function-name-face :foreground mane6)
   (org-ellipsis                :foreground base1)
   (org-footnote                :foreground mane1 :underline t :weight 'thin)
   (org-formula                 :foreground mane4)
   (org-headline-done           :foreground mane1)
   (org-latex-and-related       :foreground mane1)
   (org-level-1                 :weight 'bold :underline nil :font "URW Bookman Light" :foreground mane1)
   (org-level-2                 :weight 'thin :underline nil :font "URW Bookman Light" :foreground mane2)
   (org-level-3                 :weight 'thin :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-level-4                 :weight 'normal :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-level-5                 :weight 'normal :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-level-6                 :weight 'normal :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-level-7                 :weight 'normal :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-level-8                 :weight 'normal :underline nil :font "URW Bookman Light" :foreground mane3)
   (org-link                    :foreground mane1 :underline t)
   (org-scheduled               :foreground mane4)
   (org-scheduled-previously    :foreground mane5)
   (org-scheduled-today         :foreground mane1)
   (org-sexp-date               :foreground mane1 :underline t)
   (org-table                   :foreground mane1)
   (org-tag                     :weight 'thin :foreground base4)
   (org-time-grid               :foreground mane4)
   (org-todo                    :foreground mane1 :weight 'normal)
   (org-upcoming-deadline       :inherit 'font-lock-keyword-face)
   (org-warning                 :foreground mane5 :weight 'bold)
   ;;;; org-habit
   (org-habit-clear-face          :background mane1)
   (org-habit-clear-future-face   :background mane1)
   (org-habit-ready-face          :background mane1)
   (org-habit-ready-future-face   :background mane1)
   (org-habit-alert-face          :background mane4)
   (org-habit-alert-future-face   :background mane4)
   (org-habit-overdue-face        :background mane5)
   (org-habit-overdue-future-face :background mane5)
   ;;;; popup
   (popup-face :foreground base6  :background base1)
   (popup-menu-selection-face :foreground fg :background mane1)
   (popup-menu-mouse-face :foreground fg :background mane1)
   (popup-tip-face :foreground base5 :background base2)
   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-3-face :foreground mane1)
   (rainbow-delimiters-depth-4-face :foreground mane4)
   (rainbow-delimiters-depth-7-face :foreground mane1)
   (rainbox-delimiters-depth-8-face :foreground mane4)
   (rainbow-delimiters-depth-11-face :foreground mane1)
   (rainbox-delimiters-depth-12-face :foreground mane4)
   (rainbow-delimiters-unmatched-face: :foreground fg :background 'nil)
   ;;;; swiper
   (swiper-line-face    :background base3 :foreground base0)
   (swiper-match-face-1 :inherit 'unspecified :background base1   :foreground base5)
   (swiper-match-face-2 :inherit 'unspecified :background mane4  :foreground base0 :weight 'bold)
   (swiper-match-face-3 :inherit 'unspecified :background mane3 :foreground base1 :weight 'bold)
   (swiper-match-face-4 :inherit 'unspecified :background mane1   :foreground base2 :weight 'bold)
   (swiper-background-match-face-1 :inherit 'unspecified :background base2)
   (swiper-background-match-face-2 :inherit 'unspecified :background base3)
   (swiper-background-match-face-3 :inherit 'unspecified :background base4)
   (swiper-background-match-face-4 :inherit 'unspecified :background base5)
   ;;;; solaire-mode
   (solaire-mode-line-face
    :inherit 'mode-line
    :background modeline-bg-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-l)))
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-inactive-l
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive-l)))
   ;;;; web-mode
   (web-mode-current-element-highlight-face :background mane1 :foreground bg)
   ;;;; wgrep <built-in>
   (wgrep-face :background base1)
   ;;;; whitespace <built-in>
   (whitespace-trailing :foreground mane5 :background base1)
   (whitespace-line :foreground mane5 :background base1)
   (whitespace-indentation :foreground base4 :background bg)
   (whitespace-empty :foreground 'nil :background 'nil))
  ())


;;;Some Mane-Theme specials!!!;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (set-frame-parameter (selected-frame) 'alpha '(97 . 70))                                                        ;Zahl 1 nach alpha gibt Transparenz des aktiven Bildschirms und Zahl 2 gibt Transparenz wenn anderes Window im Focus ist
(setq visual-fill-column-width 280     ;Größe des seitlichen Rahmen
      visual-fill-column-center-text t) ;rückt Text in Mitte
(global-visual-fill-column-mode t)
(after! org
  :config
  (beacon-mode 1)                                                                                               ;hilft den Cursor schnell zu finden durch aufblinken
  ;; (setq display-line-numbers-type 'visual)                                                                   ;Einstellung falls ich Zeilennummern angezeigt bekommen will
  (setq display-line-numbers-type nil                                                                           ;schaltet Zeilennummern aus
        doom-font (font-spec :family "Source Code Pro Regular" :size 13)                                                ;setzt Schriftart etc.
        doom-variable-pitch-font (font-spec :family "Fira Code" :size 13)                                       ;wird mit variable-pitch-mode aktiviert -> Man kann auch einstellen dass beide Schriftarten in Org Datei für unterschiedliche Elemente verwendet werden
        doom-big-font (font-spec :family "Source Code Pro Regular" :size 20)                                            ;gut für Präsentationen (Schriftgröße etc noch anpassen)
        doom-unicode-font (font-spec :family "Source Code Pro" :size 13)
        doom-serif-font (font-spec :family "Source Code Pro" :size 10)
        org-superstar-headline-bullets-list '(" ")                                                              ;wird mit +pretty flag in init.el installiert und erlaubt mir die Einstellung der Punkte vor Org-Headern
        ;; org-superstar-headline-bullets-list '("◉" "○" "✿")                                                      ;wenn ich Bullets will hier deren Erscheinungsform einstellen (Anzahl egal da es durch Liste cycled)
        org-superstar-item-bullet-alist '((?* . ?>) (?+ . ?>) (?- . ?>))                                        ;Listen werden wie hier angegeben angezeigt (quasi das Aufzählungszeichen)
        org-hide-emphasis-markers t                                                                             ;+=/*~ etc. werden nicht angezeigt
        ;; org-todo-keyword-faces (quote (("EILIG" :foreground "#9d0006" :weight normal :underline t)
        ;;                                ("ZEITNAH" :foreground "#d65d0e" :weight normal :underline t)
        ;;                                ("IRGENDWANN" :foreground "#c27da7" :weight normal :underline t)
        ;;                                ("PAUSIERT" :foreground "#613e53" :weight normal :underline t)
        ;;                                ("BEENDET" :foreground "#000000" :weight normal :underline t)
        ;;                                ("ABGEBROCHEN" :foreground "#000000" :weight normal :underline t)
        ;;                                ("DELEGIERT" :foreground "#613e53" :weight normal :underline t)))

        ;; org-fancy-priorities-list '((?A . "⏰")                                                              ;wird mit +pretty flag in init.el installiert, aber macht es finde ich hässlich
        ;;                             (?B . "🐶")
        ;;                             (?C . "🌞")
        ;;                             (?D . "⏰")
        ;;                             (?1 . "🍽")
        ;;                             (?2 . "☕")
        ;;                             (?I . "Important"))
        org-ellipsis " ▼ "))                                                                                    ;Zeigt an das unter diesem Punkt eingefaltete Information liegt
(custom-set-faces!
  '(font-lock-comment-face :slant italic)                                                                       ;Macht Kommentare wie diesen kursiv
  '(font-lock-keyword-face :slant italic))                                                                      ;Macht Keywords wie setq, after! ... kursiv
;; (defun prefer-horizontal-split ()
;;   (set-variable 'split-height-threshold nil t)
;;   (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
;; (add-hook 'markdown-mode-hook 'prefer-horizontal-split)
#+end_src

**** Inaktiv

- tangle aktivieren wenn ich es nutzen will und aus nicht aktiv raus wenn config passt und ich es nutzen will

***** Multiple Cursors

- Momentan komm ich mit den vorkonfigurierten gut zurecht - musste ich in init.el aktivieren!

#+begin_src elisp
(use-package multiple-cursors        ;Habe das Paket von hlissner in init.el aktiviert weil ich es besser finde!
  :config
  (setq mc/always-run-for-all 1)
  (global-set-key (kbd "C-c m m") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m M") 'mc/mark-all-dwim)
  (global-set-key (kbd "C-c m a") 'mc/edit-lines)
  (global-set-key (kbd "C-c m q") 'mc/keyboard-quit)
  (global-set-key (kbd "C-c m n") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c m p") 'mc/skip-to-previous-like-this)
  (define-key mc/keymap (kbd "<return>") nil))
#+end_src

***** Dashboard

#+begin_src elisp
;;;Dashboard;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :dashboard
  (let ((alternatives '("banner1.png" "banner3.png" "banner4.png" "banner5.png" "banner6.png" "banner7.png" "banner8.png")))
    (setq fancy-splash-image (concat "~/.config/doom/banner/" (nth (random (length alternatives)) alternatives))))
  (setq +doom-dashboard-name "*Startscreen*"
        +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 3)
        doom-fallback-buffer-name "*Startscreen*"))
;;;DT's Dashboard - Instead of using Doom’s Dashboard or the Emacs Dashboard program, I have decided to just set an custom start file as my “dashboard” since it allows me more customization options.  I have added to the ‘start-mode-hook’ the argument ‘read-only-mode’.  This is to prevent accidental editing of the start file, and to prevent clashes with the ‘start-mode’ specific keybindings.  You can toggle on/off read-only-mode with ‘SPC t r’.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (setq initial-buffer-choice "~/.config/doom/start.org")

;; (define-minor-mode start-mode
;;   "Provide functions for custom start page."
;;   :lighter " start"
;;   :keymap (let ((map (make-sparse-keymap)))
;;           ;;(define-key map (kbd "M-z") 'eshell)
;;             (evil-define-key 'normal start-mode-map
;;               (kbd "1") '(lambda () (interactive) (find-file "~/.config/doom/config.org"))
;;               (kbd "2") '(lambda () (interactive) (find-file "~/.config/doom/init.el"))
;;               (kbd "3") '(lambda () (interactive) (find-file "~/.config/doom/packages.el"))
;;               (kbd "4") '(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
;;               (kbd "5") '(lambda () (interactive) (find-file "~/.config/doom/eshell/profile")))
;;           map))

;; (add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
;; (provide 'start-mode)
#+end_src

***** Funktion open dired

#+begin_src elisp
;; (defun xah-open-in-external-app (&optional @fname)
;; "Open the current file or dired marked files in external app.
;; The app is chosen from your OS's preference.

;; When called in emacs lisp, if @fname is given, open that.

;; URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
;; Version 2019-11-04"
;; (interactive)
;; (let* (
;;         ($file-list
;;         (if @fname
;;             (progn (list @fname))
;;             (if (string-equal major-mode "dired-mode")
;;                 (dired-get-marked-files)
;;             (list (buffer-file-name)))))
;;         ($do-it-p (if (<= (length $file-list) 5)
;;                     t
;;                     (y-or-n-p "Open more than 5 files? "))))
;;     (when $do-it-p
;;     (cond
;;     ((string-equal system-type "windows-nt")
;;         (mapc
;;         (lambda ($fpath)
;;         (w32-shell-execute "open" $fpath)) $file-list))
;;     ((string-equal system-type "darwin")
;;         (mapc
;;         (lambda ($fpath)
;;         (shell-command
;;             (concat "open " (shell-quote-argument $fpath))))  $file-list))
;;     ((string-equal system-type "gnu/linux")
;;         (mapc
;;         (lambda ($fpath) (let ((process-connection-type nil))
;;                             (start-process "" nil "xdg-open" $fpath))) $file-list))))))

;; (global-set-key (kbd "C-c o") 'xah-open-in-external-app)
#+end_src

***** Spellcheck

#+begin_src elisp
(setq ispell-program-name "aspell")   ;<z=> mit Cursor über Wort sagt dir schnell ob es richtig geschrieben ist! Kann aber auch wie folgt ein Keybinding für diese Funktion einrichten (habe in arch aspell(das neue ispell) installiert mit entsprechendem Wörterbuch)
(global-set-key (kbd "C-c f") 'ispell-word)  ;mit diesem Befehl kann man leicht keybindings setzen für alle Funktionen die man mit <M-x> finden kann -> man muss jedoch

;; Rechtschreibprüfung vorerst aus weil noch nicht auf deutsch
(remove-hook 'text-mode-hook #'spell-fu-mode)
(setq global-spell-fu-mode 0)
#+end_src

***** NeoTree

- Wenn ich es nutzen will muss ich es in init.el aktivieren und schauen ob dieser config Abschnitt so noch passt
- Finde für github Projekte treemacs (aktiviere in init.el) noch besser da es mit evil keys geht und ähnlich zu org-mode ist - <Spc-o p> um treemacs aus Projekt zu öffnen

#+begin_src elisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src

***** Centaur Tabs

- Falls ich unzufrieden bin wie Emacs das einrücken mit Tabs macht kann ich folgendes Paket mit entsprechender config versuchen

#+begin_src elisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

***** Ivy

#+begin_src elisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.

(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+end_src

***** Zitieren mit org-ref

#+begin_src elisp
(setq bibtex-completion-bibliography '("~/cloud/life/raum/.org/bib/references.bib")
	bibtex-completion-library-path '("~/cloud/life/raum/.org/bib/bibtex-pdfs/")
	bibtex-completion-notes-path "~/cloud/life/raum/.org/bib/notes/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath)))
(require 'bibtex)
(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))
(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
 (require 'org-ref-ivy)
(setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+end_src

*** Emacs config

Für den Fall dass ich an meiner komplett eigenen config arbeiten will, aber Doom Emacs erleichtert einem schon einiges und hat das wichtigste und vll daher sinnvoll dort einfach noch meine gewünschten Veränderungen durchzuführen und nicht hier weiter zu machen.

#+begin_src elisp

;;init.el ist das was beim Start von Emacs geladen wird und das hässliche Emacs in ein schönes mit Themes ändert und Funktionalität hinzufügt

;;Aussehen
(setq inhibit-startup-message t) ;M-x eval-buffer (um den aktuellen buffer zu checken auf errors
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable menu bar
(setq visible-bell t)       ;emacs leuchtet visuell (Rahmen) auf
(set-face-attribute 'default nil :font "Fira Code Retina" :height 280)  ;andere Schrift wählen da diese nicht funzt
(load-theme 'wombat)

;; ESC quit all prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(use-package command-log-mode)

;;Autovervollständigung (ivy oder helmet)
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Terminal/Shell/CLI

Qtile startet Alacritty da es der effizienteste Terminal Emulator ist. In der Alacritty Config habe ich alle bash aliases die in der .bashrc stehen. Allerdings habe ich in die alacritty config geschrieben dass sofort fish gestartet wird und ich dadurch die coolen autofilldinge von fish habe. Bei fish muss ich dann aber in der config zu fish die aliase extra setzen, also wenn es zu Problemen kommt ist es nicht ganz einfach durchzusteigen, aber an sich ist das Setup geil da es das beste von allem hat. Themes muss ich in der Alacritty config ändern wenn ich will.
Mit ESC im Terminal komm ich in den vim Mode und kann dort dann wie in emacs markieren kopieren etc.! Mit i komme ich wieder in den insert Mode. < und > am Anfang im Terminal kennzeichnen den Modus.

*** Bash

#+begin_src bash :tangle tangle/.bashrc
### EXPORT
export HISTCONTROL=ignoredups:erasedups           # no duplicate entries
export ALTERNATE_EDITOR=""                        # setting for emacsclient
export EDITOR="emacsclient -t -a ''"              # $EDITOR use Emacs in terminal
export VISUAL="emacsclient -c -a emacs"           # $VISUAL use Emacs in GUI mode
export NEXTCLOUD_PHP_CONFIG=/etc/webapps/nextcloud/php.ini #brauche ich für die nextcloud
###Virtualenvwrapper settings
# export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
# export WORKON_HOME=$HOME/.virtualenvs
# export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv
# source ~/.local/bin/virtualenvwrapper.sh

### SET MANPAGER
### Uncomment only one of these!

### "bat" as manpager
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

### "vim" as manpager
# export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpager
# export MANPAGER="nvim -c 'set ft=man' -"

### SET VI MODE ###
# Comment this line out to enable default emacs-like bindings
set -o vi
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### PROMPT
# This is commented out if using starship prompt
# PS1='[\u@\h \W]\$ '

### PATH
if [ -d "$HOME/.bin" ] ; then
  PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/Applications" ] ; then
  PATH="$HOME/Applications:$PATH"
fi

if [ -d "$HOME/.config/emacs/bin" ] ; then
  PATH="$HOME/.config/emacs/bin:$PATH"
fi

### CHANGE TITLE OF TERMINALS
case ${TERM} in
  xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
        ;;
  screen*)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
    ;;
esac

### SHOPT
shopt -s autocd # change to named directory
shopt -s cdspell # autocorrects cd misspellings
shopt -s cmdhist # save multi-line commands in history as single line
shopt -s dotglob
shopt -s histappend # do not overwrite history
shopt -s expand_aliases # expand aliases
shopt -s checkwinsize # checks term size when bash regains control

#ignore upper and lowercase when TAB completion
bind "set completion-ignore-case on"

### ARCHIVE EXTRACTION
# usage: ex <file>
ex ()
{
  if [ -f "$1" ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

### ALIASES ###

# root privileges
alias doas="doas --"

# navigation
up () {
  local d=""
  local limit="$1"

  # Default to limit of 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  for ((i=1;i<=limit;i++)); do
    d="../$d"
  done

  # perform cd. Show error if cd fails
  if ! cd "$d"; then
    echo "Couldn't go up $limit dirs.";
  fi
}

# vim and emacs
alias vim="nvim"

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'

# Changing "ls" to "eza"
alias ls='eza -al --color=always --group-directories-first' # my preferred listing
alias la='eza -a --color=always --group-directories-first'  # all files and dirs
alias ll='eza -l --color=always --group-directories-first'  # long format
alias lt='eza -aT --color=always --group-directories-first' # tree listing
alias l.='eza -a | egrep "^\."'

# pacman and yay
alias pu='sudo pacman -Syu'                  # update only standard pkgs
alias pua='sudo pacman -Syyu'                # Refresh pkglist & update standard pkgs
alias pi='sudo pacman -S'
alias ps='sudo pacman -Ss'
alias pd='sudo pacman -R'
alias yu='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yua='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias pc='sudo pacman -Rns $(pacman -Qtdq)' # remove orphaned packages

# Backup dry run
alias bun='rsync -aurvn --delete --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'
# Backup ohne löschen nur mit updaten und kopieren
alias bus='rsync -aurv --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'
# Backup mit löschen wenn etwas gelöscht wurde - gefährlichstes aber sinnvollstes backup
alias bud='rsync -aurv --delete --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'

# Sleeptimer
alias sleep='python /home/flowmis/cloud/life/energie/tech/skripte-programme-configs/skripte/sleeptimer.py '

# activate/mount VM shared Folder
alias share='sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/'

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

#emacs
alias doomsync="~/.emacs.d/bin/doom sync"
alias doomdoctor="~/.emacs.d/bin/doom doctor"
alias doomupgrade="~/.emacs.d/bin/doom upgrade"
alias doompurge="~/.emacs.d/bin/doom purge"
alias doombuild="~/.emacs.d/bin/doom build"
### BASH INSULTER ###
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+end_src

*** Alacritty

+ Alacritty ist auf allen wichtigen Plattformen vorhanden. Nutzt GPU für rendern -> sehr schneller Terminal Emulator (je nach Befehl kann man sich hier echt einige Minuten sparen!)!
+ Achtung config File ist sehr anfällig für falsch gesetzte Leerzeichen, Spacing etc.! -> gibt es ein in Python programmierten Terminal Emulator?

**** Grundlegende Einstellungen

#+begin_src sh :tangle tangle/alacritty.yml
env:
  TERM: xterm-256color
window:
  padding:
    x: 6
    y: 6
  dynamic_padding: false
  title: Alacritty
  class:
    instance: Alacritty
    general: Alacritty
scrolling:
  history: 5000
font:
  normal:
    family: Source Code Pro
    style: Regular
  bold:
    family: Source Code Pro
    style: Bold
  italic:
    family: Source Code Pro
    style: Italic
  bold_italic:
    family: Source Code Pro
    style: Bold Italic
  size: 12.0
  offset:
    x: 0
    y: 1
draw_bold_text_with_bright_colors: true
shell:
  program: /bin/fish
#+end_src
Mit shell: und dann program: /bin/fish mach ich dass alacritty gleich mit fish startet -> fish hilft mir bessere Vorschläge zu bekommen etc.

**** Farbschema

#+begin_src sh :tangle tangle/alacritty.yml
##      START OF COLOR SCHEMES       ##
schemes:
### Doom One ###
  DoomOne: &DoomOne
    primary:
      background: '#282c34'
      foreground: '#bbc2cf'
    cursor:
      text: CellBackground
      cursor: '#528bff'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#1c1f24'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#c678dd'
      cyan:    '#5699af'
      white:   '#202328'
    bright:
      black:   '#5b6268'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ecbe7b'
      blue:    '#3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'
### Dracula ###
  Dracula: &Dracula
    primary:
      background: '#282a36'
      foreground: '#f8f8f2'
    cursor:
      text: CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground
    search:
      matches:
        foreground: '#44475a'
        background: '#50fa7b'
      focused_match:
        foreground: '#44475a'
        background: '#ffb86c'
      bar:
        background: '#282a36'
        foreground: '#f8f8f2'
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: '#44475a'
    normal:
      black:   '#000000'
      red:     '#ff5555'
      green:   '#50fa7b'
      yellow:  '#f1fa8c'
      blue:    '#bd93f9'
      magenta: '#ff79c6'
      cyan:    '#8be9fd'
      white:   '#bfbfbf'
    bright:
      black:   '#4d4d4d'
      red:     '#ff6e67'
      green:   '#5af78e'
      yellow:  '#f4f99d'
      blue:    '#caa9fa'
      magenta: '#ff92d0'
      cyan:    '#9aedfe'
      white:   '#e6e6e6'
    dim:
      black:   '#14151b'
      red:     '#ff2222'
      green:   '#1ef956'
      yellow:  '#ebf85b'
      blue:    '#4d5b86'
      magenta: '#ff46b0'
      cyan:    '#59dffc'
      white:   '#e6e6d1'
### Nord ###
  Nord: &Nord
    # Default colors
    primary:
      background: '#2E3440'
      foreground: '#D8DEE9'
    # Normal colors
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'
    # Bright colors
    bright:
      black:   '#4C566A'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#8FBCBB'
      white:   '#ECEFF4'
### Oceanic Next ###
  OceanicNext: &OceanicNext
    # Default colors
    primary:
      background: '#1b2b34'
      foreground: '#d8dee9'
    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1b2b34'
      cursor: '#ffffff'
    # Normal colors
    normal:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'
    # Bright colors
    bright:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'
### Palenight ###
  Palenight: &Palenight
    # Default colors
    primary:
      background: '#292d3e'
      foreground: '#d0d0d0'
    # Normal colors
    normal:
      black:   '#292d3e'
      red:     '#f07178'
      green:   '#c3e88d'
      yellow:  '#ffcb6b'
      blue:    '#82aaff'
      magenta: '#c792ea'
      cyan:    '#89ddff'
      white:   '#d0d0d0'
    # Bright colors
    bright:
      black:   '#434758'
      red:     '#ff8b92'
      green:   '#ddffa7'
      yellow:  '#ffe585'
      blue:    '#9cc4ff'
      magenta: '#e1acff'
      cyan:    '#a3f7ff'
      white:   '#ffffff'
### Solarized Dark ###
  SolarizedDark: &SolarizedDark
    # Default colors
    primary:
      background: '#002b36' # base03
      foreground: '#839496' # base0
    # Cursor colors
    cursor:
      text:   '#002b36' # base03
      cursor: '#839496' # base0
    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2
    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3
### Solarized Light ###
  SolarizedLight: &SolarizedLight
    # Default colors
    primary:
      background: '#fdf6e3' # base3
      foreground: '#657b83' # base00
    # Cursor colors
    cursor:
      text:   '#fdf6e3' # base3
      cursor: '#657b83' # base00
    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2
    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

## SET THEME: Choose ONE color scheme from those in the above list. ##
colors: *DoomOne
#colors: *Dracula
#colors: *Nord
#colors: *OceanicNext
#colors: *Palenight
#colors: *SolarizedLight
#colors: *SolarizedDark

window.opacity: 1.0 #picom sollte es machen, sodass ich hier nichts ändern muss
# window.opacity: 0.80
#+end_src

**** Key-Bindings

#+begin_src sh :tangle tangle/alacritty.yml
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,         mods: Control|Shift, action: Paste                       }
  - { key: C,         mods: Control|Shift, action: Copy                        }
  - { key: Insert,    mods: Shift,         action: PasteSelection              }
  - { key: Key0,      mods: Control,       action: ResetFontSize               }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: F11,       mods: None,          action: ToggleFullscreen            }
  - { key: Paste,     mods: None,          action: Paste                       }
  - { key: Copy,      mods: None,          action: Copy                        }
  - { key: L,         mods: Control,       action: ClearLogNotice              }
  - { key: L,         mods: Control,       chars: "\x0c"                       }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }
#+end_src

*** Fish

- Fish ist eine recht moderne Shell, mit einer eigenen Skriptsprache die etwas von der bash scripting language abweicht -> hat positives, aber da bash der Standard ist leider auch negatives -> Fish ist für Anfänger aber ziemlich geil und hat auch eingebaute Funktion -> ~builtin --names~ zeigt sie einem an -> auch Keybindings für die Funktionen innerhalb fish sind vorhanden und so kann man mit =Alt <-/->= zwischen den Pfaden die man besucht hat hin und her springen (keybindings zu den Funktionen =nextd= und =prevd=)!
- =count, math, random= sind ebenfalls nützliche eingebaute Funktionen
- =ALT w= ist auch cooles keybinding das einem sagt was es ist - teste den Befehl ls und dann ohne Enter =Alt w=

#+begin_src sh :tangle tangle/config.fish
### ADDING TO THE PATH
# First line removes the path; second line sets it.  Without the first line,
# your path gets massive and fish becomes very slow.
set -e fish_user_paths
set -U fish_user_paths $HOME/.local/bin $HOME/Applications $HOME/.config/emacs/bin $fish_user_paths

### EXPORT ###
set fish_greeting                                 # Supresses fish's intro message
set TERM "xterm-256color"                         # Sets the terminal type
set EDITOR "emacsclient -t -a ''"                 # $EDITOR use Emacs in terminal
set VISUAL "emacsclient -c -a emacs"              # $VISUAL use Emacs in GUI mode

### SET MANPAGER
### Uncomment only one of these!

### "bat" as manpager
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"

### "vim" as manpager
# set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpager
# set -x MANPAGER "nvim -c 'set ft=man' -"

### SET EITHER DEFAULT EMACS MODE OR VI MODE ###
function fish_user_key_bindings
  # fish_default_key_bindings
  fish_vi_key_bindings
end
### END OF VI MODE ###

### AUTOCOMPLETE AND HIGHLIGHT COLORS ###
set fish_color_normal brcyan
set fish_color_autosuggestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

### SPARK ###
set -g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usage help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum range value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum range value"

function spark -d "sparkline generator"
    if isatty
        switch "$argv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usage: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "ezamples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=length spark.fish | spark"
            case \*
                echo $argv | spark $argv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v argv="$argv" '
        BEGIN {
            min = match(argv, /--min=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
            max = match(argv, /--max=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
### END OF SPARK ###


### FUNCTIONS ###
# Spark functions
function letters
    cat $argv | awk -vFS='' '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' | sort | cut -c 3- | spark | lolcat
    printf  '%s\n' 'abcdefghijklmnopqrstuvwxyz'  ' ' | lolcat
end

function commits
    git log --author="$argv" --format=format:%ad --date=short | uniq -c | awk '{print $1}' | spark | lolcat
end

# Functions needed for !! and !$
function __history_previous_command
  switch (commandline -t)
  case "!"
    commandline -t $history[1]; commandline -f repaint
  case "*"
    commandline -i !
  end
end

function __history_previous_command_arguments
  switch (commandline -t)
  case "!"
    commandline -t ""
    commandline -f history-token-search-backward
  case "*"
    commandline -i '$'
  end
end
# The bindings for !! and !$
if [ $fish_key_bindings = "fish_vi_key_bindings" ];
  bind -Minsert ! __history_previous_command
  bind -Minsert '$' __history_previous_command_arguments
else
  bind ! __history_previous_command
  bind '$' __history_previous_command_arguments
end

# Function for creating a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --argument filename
    cp $filename $filename.bak
end

# Function for copying files and directories, even recursively.
# ex: copy DIRNAME LOCATIONS
# result: copies the directory and all of its contents.
function copy
    set count (count $argv | tr -d \n)
    if test "$count" = 2; and test -d "$argv[1]"
	set from (echo $argv[1] | trim-right /)
	set to (echo $argv[2])
        command cp -r $from $to
    else
        command cp $argv
    end
end

# Function for printing a column (splits input on whitespace)
# ex: echo 1 2 3 | coln 3
# output: 3
function coln
    while read -l input
        echo $input | awk '{print $'$argv[1]'}'
    end
end

# Function for printing a row
# ex: seq 3 | rown 3
# output: 3
function rown --argument index
    sed -n "$index p"
end

# Function for ignoring the first 'n' lines
# ex: seq 10 | skip 5
# results: prints everything but the first 5 lines
function skip --argument n
    tail +(math 1 + $n)
end

# Function for taking the first 'n' lines
# ex: seq 10 | take 5
# results: prints only the first 5 lines
function take --argument number
    head -$number
end

# Function for org-agenda
function org-search -d "send a search string to org-mode"
    set -l output (/usr/bin/emacsclient -a "" -e "(message \"%s\" (mapconcat #'substring-no-properties \
        (mapcar #'org-link-display-format \
        (org-ql-query \
        :select #'org-get-heading \
        :from  (org-agenda-files) \
        :where (org-ql--query-string-to-sexp \"$argv\"))) \
        \"
    \"))")
    printf $output
end

### END OF FUNCTIONS ###


### ALIASES ###
# \x1b[2J   <- clears tty
# \x1b[1;1H <- goes to (1, 1) (start)
alias clear='echo -en "\x1b[2J\x1b[1;1H" ; echo; echo; seq 1 (tput cols) | sort -R | spark | lolcat; echo; echo'

# root privileges
alias doas="doas --"

# navigation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Sleeptimer
alias sleep='python /home/flowmis/speicher-haupt/skripte-programme-configs/skripte/sleeptimer.py '

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'

# vim and emacs
alias vim='nvim'

# Changing "ls" to "eza"
alias ls='eza -al --color=always --group-directories-first' # my preferred listing
alias la='eza -a --color=always --group-directories-first'  # all files and dirs
alias ll='eza -l --color=always --group-directories-first'  # long format
alias lt='eza -aT --color=always --group-directories-first' # tree listing
alias l.='eza -a | egrep "^\."'

# activate/mount VM shared Folder
alias share='sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/'

# pacman and yay
alias pu='sudo pacman -Syyu'                  # update only standard pkgs
alias pi='sudo pacman -S'
alias ps='sudo pacman -Ss'
alias pd='sudo pacman -R'
alias yu='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yua='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias pc='sudo pacman -Rns (pacman -Qtdq)' # remove orphaned packages

# Backup dry run
alias bun='rsync -aurvn --delete --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'
# Backup ohne löschen nur mit updaten und kopieren
alias bus='rsync -aurv --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'
# Backup mit löschen wenn etwas gelöscht wurde - gefährlichstes aber sinnvollstes backup
alias bud='rsync -aurv --delete --progress /home/flowmis/cloud/life/ /run/media/flowmis/home-and-work/backup/life/'

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# Play video files in current dir by type
alias playavi='vlc *.avi'
alias playmov='vlc *.mov'
alias playmp4='vlc *.mp4'

# youtube-dl
alias yta-aac="youtube-dl --extract-audio --audio-format aac "
alias yta-best="youtube-dl --extract-audio --audio-format best "
alias yta-flac="youtube-dl --extract-audio --audio-format flac "
alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
alias yta-opus="youtube-dl --extract-audio --audio-format opus "
alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
alias yta-wav="youtube-dl --extract-audio --audio-format wav "
alias ytv-best="youtube-dl -f bestvideo+bestaudio "

alias doomsync="~/.emacs.d/bin/doom sync"
alias doomdoctor="~/.emacs.d/bin/doom doctor"
alias doomupgrade="~/.emacs.d/bin/doom upgrade"
alias doompurge="~/.emacs.d/bin/doom purge"
alias doombuild="~/.emacs.d/bin/doom build"
### SETTING THE STARSHIP PROMPT ###
starship init fish | source
#+end_src

*** Eshell

#+begin_src sh :tangle tangle/eshell/aliases
# Aliases for emacs commands
alias ff find-file $1

# Changing "ls" to "eza"
alias ls eza -al --color=always --group-directories-first $*  # my preferred listing
alias la eza -a --color=always --group-directories-first $*   # all files and dirs
alias ll eza -l --color=always --group-directories-first $*   # long format
alias lt eza -aT --color=always --group-directories-first $*  # tree listing
alias l. eza -a1 $* | grep "^\."                              # list hidden files

# Merge Xresources
alias merge xrdb -merge ~/.Xresources

# Aliases for doom emacs utilties
alias doomsync ~/.emacs.d/bin/doom sync
alias doomdoctor ~/.emacs.d/bin/doom doctor
alias doomupgrade ~/.emacs.d/bin/doom upgrade
alias doompurge ~/.emacs.d/bin/doom purge
alias doombuild ~/.emacs.d/bin/doom build

# Confirm before overwriting something
alias cp cp -i $1
alias mv mv -i $1
alias rm rm -i $1

# activate/mount VM shared Folder
alias share sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/

# Pacman
alias pi sudo pacman -S
alias pu sudo pacman -Syyu
alias ps sudo pacman -Ss
alias pd sudo pacman -R
alias pc sudo pacman -Rns (pacman -Qtdq)    # remove orphaned packages
alias yu yay -Sua --noconfirm               # update only AUR pkgs (yay)
alias yua yay -Syu --noconfirm              # update standard pkgs and AUR pkgs (yay)
#+end_src
