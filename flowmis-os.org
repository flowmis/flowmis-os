:Einstellungen:
#+TITLE: flowmis-os
#+begin_src shell
# mkdir ~/.config/emacs/ ~/.config/emacs/themes/ ~/.config/emacs/eshell/ ~/.config/emacs/scripts/ ~/.config/zathura/ ~/.config/picom/
cp -u ~/flowmis-os/config.org ~/.config/emacs/config.org && cp -u ~/flowmis-os/tangle/early-init.el ~/.config/emacs/early-init.el && cp -u ~/flowmis-os/tangle/init.el ~/.config/emacs/init.el && cp -u ~/flowmis-os/tangle/start.org ~/.config/emacs/start.org && cp -R ~/flowmis-os/tangle/themes/ ~/.config/emacs/ && cp -R ~/flowmis-os/tangle/eshell/ ~/.config/emacs/ && echo '###########################Emacs ready###########################'
# cp -R ~/flowmis-os/tangle/scripts/ ~/.config/emacs/ 
# cp -u ~/flowmis-os/tangle/config.py ~/.config/qtile/config.py && echo '###########################Qtile ready###########################'
# cp -u ~/flowmis-os/tangle/.xprofile ~/.xprofile
# cp -u ~/flowmis-os/tangle/.bashrc ~/.bashrc
# cp -u ~/flowmis-os/tangle/alacritty.toml ~/.config/alacritty/alacritty.toml
# cp -u ~/flowmis-os/tangle/config.fish ~/.config/fish/config.fish
# cp -u ~/flowmis-os/tangle/.gitconfig ~/.gitconfig
# sudo cp /etc/xdg/picom.conf /home/flowmis/.config/picom/picom.conf
# cp -u ~/flowmis-os/tangle/zathurarc ~/.config/zathura/zathurarc
echo done
#+end_src

#+RESULTS:
| ###########################Emacs | ready########################### |
| done                             |                                  |

#+STARTUP: folded hideblocks shrink
:END:
* Installation flowmis-os on Windows mit wsl
https://www.youtube.com/watch?v=h0Wg_aknGdc
* Installation

- [ ] Booted man auf den Stick wird man in eine virtuelle Konsole (handelt sich um eine Zsh Shell) als root eingeloggt, von der aus man die gewünschte Installation durchführen kann. Theoretisch kann man ein Autoinstallationsskript in die ISO mit einbauen und dann über die Zsh ausführen
- _Problemlösung:_
  - [[https://wiki.archlinux.org/title/Installation_guide][Arch InstallGuide]] bei Fragen/Problemen
  - Wenn ich feststecke kann ich mit <C-M-F2> in die tty wechseln und mit root und cli Einstellungen rückgängig machen -> C=Strg, M=Alt, F2 muss eventuell mit Fn zusammen gedrückt werden!
  - Etwas vergessen: kann nach der Installation erneut auf Bootstick booten und von diesem die Linux-Filesystem partition mounten und mit arch-chroot auf diese gehen und Dinge installieren (im root Modus und mit hoffentlich funktionierendem Internet)

** Installationsdateien

- Locales:

#+begin_src shell :tangle tangle/locale.conf
LANG=de_DE.UTF-8
LC_CTYPE=de_DE.UTF-8
#+end_src

- Localhost und die localdomain festlegen:

#+begin_src shell :tangle tangle/hosts
# Static table lookup for hostnames.
# See hosts(5) for detailsh
127.0.0.1    localhost
::1          localhost
127.0.1.1    FlowmisPC.localdomain    FlowmisPC
#+end_src

** Installation
1. Arch iso downloaden:
   - Check ob Datei original und unverändert ist:
      #+begin_src shell
   gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig     # Befehl PGP check
   pacman-key -v archlinux-version-x86_64.iso.sig                                          # Alternativer Befehl von ArchSystem aus
      #+end_src
2. _Falls VM:_ ISO in die VM laden + Speicher, CPU, RAM, GPU etc. der virtuellen Maschine zuweisen und mit funktionsfähigem Internet (auf dem Hostsystem) die VM booten
   - Standardmäßig Skript install-vm verwenden. Falls ich Installation in VM lieber step by step (wie bei Hardware machen will) um alles selbst zu konfigurieren, muss ich das untere Skript install-hardware-modified verwenden.
   - Zusätzliche Infos für Copy-Paste und geteilten Ordner hier: [[~/flowmis-os/flowmis-os.org::VirtualBox][VirtualBox]]
    #+begin_src shell :tangle tangle/install-vm-mit-skript.sh
   # 1. ~python -m archinstall~
   #    Einstellungen:
   #    - Sprache auf de & locale-lang auf de.DE
   #    - Grub als Bootloader wählen
   #    - Root Passwort vergeben + Account/User mit Passwort erstellen
   #    - Profil auf xorg ändern
   #    - Dem Gerät entsprechende Grafiktreiber wählen
   #    - pulseaudio wählen
   #    - NetworkManager wählen
   #    - Timezone auf Europe-Berlin
   #    - Zusatzpakete angeben: git sudo networkmanager
   #    - Festplatte wählen, alles wipen + ext4 filesystem konfigurieren
   #    - Installation starten
   # 2. shutdown, iso/installationsmedium entfernen, boot & login -> Internet sollte gehen und arch-minimal ist fertig installiert!
   # 3. Falls kein Internet - mit nmcli im Wlan anmelden
   # 4. VM konfigurieren:
   # - sudo pacman -S virtualbox-guest-utils openssh
   # - sudo VBoxClient-all
   # - In VirtualBox Einstellungen der jeweiligen VM  -> Allgemein -> Erweitert -> Gemeinsame Zwischenablage & Drag'n'Drop auf bidirektional stellen
   # - In VirtualBox Einstellungen der jeweiligen VM  -> Allgemein -> Gemeinsame Ordner -> "Hinzufügen" drücken unter: Ordner der virtuellen Maschine -> Pfad Ordnername etc beispielsweise wie folgt angeben (Ordner sollte vorab auf beiden Systemen erstellt werden): <C:\Users\manem\Desktop\share -- share -- automatisch einbinden -- Einbindungspunkt leer lassen>
   # - Ordner einhängen und checken ob es geht: sudo mount -t vboxsf share /home/flowmis/share
   # - fstab um folgende Linie ergänzen dass geteilter Ordner automatisch eingehängt wird:
       # cloud						/home/flowmis/cloud	vboxsf		defaults 	0 0
   # - .ssh nach ~ kopieren + cd in .ssh und chmod 0700 id_rsa sodass anschließend mit git clone git@github.com:flowmis/flowmis-os.git mein Repo geklont werden kann
   # 5. Dieses Skript ausführen + rebooten + Qtile statt Wayland wählen und anmelden - fertig ist flowmis-os-minimal und weitere Module direkt aus Emacs installieren:
   mkdir -p ~/.config/{alacritty,fish,picom} && echo 'Ordner erstellt'
   sudo cp -r ~/flowmis-os/tangle/70-synaptics.conf /etc/X11/xorg.conf.d/70-synaptics.conf && echo '###########################Touchpad sollte funktionieren###########################'
   cp -r ~/flowmis-os/tangle/alacritty.yml ~/.config/alacritty/alacritty.yml && cp -r ~/flowmis-os/tangle/config.fish ~/.config/fish/config.fish && echo '###########################Terminals ready###########################'
   # cp -r ~/flowmis-os/tangle/.xprofile ~/.xprofile
   cp -r ~/flowmis-os/tangle/.bashrc ~/.bashrc && cp -r ~/flowmis-os/tangle/.gitconfig ~/.gitconfig && cp -r ~/flowmis-os/tangle/picom.conf ~/.config/picom/picom.conf && echo '###########################Starteinstellungen vorhanden###########################'
   sudo pacman -Syu && sudo pacman -S qtile picom fish eza starship alacritty pcmanfm nitrogen sddm emacs-nativecomp neovim fd ripgrep gnupg gpa keepassxc && echo 'Packete updated and installed'
   # eza: Der Befehl ls gibt schönerer/funktionalere Darstellung aus -> meine aliase ändern machen dass ich ls weiterhin verwenden kann und nicht eza schreiben muss
   # starship: Shell wird übersichtlicher: < und > statt sinnloser Angabe vom Standardpfad
   # base-devel: ermöglicht <makepkg -si> um aus Binaries ein Paket zu machen das im Anschluss installiert werden kann
   # ripgrep: für Doom Emacs (ebenso wie gnu find und fd (sollten jedoch bereits installiert sein - siehe auch github von doom emacs)
   sudo systemctl enable sddm
   #+end_src
    #+begin_src shell :tangle tangle/install-hardware.sh
   ###Achtung: Auf Hardware machen mehrere Partitionen Sinn
   # fdisk -l                                                                    # Alternativ: <lsblk>
   # fdisk /dev/sda                                                              # mit fdisk in Partition gehen -> Partitionen löschen <d>/neue erstellen <n> -> <m> mögliche Befehle zeigen
   # <g><n><1><Enter><+550M>                                                     # EFI Partition erstellen: <g> kreiert Label - GPT disk label (Achtung falls MBR verwendet wurde) <n> neue Partition mit Nummer <1>  und first sector default <Enter> und second sector 550MiB <+550M>
   # <n><2><Enter><+2G>                                                          # Swap Partition mit Nummer 2 und mindesten 1GiB (oder wie hier 2GiB) erstellen
   # <n><3><Enter><Enter>                                                        # Linux Filesystem Partition mit restlichem Speicher erstellen
   # <t><1><L><1>                                                                # Partition 1 zu EFI ändern (<L> zeigt mögliche Partitionstypen und <1>=EFI)
   # <t><2><19>                                                                  # Partition 2 zu Swap ändern -> Partition 3 muss man nicht ändern da Standard Linux Filesystem passt
   # <w>                                                                         # write changes und fdisk verlassen
   # mkfs.fat -F32 /dev/sda1
   # mkswap /dev/sda2
   # swapon /dev/sda2
   # mkfs.ext4 /dev/sda3
   # mount /dev/sda3 /mnt
   ###Einfache Variante ohne mehrere Partitionen
   # fdisk /dev/sda + <n> + <p> + <Enter> + <Enter> + <Enter> <w>
   # fdisk -l                                                                  # check Partionen -> Alternativ: lsblk
   # mkfs.ext4 /dev/sda1
   ##System einrichten
   # mount /dev/sda1 /mnt
   # pacstrap /mnt base linux linux-firmware                                   # Installiert die grundlegendsten Komponenten die man benötigt um mit dem Linux Kernel arbeiten zu können
   # genfstab -U /mnt >> /mnt/etc/fstab                                        # generiert FileSystemTable
   # arch-chroot /mnt                                                          # Mit root in /mnt gehen
   # pacman -S neovim sudo git
   # passwd
   # useradd -m flowmis
   # passwd flowmis
   # usermod -aG wheel,audio,video,optical,storage flowmis                     # Erteilen der Rechte bzw. in welcher Gruppe der User ist
   # pacman -S grub efibootmgr dosfstools os-prober mtools networkmanager sddm
   # cd /home/flowmis/ && git clone https://github.com/flowmis/flowmis-os.git
   # . /home/flowmis/flowmis-os/tangle/install-hardware-modified.sh
   cd /home/flowmis/ && chown flowmis flowmis-os/ && chgrp flowmis flowmis-os/   # Mit root geclonte Repo auf richtigen Nutzer mit richtigen Rechten geändert
   ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime                     # Link zur Zeitzone um richtige Uhrzeit etc. zu hinterlegen. Manche Programme funktionieren ohne richtige locales nicht
   hwclock --systohc                                                           # setzt Zeit
   mv /home/flowmis/flowmis-os/tangle/locale.conf /etc/locale.conf              # verschiebt vorab erstellte Datei
   sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen           # sucht einen String und ersetzt ihn
   locale-gen                                                                  # generiert die locales
   echo FlowmisPC | cat > /etc/hostname                                        # schreibt neue Datei an gewünschten Ort mit gewünschtem Inhalt
   mv /home/flowmis/flowmis-os/tangle/hosts /etc/hosts                          # verschiebt vorab erstellte Datei
   ##Grafiktreiber wählen - bei 2 sollte man nur die Treiber der guten Grafikkarte installieren
   pacman -S xf86-video-fbdev                                                # Grafiktreiber VM
   ##Sonstiges
   # mkdir /boot/EFI                                                           # Erstellung des Bootdirectories
   # mount /dev/sda boot/EFI                                                   # was ist die EFI ppartition in der VM - habe ich ja nicht angelegt???
   # grub-install                                                              # Eventuell muss Pfad mit angegeben werden: grub-install /dev/sda
   # grub-mkconfig -o /boot/grub/grub.cfg                                      # Ohne diese wird es zu Problemen beim booten kommen
   # EDITOR=nvim visudo                                                        # uncomment #%wheel ALL=(ALL) ALL
   # systemctl enable NetworkManager
   # systemctl enable sddm
   # exit
   # umount -l /mnt
   # reboot & login
   # sudo NetworkManager                                                       # keine Fehlermeldung = past alles
   # sudo nmcli device wifi list                                               # nmcli wird mit NetworkManager installiert und zeigt vorhandene Wlan Netzwerke an
   # sudo nmcli device wifi connect "Name Wlan" password "Passwort Wlan"       # Verbindet mit Wlan (https://wiki.archlinux.org/title/NetworkManager)
   ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime                     # Link zur Zeitzone um richtige Uhrzeit etc. zu hinterlegen. Manche Programme funktionieren ohne richtige locales nicht
   hwclock --systohc                                                           # setzt Zeit
   mv /home/flowmis/flowmis-os/tangle/locale.conf /etc/locale.conf              # verschiebt vorab erstellte Datei
   sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen           # sucht einen String und ersetzt ihn
   locale-gen                                                                  # generiert die locales
   echo FlowmisPC | cat > /etc/hostname                                        # schreibt neue Datei an gewünschten Ort mit gewünschtem Inhalt
   mv /home/flowmis/flowmis-os/tangle/hosts /etc/hosts                          # verschiebt vorab erstellte Datei
   # localectl --no-convert set-keymap de-latin1-nodeadkeys && localectl --no-convert set-x11-keymap de pc105 deadgraveacute && localectl status
   # setxkbmap -layout de                                                      # Tastaturlayout auf Deutsch
   # timedatectl set-ntp true && timedatectl status                            # Zeit und Datum über das network transfer protocol einholen
   #+end_src
3. _Falls Hardware:_ Bootstick erstellen (Achtung Bootstick der mir balena etcher erstellt wurde macht Probleme -> Mit Rufus erstellen und bei Partitionsschema GPT statt MBR wählen um mit grub-install bei manueller Installation keine Probleme zu bekommen weil falsches Partitionsschema vorliegt). BIOS Bootreihenfolge ändern, UEFI auswählen (nicht CMS) und secureboot disablen -> Booten
   - checken ob Installationsmedium richtig funktioniert
        ~ls /sys/firmware/efi/efivars~                               # kein Error = System hat in UEFI mode gebooted. Error (dir existiert nicht) = System im BIOS (or CSM) mode?
   - Internet über Lankabel oder iwctl aktivieren und checken ob es geht
        ~ip link~                                                    # Zeigt einem an ob Netzwerkkarte/Hardware gefunden wird und mit welchem Namen weitergemacht werden kann - oft wlan0 (Achtung dass rfkill die Karte nicht blockiert)
        ~iwctl~                                                      # Einloggen Wlan (Ethernet eigentlich zu bevorzugen) -> siehe auch https://wiki.archlinux.org/title/Iwd#iwctl
        ~device list~                                                # zeigt Netzwerkkarten -> ist hier nichts gelistet dann fucked
        ~station "" scan~                                            # "" durch Wlan Karte ersetzen (meist wlan0) -> scant nach vorhandenen Wlans die durch Wlan Karte gefunden werden
        ~station "" get-networks~                                    # Listet gefundene Wlan Netzwerke auf
        ~station "" connect "Name Wlan"~                             # Verbindung zu Wlan herstellen
        ~exit~                                                       # Verlassen von iwctl
        ~ping google.de~                                             # Internet check
   - Keyboardlayout wählen
        ~ls /usr/share/kbd/keymaps/**/*.map.gz~                      # Läd alle vorhandenen Tastaturlayouts
        ~loadkeys de-latin1~                                         # Standard Tastaturlayout auf Deutsch (nur für Installationsprozess)

* Module installieren & konfigurieren

src-blocks mit sudo Befehlen auszuführen:

    1) einzelne Befehle indem man eine Variable mitgibt
    #+begin_src sh :var Passw=(read-passwd "112123")
    echo ${Passw} | sudo pacman -Syu & echo 'Packete updated'
    #+end_src

    2) /sudo:: als dir angeben wie ich es im folgenden tue
    #+begin_src sh :dir /sudo::
    sudo pacman -S qtile fish alacritty pcmanfm sddm emacs-nativecomp neovim fd ripgrep
    #+end_src

** Yay + Yay Packages

In Terminal/Eshell ausführen (Befehl um es an Eshell repl zu senden?) da Emacs zwischendrin sudo legitmation braucht und auf Fragen geantwortet werden was Probleme verursacht wenn man mit org-src block nicht interaktiv agieren kann

#+begin_src sh
sudo pacman -S base-devel
cd ~ && git clone https://aur.archlinux.org/yay-git.git && cd ~/yay-git/ && makepkg -si && cd ~ && rm -rf ~/yay-git/ && yay -Syu && yay -S archlinux-tweak-tool-git termite otf-alegreya-sans onlyoffice mu && echo '###########################installed yay###########################'
#+end_src

** Brave

In Terminal/Eshell ausführen (Befehl um es an Eshell repl zu senden?) da Emacs zwischendrin sudo legitmation braucht und auf Fragen geantwortet werden was Probleme verursacht wenn man mit org-src block nicht interaktiv agieren kann

#+begin_src sh
cd ~ && git clone https://aur.archlinux.org/brave-bin.git && cd ~/brave-bin/ && makepkg -si && cd ~ && rm -rf ~/brave-bin/ && echo '###########################installed brave###########################'
#+end_src

** Qtile
#+begin_src sh  :dir /sudo::
sudo pacman -S python-iwlib python-dbus-next qt5ct mypy && echo 'Pyhton Zeug installiert'
sudo pacman -S python-utils && qtile check && echo 'Qtile dependencies installiert'
#+end_src

- https://docs.qtile.org
- Muss Python installiert sein und gibt es weitere Dependencies dass dieser WM läd und richtig funktioniert?
- Wenn eigene Config probleme macht fällt es normal auf default config zurück -> sollte es sich aufhängen lohnt sich <Strg Alt F2> um ins Terminal zu kommen und von dort aus kann man eigene config löschen, sodass die Standard config dort beim nächsten Boot erscheint und an dieser kann man dann weiterarbeiten.
  | Keybinding in Standard Config | Beschreibung                                         |
  |-------------------------------+------------------------------------------------------|
  | M Strg q                      | beendet qtile und man muss sich neu anmelden         |
  | M Strg e(oder r?)             | refresh qtile (Änderungen an config werden sichtbar) |
  | M r                           | spawn prompt -> öffnen von Programmen                |
  | M Space                       | öffnet Terminal                                      |

*** Qtile config

#+begin_src python :tangle tangle/config.py
from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

mod = "mod4"
terminal = guess_terminal()

##################################################################################### Farben

colors = [["#FBF1C7", "#FBF1C7"],   #0
          ["#F2E5BC", "#F2E5BC"],   #1
          ["#00606B", "#00606B"],   #2
          ["#613E53", "#613E53"],   #3
          ["#C27DA7", "#C27DA7"],   #4
          ["#00606B", "#00606B"],   #5
          ["#613E53", "#613E53"],   #6
          ["#C275A7", "#C275A7"],   #7
          ["#D65D0E", "#D65D0E"],   #8
          ["#9D0006", "#9D0006"],   #9
          ["#000000", "#000000"],   #10
          ["#FFFFFF", "#FFFFFF"],   #11
          ["#7F001E", "#7F001E"],   #12
          ["#F0F0F0", "#F0F0F0"],   #13
          ["#EBDBB2", "#EBDBB2"],   #14
          ["#D5C4A1", "#D5C4A1"],   #15
          ["#BDAE93", "#BDAE93"],   #16
          ["#A89584", "#A89584"],   #17
          ["#504945", "#504945"],   #18
          ["#3C3836", "#3C3836"],   #19
          ["#282828", "#282828"],   #20
          ["#1D2021", "#1D2021"],   #21
          ["#B16286", "#B16286"]]   #22

##################################################################################### Keybindings
floating_window_index = 0

def float_cycle(qtile, forward: bool):
    global floating_window_index
    floating_windows = []
    for window in qtile.current_group.windows:
        if window.floating:
            floating_windows.append(window)
    if not floating_windows:
        return
    floating_window_index = min(floating_window_index, len(floating_windows) -1)
    if forward:
        floating_window_index += 1
    else:
        floating_window_index += 1
    if floating_window_index >= len(floating_windows):
        floating_window_index = 0
    if floating_window_index < 0:
        floating_window_index = len(floating_windows) - 1
    win = floating_windows[floating_window_index]
    win.cmd_bring_to_front()
    win.cmd_focus()
@lazy.function
def float_cycle_backward(qtile):
    float_cycle(qtile, False)
@lazy.function
def float_cycle_forward(qtile):
    float_cycle(qtile, True)

keys = [
    ### Fenster bewegen und layout wählen
    Key([mod], "period", float_cycle_forward, desc='FloatingWindow vor/hinter ein anderes bringen'),
    Key([mod], "comma", float_cycle_backward, desc='FloatingWindow vor/hinter ein anderes bringen'),
    Key([mod], "o", lazy.spawn('emacsclient -cF "((visibility . nil))" -e "(emacs-run-launcher)"'), desc="Emacs as run launcher"),
    Key([mod], "c", lazy.window.kill(), desc="Kill focused window"),
    Key([mod], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "Return", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Wechsel zwischen solit und full stack"), #Vergößerung/Verkleinerung einers Fensters im Stack (wenn dieses gesplitet ist)
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "shift"], "space", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    ### Programme starten
    Key([], "print", lazy.spawn('flameshot gui'), desc='Screenshot2'),
    Key([mod], "w", lazy.spawn('nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'), desc="Wallpaperwechsel"),
    Key([mod], "e", lazy.spawn('emacsclient -c'), desc='EMACS'),    #'emacs  ~/cloud/life/raum/.org/home.org' wenn man bestimmte Datei beim Start öffnen will
    Key([mod], "space", lazy.spawn('emacsclient -c --eval "(eshell)"'), desc="Launch Eshell"),
    Key([mod, "shift"], "space", lazy.spawn('emacsclient -ce "(shell)"'), desc='shell in neuem Frame'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
    Key([mod, "control"], "space", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "p", lazy.spawn('keepassxc /home/flowmis/cloud/life/energie/self-sovereignity/privacy-security/passwörter/hotpassw.kdbx'), desc='Passwortmanager'),    #'emacs ~/cloud/life/raum/home.org' wenn man bestimmte Datei beim Start öffnen will
    Key([mod], "s", lazy.spawn('spotify-launcher'), desc="Spotify"),
    Key([mod], "d", lazy.spawn('pcmanfm'), desc='Explorer'),
    Key([mod], "b", lazy.spawn("brave"), desc='Bravebrowser'),
    Key([mod, "control"], "g", lazy.spawn("brave --app=https://chat.openai.com/"), desc='BraveApp-GPT'),
    Key([mod, "control"], "1", lazy.spawn("brave --app=https://mbox1.belwue.de/"), desc='MailSeminarStuttgart'),
    Key([mod, "control"], "2", lazy.spawn("brave --app=https://bap.navigator.web.de/"), desc='MailWeb'),
    Key([mod], "n", lazy.spawn('emacsclient -ne "(+org-capture/open-frame)"'), desc='Capture Templates'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
]

##################################################################################### Desktop-Einstellungen
groups = [Group(i) for i in "123"]

for i in groups:
    keys.extend(
        [
            # mod + Zahl -> wechselt den "Desktop"
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod + shift + Zahl -> verschiebt aktives Fenster auf anderen "Desktop"
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    layout.Columns(border_focus=colors[2], border_width = 3, margin = 8),
    layout.Max(border_focus=colors[2], border_width = 3, margin = 8),
    # layout.Stack(num_stacks=2),
    layout.Bsp(border_focus=colors[2], border_width = 3, margin = 8),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    layout.TreeTab(border_focus=colors[2], border_width = 3),
    # layout.VerticalTile(),
    # layout.Zoomy(),
    # layout.Floating()
]

widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize=13,
    padding=6,
    background=colors[20],
    foreground = colors[1],
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.CurrentLayoutIcon(padding = 1),
                widget.TextBox(text = '|', padding = 10),
                widget.WindowCount(),
                widget.TextBox(text = '|', padding = 10),
                widget.Clock(format = "%A, %B %d - %H:%M ", padding = 10),
                widget.GroupBox(
                    active = colors[2],
                    inactive = colors[6],
                    highlight_color = colors[1],
                    highlight_method = "line",
                    this_current_screen_border = colors[6],
                    this_screen_border = colors [4],
                    other_current_screen_border = colors[6],
                    other_screen_border = colors[4],
                    foreground = colors[6],
                    background = colors[10]),
                widget.Prompt(),
                widget.WindowName(),
                widget.Net(),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.QuickExit(default_text = '⏻'),
            ],
            24,
            border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        ,*layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

floating_layout = layout.Floating(
    border_focus=colors[2],  # Hier die gewünschte Rahm(en)farbe angeben
    border_width = 4,  # Hier die gewünschte Rahm(en)farbe angeben
    float_rules=[*layout.Floating.default_float_rules, Match(title='emacs-run-launcher'), Match(title='Confirmation'), Match(title='Alacritty'), Match(title='Keepassxc'),
                 ]
)


# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

_OLD-Version - vll ist hiervon mal noch was zu gebrauchen:_
#+begin_src python Alte Version
# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List

###Start Verbesserung Floating Windows###
floating_window_index = 0

def float_cycle(qtile, forward: bool):
    global floating_window_index
    floating_windows = []
    for window in qtile.current_group.windows:
        if window.floating:
            floating_windows.append(window)
    if not floating_windows:
        return
    floating_window_index = min(floating_window_index, len(floating_windows) -1)
    if forward:
        floating_window_index += 1
    else:
        floating_window_index += 1
    if floating_window_index >= len(floating_windows):
        floating_window_index = 0
    if floating_window_index < 0:
        floating_window_index = len(floating_windows) - 1
    win = floating_windows[floating_window_index]
    win.cmd_bring_to_front()
    win.cmd_focus()

@lazy.function
def float_cycle_backward(qtile):
    float_cycle(qtile, False)

@lazy.function
def float_cycle_forward(qtile):
    float_cycle(qtile, True)
###Ende Verbesserung Floating Windows (2 Keybindings mit den hier definierten Funktionen machen es dann anwendbar!)###

mod = "mod4"
keys = [ Key([mod], "Return", lazy.spawn("alacritty"), desc='Launches My Terminal'),
        #weiss nicht weshalb aber macht irgendwie dass ich mit doppel Fn Taste den App Launcher starten kann
         # Key([], "XF86AudioRaiseVolume", lazy.spawn('pamixer -i 2'), desc='lauter'),
         Key([mod], "period", float_cycle_forward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         Key([mod], "comma", float_cycle_backward, desc='FloatingWindow vor/hinter ein anderes bringen'),
         # Key([], "XF86AudioLowerVolume", lazy.spawn('pamixer -d 2'), desc='leiser'),
         # Key([], "XF86AudioMute", lazy.spawn('pamixer -t'), desc='leiser'),
         # Key([], "XF86MonBrightnessUp", lazy.spawn('brightnessctl s 5%+'), desc='heller'),
         # Key([], "XF86MonBrightnessDown", lazy.spawn('brightnessctl s 5%-'), desc='dunkler'),
         # Key([], "XF86Cut", lazy.spawn('simplescreenrecorder'), desc='Screenrecord1'),
         # Key([], "F7", lazy.spawn('deepin-screen-recorder'), desc='Screenrecord2'),
         # Key([], "Print", lazy.spawn('gnome-screenshot -i'), desc='Screenshot1'),
         Key([], "print", lazy.spawn('flameshot gui'), desc='Screenshot2'),
         Key([mod], "e", lazy.spawn('emacs'), desc='EMACS'),    #'emacs  ~/cloud/life/raum/.org/home.org' wenn man bestimmte Datei beim Start öffnen will
         Key([mod], "p", lazy.spawn('keepassxc /home/flowmis/cloud/life/energie/self-sovereignity/privacy-security/passwörter/hotpassw.kdbx'), desc='Passwortmanager'),    #'emacs ~/cloud/life/raum/home.org' wenn man bestimmte Datei beim Start öffnen will
         Key([mod], "w", lazy.spawn('nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'), desc="Wallpaperwechsel"),
         Key([mod], "s", lazy.spawn('spotify-launcher'), desc="Spotify"),
         Key([mod], "t", lazy.spawn('emacsclient -ce "(shell)"'), desc='eshell in neuem Frame'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
         Key([mod], "d", lazy.spawn('pcmanfm'), desc='Explorer'),
         Key([mod], "b", lazy.spawn("brave"), desc='Bravebrowser'),
         Key([mod], "m", lazy.spawn("brave --app=https://chat.openai.com/"), desc='BraveApp-GPT'),
         Key([mod], "n", lazy.spawn('emacsclient -ne "(+org-capture/open-frame)"'), desc='Capture Templates'), #erlaubt mir mit Shortcut schnell Einträge in Einkaufsliste etc. zu machen durch capture templates
         Key([mod], "Tab", lazy.next_layout(), desc='Toggle through layouts'),
         Key([mod], "c", lazy.window.kill(), desc='Kill active window'),
         Key([mod], "r", lazy.restart(), desc='Restart Qtile'),
         Key([mod], "q", lazy.shutdown(), desc='Shutdown Qtile'),
         ### Treetab controls
         Key([mod, "shift"], "h", lazy.layout.move_left(), desc='Move up a section in treetab'),
         Key([mod, "shift"], "l", lazy.layout.move_right(), desc='Move down a section in treetab'),
         ### Window controls
         Key([mod], "Down", lazy.layout.shuffle_down(), lazy.layout.section_down(), desc='Move windows down in current stack'),
         Key([mod], "Up", lazy.layout.shuffle_up(), lazy.layout.section_up(), desc='Move windows up in current stack'),
         Key([mod], "Left", lazy.layout.shrink(), lazy.layout.decrease_nmaster(), desc='Shrink window (MonadTall), decrease number in master pane (Tile)'),
         Key([mod], "Right", lazy.layout.grow(), lazy.layout.increase_nmaster(), desc='Expand window (MonadTall), increase number in master pane (Tile)'),
         Key([mod], "f", lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
         ### Stack controls
         Key([mod], "space", lazy.layout.next(), desc='Switch window focus to other pane(s) of stack'),
         Key([mod, "shift"], "space", lazy.layout.toggle_split(), desc='Toggle between split and unsplit sides of stack'),
        ]

groups = [Group("-1-", layout='monadtall'),
          Group("-2-", layout='monadtall'),
          Group("-3-", layout='monadwide'),
          Group("-4-", layout='monadwide'),
          Group("-5-", layout='zoomy'),
          Group("-6-", layout='floating')]
# Allow MODKEY+[0 through 9] to bind to groups, see https://docs.qtile.org/en/stable/manual/config/groups.html
# MOD4 + index Number : Switch to Group[index]
# MOD4 + shift + index Number : Send active window to another Group
from libqtile.dgroups import simple_key_binder
dgroups_key_binder = simple_key_binder("mod4")

layout_theme = {"border_width": 2, "margin": 8, "border_focus": "000000", "border_normal": "1D2330"}
layouts = [
    #layout.Bsp(**layout_theme),
    #layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    #layout.VerticalTile(**layout_theme),
    #layout.Matrix(**layout_theme),
    #layout.Max(**layout_theme),
    #layout.Stack(num_stacks=2),
    #layout.RatioTile(**layout_theme),
    #layout.Tile(shift_windows = True, border_width = 1, margin = 4,
    #    border_focus = 'e1acff', border_normal = '1D2330'),
    #layout.Tile(shift_windows=True, **layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Zoomy(**layout_theme),
    layout.Floating(**layout_theme)
    #layout.TreeTab(
    #    font = "Ubuntu",
    #    fontsize = 10,
    #    sections = ["--1--", "--2--", "--3--", "--4--"],
    #    section_fontsize = 10,
    #    border_width = 2,
    #    bg_color = "1c1f24",
    #    active_bg = "c678dd",
    #    active_fg = "000000",
    #    inactive_bg = "a9a1e1",
    #    inactive_fg = "1c1f24",
    #    padding_left = 0,
    #    padding_x = 0,
    #    padding_y = 5,
    #    section_top = 10,
    #    section_bottom = 20,
    #    level_shift = 8,
    #    vspace = 3,
    #    panel_width = 200
    #),
]

colors = [["#282c34", "#282c34"],
          ["#1c1f24", "#1c1f24"],
          ["#dfdfdf", "#dfdfdf"],
          ["#ff6c6b", "#ff6c6b"],
          ["#98be65", "#98be65"],
          ["#da8548", "#da8548"],
          ["#51afef", "#51afef"],
          ["#c678dd", "#c678dd"],
          ["#46d9ff", "#46d9ff"],
          ["#a9a1e1", "#a9a1e1"],
          ["#000000", "#000000"]]

prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font="Ubuntu Bold",
    fontsize = 10,
    padding = 2,
    background=colors[10]
)
extension_defaults = widget_defaults.copy()

def init_widgets_list():
    widgets_list = [
            widget.CurrentLayoutIcon(
                       background = colors[10],
                       padding = 0,
                       scale = 0.7
                       ),
            widget.WindowCount(
                       background = colors[10],
                       fontsize = 12,
                       padding = 10,
                       ),
            widget.Clock(
                       background = colors[10],
                       format = "%A, %B %d - %H:%M ",
                       fontsize = 12,
                       padding = 10
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.GroupBox(
                       active = colors[2],
                       inactive = colors[6],
                       highlight_color = colors[1],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[6],
                       background = colors[10]
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.WindowName(
                       foreground = colors[2],
                       background = colors[10],
                       padding = 0
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Net(
                       background = colors[10],
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ETH"
                       ),
            widget.CryptoTicker(
                       background = colors[10],
                       padding = 10,
                       crypto = "ADA"
                       ),
            widget.TextBox(text = '|', background = colors[10], foreground = '474747', padding = 10, fontsize = 14),
            widget.Systray(
                       background = colors[10],
                       padding = 5
                       ),
            widget.PulseVolume(
                       background = colors[10],
                       fmt = 'Vol: {}',
                       padding = 5
                       ),
            widget.BatteryIcon(
                       background = colors[10],
                       padding = 5,
                       scale = 1.1,
                       ),
            ]
    return widgets_list

def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    del widgets_screen1[9:10]               # Slicing removes unwanted widgets (systray) on Monitors 1,3
    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                 # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=30)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=0.85, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.85, size=20))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()

def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    ,*layout.Floating.default_float_rules,
    Match(title='Confirmation'),      # tastyworks exit box
    Match(title='Viewnior'),        # qalculate-gtk
    Match(title='Alacritty'),        # qalculate-gtk
    Match(wm_class='kdenlive'),       # kdenlive
    Match(wm_class='pinentry-gtk-2'), # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

** Emacs
_Mobiler Zugriff auf meine .org Dateien über:_
- Organice: https://organice.200ok.ch/
- Orgzly: https://orgzly.com/
- Orgro: https://orgro.org/
- official Emacs build for Android - still a little bit rough: https://f-droid.org/packages/org.gnu.emacs/

_Emacs im Terminal über:_
- Termux: run Emacs in terminal mode to have full Org Mode functionality.

Für die Installation: Erst yay und yay Packages installieren! Fall Icons nicht richtig angezeigt werden in der doom-modeline und dired kann ich die Funktionen nach der Installation ausführen um die Icons zu installieren <M-x all-the-icons-install-fonts> <M-x nerd-icons-install-fonts> ->Dann folgendes:

*** Emacs Doom 
Habe meine damaligen Dateien in einem Ordner in dieser Repo, falls ich mal nochmal zu Doom zurück will.
Folgendes noch in meine Emacs config integrieren.
       (emoji +unicode)  ; 🙂
       multiple-cursors  ; editing in many places at once
       snippets          ; my elves. They type so I don't have to
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       pdf               ; pdf enhancements
       calendar
(package! dired-open)
(package! org-tree-slide)
(package! ox-reveal)
(package! beacon)
(package! gptel)
(package! centered-cursor-mode) ;für zentrales scrollen im Präsi Modus
(package! org-drill) ;für zentrales scrollen im Präsi Modus
(package! rg)
(package! org-roam)
(unpin! org-roam) ;macht es stabiler da es nicht wirklich geupdated wird - siehe Info zu unpin!
(package! org-roam-ui)
(package! graphviz-dot-mode)
(package! doom-modeline)
(package! org-fancy-priorities :disable t)
(package! org-download)
(package! imenu-list)
(package! org-caldav)
(package! languagetool)
(package! orgtbl-aggregate)     ;https://www.youtube.com/watch?v=JesPNdMS4Ik
(package! one)     ;https://www.youtube.com/watch?v=JesPNdMS4Ik
(package! org-transclusion)
(package! openwith)
;; (package! crypt++) ; brauche ich aktuell nicht aber ist eine gut alternative zu org-crypt
;; (package! olivetti)
;; (package! flycheck-aspell)
;; (package! async)
;; (package! calfw)
;; (package! calfw-org)
;; (package! emojify)
;; (package! ox-publish)
;; (package! peep-dired)
;; (package! password-store)
;; (package! wc-mode)
;; (package! hide-mode-line)
;; (package! org-ref)
;; (package! ivy-bibtex)
;; (package! org-pdftools)
;; (package! org-super-agenda)
;; (package! powerthesaurus) ;geht bisher nur auf Englisch
;; (package! synosaurus) ;geht bisher nicht
***** Grundeinstellungen

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;;INIT AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :init
  (setq user-full-name "Markus Hoffmann"
        ;; undo-tree-auto-save-history t
        ;; undo-tree-history-directory-alist '(("." . "~/cloud/life/zeit/papierkorb/undo-tree-history/"))
        ;; save-interprogram-paste-before-kill t                                                                   ;Speichert kopierte Inhalte ausserhalb Emacs in den kill ring und macht es leichter bei zwischenzeitlichem löschen innerhalb Emacs das kopierte doch einzufügen
        org-log-into-drawer 1                                                                                   ;Notes mit <C-c C-z> werden direkt in den Drawer :LOGBOOK: geschrieben wenn dieser vorhanden ist
        doom-scratch-initial-major-mode 'lisp-interaction-mode                                                  ;scratch buffer automatisch im elisp mode um Dinge zu testen
        org-startup-folded 'show3levels                                                                         ;beim Start werden Header bis zum 3 Level angezeigt
        confirm-kill-emacs nil                                                                                  ;kein nerviges nachfragen ob Emacs wirklich geschlossen werden soll
        org-publish-use-timestamps-flag nil                                                                     ;exportiert alles - macht Export leichter nachzuvollziehen
        auth-sources '((:source "~/.authinfo.gpg"))
        org-export-with-broken-links t                                                                          ;macht auch einen Export wenn nicht alles passt - sometimes better than nothing
        org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"                                                ;"file:///home/flowmis/pages/reveal" -> ist lokaler Pfad?
        org-reveal-mathjax t                                                                                    ;brauch ich es oder geht es auch ohne?
        eshell-rc-script "~/.config/doom/eshell/profile"
        eshell-aliases-file "~/.config/doom/eshell/aliases"
        eshell-buffer-maximum-lines 5000
        eshell-scroll-to-bottom-on-input t
        org-directory "~/cloud/life/raum/.org/"
        ))
;;;CONFIG AFTER ORG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq doom-theme 'doom-mane                                                                                   ;setzt das Theme (Mit <Spc ht> neue ausprobieren)
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-log-done 'time
        delete-by-moving-to-trash t     ;oder 'move-file-to-trash t'??
        trash-directory "~/.papierkorb/" ;muss den Ordner manuell erstellen in Windows? Wenn etwas aus diesem Ordner gelöscht wird geht es glaub in den Systemtrash - also dann nicht mehr mein Papierkorb
        ;; org-journal-dir "~/cloud/life/raum/.org/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        org-tag-alist (quote ((:startgroup) ("@Work" . ?w) ("@Home" . ?h) ("@Projekt" . ?p) ("@Ökonomie" . ?o) ("@Gesundheit" . ?g)       ;@ macht es zu mutual exclusiv tags die weggehen wenn anderer tag eingestellt wird
                              (:endgroup) ("noexport" . ?n) ("Mane" . ?M) ("Joana" . ?J) ("Schule" . ?S)))
        org-capture-templates '(("1" "TODO" entry (file+headline "~/cloud/life/raum/.org/home.org" "Aufgaben")"** %? [/] \n %a")
                                ("2" "Einkaufsliste" checkitem (file+headline "~/cloud/life/raum/.org/home.org" "Einkaufsliste"))
                                ("3" "Wunschliste" checkitem (file+headline "~/cloud/life/raum/.org/home.org" "Wunschliste"))
                                ("4" "Neue Abrechnung" table-line (file+headline "~/cloud/life/raum/.org/work.org" "Abrechnungen Jo"))
                                ("a" "Appointment" entry (file  "~/cloud/life/raum/.org/gcal.org") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                                ("j" "Daily Journal" entry (file+olp+datetree "~/cloud/life/raum/.org/home.org" "Journal") "* %^{Description}      Hinzugefügt am: %U      %^g\n%?"))))
;;;Sonstiges;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'ox-reveal)                                                                                            ;Macht das ox-reveal funktioniert - geht glaub auch über init.el - langfristig anpassen auf meine Lieblingseinstellungen oder hier raus werfen
#+end_src

***** Test

#+begin_src elisp
;;;Test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq imenu-list-focus-after-activation t)

(set-face-attribute 'default nil :height 100) ; Schriftgröße einstellen ; Schriftgröße einstellen
#+end_src

***** Autosafe
so konfigurieren, dass die Dateien im Papierkob meiner Cloud landen und nicht im home Ordner!
***** Source Blocks Markup

#+begin_src elisp
;;;Src-Blck-Markup;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar mane-org-blocks-hidden nil "Status of org block delimiters visibility.")
(defun mane-toggle-org-block-delimiters ()
  "Toggle visibility of org block delimiters."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    ;; Entferne alle vorherigen Overlays
    (remove-overlays (point-min) (point-max) 'mane-org-overlay t)
    ;; Füge Overlays basierend auf dem aktuellen Status hinzu oder entferne sie
    (if mane-org-blocks-hidden
        (progn
          (setq mane-org-blocks-hidden nil))
      (progn
        (while (re-search-forward "^#\\+\\(BEGIN\\|END\\)_\\([A-Za-z]+\\)" nil t)
          (let ((ov (make-overlay (match-beginning 0) (line-end-position))))
            (overlay-put ov 'invisible t)
            (overlay-put ov 'mane-org-overlay t)))
        (setq mane-org-blocks-hidden t)))))
(add-hook 'org-mode-hook #'mane-toggle-org-block-delimiters)

(map! :leader
      :desc "Toggle Org block delimiters"
      "t 1" #'mane-toggle-org-block-delimiters)
#+end_src

***** Rechtschreibunng

https://github.com/PillFall/languagetool.el
~sudo pacman -S languagetool~
folgendes in packages.el: (package! languagetool)

#+begin_src elisp
;; Rechtschreibung und Grammatikprüfung
(setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                    "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
      languagetool-console-command "org.languagetool.commandline.Main"
      languagetool-server-command "org.languagetool.server.HTTPServer")
;; mit <languagetool-check> den Buffer auswerten und dann den Buffer checken mit <languagetool-correct-buffer> oder at point checken (kann auch einfach nur mit dem cursor hingehen) <languagetool-correct-at-point> -> für alles weitere siehe github: https://github.com/PillFall/languagetool.el
#+end_src

_Alternativ:_
~sudo pacman -S hunspell-de~

#+begin_src elisp
(setq ispell-program-name "hunspell")
(setq ispell-dictionary "de_DE")
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

***** GPT
- Ich will llama oder etwas das lokal als server bei mir zuhause läuft und gut in emacs integriert ist und mit dem text in meinen dateien (meinem 2nd brain) zusammenarbeiten kann!
#+begin_src elisp
(use-package! gptel   ;id-tranclusion-gpt
 :config
 (setq! gptel-api-key ""))
#+end_src

***** Transclusion
https://github.com/nobiot/org-transclusion
https://www.youtube.com/watch?v=ueaPiA622wA&t=327s
Beispiel: Mit <Entf t T> Transclusion sichtbar machen

#+transclude: [[~/.config/doom/config.el::tranclusion-gpt]] :lines 1-5 :src elisp

#+transclude: [[file:~/cloud/life/raum/.org/büro.org]] :lines 10-15

#+begin_src elisp
(use-package! org-transclusion
  :after org
  :init)
#+end_src

***** openwith

#+begin_src elisp
(use-package! openwith
  :after-call pre-command-hook
  :config
  (setq openwith-associations
        '(("\\.pdf\\'" "zathura" (file))
          ("\\.\\(jpg\\|png\\|gif\\|jpeg\\)\\'" "viewnior" (file))))
  (openwith-mode +1))
#+end_src

***** Verschlüsselung

#+begin_src elisp
;;;Verschlüsselung;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (require 'crypt++)
;; (setq auto-mode-alist
    ;; (append '(("\\.gpg\\'" . crypt-mode)) auto-mode-alist))

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
(setq org-crypt-key "5AAD62293D61A89D")

;; (setq org-crypt-key t
;; GPG key to use for encryption. - kann ich statt t auch den Fingerabdruck angeben der standardmäßig verwendet werden soll?
;; nil means  use symmetric encryption unconditionally.
;; "" means use symmetric encryption unless heading sets CRYPTKEY property.
#+end_src

***** Startseite

#+begin_src elisp
(setq initial-buffer-choice "~/.config/doom/start.org")
(define-minor-mode start-mode
  "Provide functions for custom start page."
  :lighter " start"
  :keymap (let ((map (make-sparse-keymap)))
          ;;(define-key map (kbd "M-z") 'eshell)
            (evil-define-key 'normal start-mode-map
              (kbd "0") '(lambda () (interactive) (org-agenda))
              (kbd "1") '(lambda () (interactive) (cfw:open-org-calendar))
              (kbd "2") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/home.org"))
              (kbd "3") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/work.org"))
              (kbd "4") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/chemie.org"))
              (kbd "5") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/unterrichtsplanung-chemie.org"))
              (kbd "6") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/sport.org"))
              (kbd "7") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/20231003-unterrichtsplanung_sport.org"))
              (kbd "8") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/nachhilfe.org"))
              (kbd "9") '(lambda () (interactive) (find-file "~/cloud/life/"))
              (kbd "f") '(lambda () (interactive) (find-file "~/flowmis-os/flowmis-os-install.org"))
              (kbd "p") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/projekte.org"))
              (kbd "b") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/bücher.org"))
              (kbd "w") '(lambda () (interactive) (find-file "~/cloud/life/raum/.org/bildung.org"))
              )
          map))
(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
(provide 'start-mode)
#+end_src

***** Makros
kmacro-lambda-form ist veraltet und sollte durch kmacro ersetzt werden seit emacs 29
#+begin_src elisp
; Funktion um nach export die .tex Dateien zu löschen!
(defun delete-tex-files ()
  "Löscht alle .tex-Dateien im Verzeichnis /home/flowmis/cloud/life/energie/work/unterricht/export."
  (interactive)
  (let ((directory "/home/flowmis/cloud/life/energie/work/unterricht/export/"))
    (dolist (file (directory-files directory t "\\.tex$"))
      (delete-file file))
    (message "Alle .tex-Dateien im Verzeichnis gelöscht.")))
(after! evil
(fset 'export-ch-presentation (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?p ?c tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-ta (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?t ?a ?c tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-zusatz (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?a ?4 tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-ib (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?i ?b tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-svp (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?s ?v ?p ?c tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-ch-ab (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?a ?b tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'export-aas (kmacro-lambda-form [?\C-x ?n ?n escape tab down ?V ?G ?\C-x ?n ?n escape ?g ?g ?O ?< ?e ?a ?a ?s tab escape ?  ?m ?e ?l ?p ?u ?\C-x ?n ?w up tab ?\C-l] 0 "%d"))
(fset 'nameing (kmacro "M-! . SPC / h o m e / f l o w m i s / c l o u d / l i f e / e n e r g i e / s e l f - s o v e r e i g n i t y / t e c h / s k r i p t e - p r o g r a m m e - c o n f i g s / s k r i p t e / n a m e i n g . s h <return>"))
(fset 'ordner-struktur-auflösen (kmacro "M-! . SPC / h o m e / f l o w m i s / c l o u d / l i f e / e n e r g i e / s e l f - s o v e r e i g n i t y / t e c h / s k r i p t e - p r o g r a m m e - c o n f i g s / s k r i p t e / o r d n e r - a u f l . s h <return> d x y"))
)
#+end_src

***** Latex

#+begin_src elisp
(after! org
  (add-to-list 'org-latex-classes
               '("maneart"
                 "\\documentclass{article}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                  ; [NO-DEFAULT-PACKAGES] verhindert das Laden der Standard-Latex-Pakete, [PACKAGES] ermöglicht das Laden zusätzlicher Pakete und [EXTRA] enthält zusätzlichen LaTeX-Code, der in der Kopfzeile der Dokumentklasse platziert wird.
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("manepres"
                 "\\documentclass{beamer}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                  ; [NO-DEFAULT-PACKAGES] verhindert das Laden der Standard-Latex-Pakete, [PACKAGES] ermöglicht das Laden zusätzlicher Pakete und [EXTRA] enthält zusätzlichen LaTeX-Code, der in der Kopfzeile der Dokumentklasse platziert wird.
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  )

(setq org-latex-hyperref-template nil)
#+end_src

***** Modeline
Falls die Icons nicht richtig angezeigt werden muss ich <M-x nerd-icons-install-fonts> ausführen und neu starten - siehe auch: https://github.com/seagle0128/doom-modeline
#+begin_src elisp
(doom-modeline-mode 1)
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time-mode 1)
#+end_src

***** org-download
siehe [[https://github.com/abo-abo/org-download][hier]]

#+begin_src elisp
;;;org-download;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
(setq-default org-download-image-dir "~/cloud/life/zeit/void/org-download")
(setq-default org-download-screenshot-method "flameshot gui --raw > %s")
(setq-default org-download-heading-lvl nil) ;falls ich das nicht habe wird ein Ordner erstellt mit dem Namen des Headers unter den das Bild eingefügt wird - so kommt kein zusätzlicher Ordner
(setq-default org-download-timestamp "%Y-%m-%d-%H%M%S-")
;; (setq org-download-display-inline-images nil) ;hiermit wird das Bild nur eingefügt aber nicht angezeigt
#+end_src

***** Agenda

[[id:cb653e79-fefb-47cc-9f1d-d43430ffb7c8][Agenda]]

#+begin_src elisp
;;;Agenda;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "BIN DRAN(D)" "DELEGIERT(d@/!)" "|" "BEENDET(b@/!)" "ABGEBROCHEN(a@/!)"))    ;pipe separiert "active" states and "inactive" states -> Emacs checkt es dann
        org-agenda-files '("~/cloud/life/raum/.org/home.org"
                           "~/cloud/life/raum/.org/work.org"
                           "~/cloud/life/raum/.org/unterrichtsplanung-chemie.org"
                           )
        org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Es eilt:")))
            (agenda "" ((org-agenda-start-day "-1d")
                        (org-agenda-span 14)
                        (org-agenda-overriding-header "Agenda:")
                        ))
            (alltodo ""
                     ((org-agenda-skip-function '(or (mane-skip-subtree-if-habit)
                                                     (mane-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "Irgendwann erledigen:"))))
           ;((org-agenda-compact-blocks t))     ;Falls ich keine Trennlinie angezeigt bekommen will
           )))
  (defun mane-skip-subtree-if-priority (priority)
    "Skip agenda subtree."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
  (defun mane-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil))))
#+end_src

***** Dired

[[id:790532d5-262d-44d0-9ac8-a12660425675][Dired]]

#+begin_src elisp
;;;DIRED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! dired
  ;; :hook
  ;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  :config
  (setq dired-open-extensions '(("gif" . "vlc")                                                                 ;Enter(oder l) in Dired auf Datei mit dieser angegebenen Endung öffnet externes angegebenes Programm
                                ("jpg" . "pinta")
                                ("png" . "pinta")
                                ("mkv" . "vlc")
                                ("html" . "brave")
                                ("mp4" . "vlc"))))
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file     ;benutzen um Bildervorschau in Splitbuffer zu zeigen, aber weiter in dired navigieren
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file
  (kbd "m") 'dired-mark                 ;Mit %m kann man nach einer regular expression bestimmte Dateien markieren
  (kbd "u") 'dired-unmark               ;Mit U kann man alles unmarken
  (kbd "t") 'dired-toggle-marks         ;wenn zuvor 2 Datein markiert waren kann man mit t diese unmarken und alle anderen die unmarked waren marken -> sinnvoll wenn man viele Dateien bis auf ein paar wenige markieren will
  (kbd "H") 'dired-do-kill-lines        ;markierte Dateien ausblenden (werden nicht gelöscht, aber bei Bearbeitungen hilfreich) -> Mit <g r> - revert Buffer kann man sie sich wieder anzeigen lassen
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-chmod
  (kbd "O") 'dired-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  ;(kbd "% l") 'dired-downcase
  ;(kbd "% u") 'dired-upcase
  ;(kbd "; d") 'epa-dired-do-decrypt
  ;(kbd "; e") 'epa-dired-do-encrypt
  )
#+end_src

***** roam

#+begin_src elisp
;;;ROAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :config
  (setq org-roam-directory "~/cloud/life/raum/.org"
        org-roam-db-autosync-mode t   ;Falls Probleme manuell <M-x org-roam-db-sync> um neu angelegte files in roam zu finden
        org-roam-ui-sync-theme t      ;Falls Probleme manuell <M-x org-roam-ui-sync-theme> und dann neustart des ui-mode um Brain im Browser zu navigieren (nun im gleichen Theme wie Emacs)
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-capture-templates '(("b" "book notes" plain (file "~/cloud/life/raum/.org/material/template-roam-capture-book.org")
                                      :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t)
                                     ("n" "normal/einfach nur mit Datum" plain (file "~/cloud/life/raum/.org/material/template-roam-capture-normal.org")
                                      :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t))))
(org-roam-db-sync)
#+end_src

***** Snippets

#+begin_src elisp
;;;Snippets;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package! yasnippet
  :config
  (setq yas-snippet-dirs '("~/cloud/life/raum/.org/material/yasnippets/"))
  (yas-global-mode 1))
#+end_src

***** Mail

[[id:48e45b80-c58f-4ed4-9271-fc229b5ef568][Tipps]]

#+begin_src elisp 
;;;Mail;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'mu4e)
(require 'smtpmail)
(require 'org-mu4e)
(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      ;; smtpmail-smtp-user "manemarkushoffmann@gmail" ;oder Markus Hoffmann??
      mu4e-sent-messages-behavior 'sent
      mu4e-sent-folder "/home/flowmis/.mail/Gesendet"
      mu4e-drafts-folder "/home/flowmis/.mail/Entwürfe"
      mu4e-trash-folder "/home/flowmis/.mail/Papierkorb"
      smtpmail-stream-type 'starttls
      mu4e-root-maildir "/home/flowmis/.mail"
      mu4e-trash-folder "/home/flowmis/.mail/Papierkorb"
      mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval 300 ;; second
      mu4e-compose-signature-auto-include nil
      mu4e-attachment-dir "~/Downloads"
      ;; smtpmail-starttls-credentials '(("smtp.gmail.com" "587" nil nil))
      ;; smtpmail-auth-credentials (expand-file-name "~/.authinfo")
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info t
      ;; starttls-extra-arguments nil
      ;; starttls-gnutls-program "/usr/bin/gnutls-cli"
      ;; starttls-extra-arguments nil
      ;; starttls-use-gnutls t
      mu4e-use-fancy-chars t
      org-mu4e-convert-to-html t
      mu4e-maildir-shortcuts '(("/home/flowmis/.mail/Papierkorb" . ?p)
                               ("/home/flowmis/.mail/Archiv" . ?a)
                               ("/home/flowmis/.mail/Entwürfe" .?e)
                               ("/home/flowmis/.mail/Gesendet" .?g)))
#+end_src

***** Kalender
in packages.el folgende Linie hinzufügen:
(package! org-caldav)

In der Nextcloud einen neuen Kalender erstellen und den cal dav link kopieren -> Achtung: Passt leider nicht und die Adresse muss etwas abgeändert werden:
- so wird es unter =Interner Link= angezeigt und in den Zwischenspeicher kopiert: https://cloud.pyroma.net/remote.php/dav/calendars/mane/test/
- in der Form muss es in die config.el (sollte ich im Namen des Kalenders Großbuchstaben haben muss ich diese hier klein angeben - URL im ganzen einfach testen und dann sollte wenn Adress passt folgendes im Browser angezeigt werden: This is the WebDAV interface. It can only be accessed by WebDAV clients such as the Nextcloud desktop sync client.):
(setq org-caldav-url "https://cloud.pyroma.net/remote.php/dav/calendars/mane"
      org-caldav-calendars '((:calendar-id "test"
      ...
- ACHTUNG: out of the box funktionieren bzw. synchroniseren nur timestamps und schedules bzw. deadlines nicht. Zudem werden für den sync an alle timestamps Properties Drawer mit unique id vergeben - macht es hässlicher, aber dadurch kann anständig gesynced werden!
-> weitere Anleitung: https://github.com/dengste/org-caldav

Die caldav-inbox speichert bzw. zieht alle Termine aus der Nextcloud und die unter caldav-files angegebenen Ordner werden in die Nextcloud hochgeladen, also nach oben gesynced. Es ist auch möglich nur in eine Richtung zu syncen, aber hier finde ich das nicht sinnvoll und will es in beide Richtungen
-> wenn es nicht synced vll auch schauen dass die inbox datei ausreichend Berechtigungen hat etc.

Schedules und Deadlines werden nur wenn man es angibt auch synchronisiert und ansonsten nur timestamps!

(setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo))
(setq org-icalendar-use-scheduled '(todo event-if-todo event-if-not-todo))

*Um das Passwort nicht immer eingeben zu müssen kann ich wie folgt vorgehen:*
1. _.authinfo Datei erstellen:_ touch ~/.authinfo
2. _.authinfo öffnen:_ nvim ~/.authinfo
3. _folgende Zeile einfügen (***** durch richtiges Passwort ergänzen):_ machine cloud.pyroma.net:443 port https login mane password *****
4. _.authinfo verschlüsseln:_ gpg -e -r <Ihr GnuPG-Schlüssel> ~/.authinfo
5. _config anpassen (habe ich bei den Grundeinstellungen bereits hinzugefügt):_ (setq auth-sources '((:source "~/.authinfo.gpg")))
-> nun muss ich nur mein Passwort für den gpg key eingeben und kennen!

Mit [[https://github.com/kiwanami/emacs-calfw][calfw]] erhält man einen schönen org-mode-kalender-buffer für die Übersicht: <cfw:open-org-calendar>

#+begin_src elisp
;;;Kalender;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'calfw)
(require 'calfw-org)
(setq org-caldav-url "https://cloud.pyroma.net/remote.php/dav/calendars/mane"
      org-caldav-calendars '((:calendar-id "kalender"))
      org-caldav-inbox "/home/flowmis/cloud/life/raum/.org/kalender-inbox.org"
      org-icalendar-timezone "Europe/Berlin"
      org-icalendar-use-deadline '(event-if-todo event-if-not-todo)
      org-icalendar-use-scheduled '(todo event-if-todo event-if-not-todo)
      org-caldav-files '("~/cloud/life/raum/.org/home.org"
                         "~/cloud/life/raum/.org/work.org"
                         "~/cloud/life/raum/.org/unterrichtsplanung-sport.org"
                         "~/cloud/life/raum/.org/unterrichtsplanung-chemie.org"
                         )
      org-caldav-save-directory "~/cloud/life/zeit/archiv/kalender/"     ; um sync von mehreren Geräten zu ermöglichen brauchen sie die gleiche historie (mit org-caldav-delete-everything kann ich die vorhergehende historie löschen)
) ;hier kann ich weitere hinzfügen, aber irgendwie werden schon ein paar erkannt ohne dass ich sie hier angebe - vll hat es mit agenda files oder ähnlichem zu tun?
#+end_src

***** Keybindings

#+begin_src elisp
;;;Keybindings;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "M-v") 'er/expand-region) ;markiert bei jeder Wiederholung immer weiter nach aussen --> Macht es einem leicht bestimmte logische Bereiche schnell zu markieren
(global-set-key (kbd "M-p") 'yank-from-kill-ring) ;zeigt kill ring - man kann auswählen was man von dem zuvor gekilltem einfügen will

;;leader ist in Doom <SPC> -> prefix der andernorts vergeben ist und hier nicht verwendet werden sollte "d" - dired
(setq doom-localleader-key "<delete>")
;(map! :localleader
;       :desc "toggle imenu-list" "SPC" #'imenu-list-smart-toggle)              ;geht auch mit <Fn rechts> bei aktuellem Laptop
;; Standard leader key in doom

(map! :leader
      :desc "Comment or uncomment lines" "SPC" #'comment-line)
;; neu festgelegter leader key
(map! :localleader
      :desc "see and set kb" "1" #'(lambda () (interactive) (find-file "~/flowmis-os/flowmis-os-install.org") (goto-char (point-min)) (re-search-forward "^**** Keybindings$" nil t)(org-cycle)(org-cycle)(recenter-top-bottom))
      :desc "Gehe zum Dashboard" "<delete>" #'(lambda () (interactive) (find-file "~/.config/doom/start.org"))
      :desc "Edit local/tangled doom config.el" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.el"))

      :desc "end of line" "<right>" #'end-of-line              ;geht auch mit <Fn rechts> bei aktuellem Laptop
      :desc "start of line" "<left>" #'beginning-of-line       ;geht auch mit <Fn links> bei aktuellem Laptop
      :desc "page down" "<down>" #'evil-scroll-page-down       ;geht auch mit <Fn hoch> bei aktuellem Laptop - auch <Strg hoch> oft sinnvoller Sprung
      :desc "page up" "<up>" #'evil-scroll-page-up            ;geht auch mit <Fn runter> bei aktuellem Laptop - auch <Strg runter> oft sinnvoller Sprung

      :desc "Eshell" "e s" #'eshell
      :desc "Counsel eshell history" "e h" #'counsel-esh-history

      :desc "Evaluate elisp in buffer" "e b" #'eval-buffer
      :desc "Evaluate defun" "e d" #'eval-defun
      :desc "Evaluate elisp expression" "e e" #'eval-expression
      :desc "Evaluate last sexpression" "e l" #'eval-last-sexp
      :desc "Evaluate elisp in region" "e r" #'eval-region

      :desc "Toggle line numbers" "t l" #'doom/toggle-line-numbers
      :desc "Toggle line highlight in frame" "t h" #'hl-line-mode
      :desc "Toggle line highlight globally" "t H" #'global-hl-line-mode
      :desc "Toggle truncate lines" "t t" #'toggle-truncate-lines
      :desc "Org Transclusion Mode" "t T" #'org-transclusion-mode

      :desc "Add Transclusion Block" "t b" #'org-transclusion-add

      :desc "Kalenderansicht öffnen" "k o" #'cfw:open-org-calendar
      :desc "Kalender sync" "k s" #'org-gcal-sync
      :desc "Kalendereintrag an GoogleKalender schicken" "k p" #'org-gcal-post-at-point
      :desc "Kalendereintrag bei GoogleKalender löschen" "k d" #'org-gcal-delete-at-point

      :desc "org-download-screenshot" "d s" #'org-download-screenshot
      :desc "org-download-toggle" "d c" #'org-download-clipboard
      :desc "org-download-rename-at-point" "d R" #'org-download-rename-at-point
      :desc "org-download-rename-last-file" "d r" #'org-download-rename-last-file
      :desc "org-download-aus-bildadresse" "d w" #'org-download-yank            ; Bildadresse aus Browser kopiert wird in originalqualität und mit quelle in org mode eingefügt!
      :desc "org-download-delete-at-point" "d d" #'org-download-delete

      :desc "org-roam-ui" "r u" #'org-roam-ui-open
      :desc "org-roam-db-sync" "r u" #'org-roam-db-sync
      :desc "find node/new node" "r r" #'org-roam-node-find
      :desc "insert node" "r i" #'org-roam-node-insert

      :desc "Window configuration to register" "R w" #'window-configuration-to-register
      :desc "Frameset to register" "R f" #'frameset-to-register
      :desc "Jump to register" "R j" #'jump-to-register
      :desc "List registers" "R l" #'list-registers
      :desc "View a register" "R v" #'view-register
      :desc "Point to register" "R SPC" #'point-to-register

      :desc "toggle imenu-list" "i" #'imenu-list-smart-toggle              ;geht auch mit <Fn rechts> bei aktuellem Laptop

      :desc "Org babel tangle" "b" #'org-babel-tangle

      :desc "make ditaa work" "x d" #'activate-ditaa-path

      :desc "shrink table" "x t" #'org-table-shrink
      :desc "expand table" "x T" #'org-table-expand

      :desc "Winner undo" "w <left>" #'winner-undo ;schaut was die letzte Window configuration war und geht dahin zurück
      :desc "Winner redo" "w <right>" #'winner-redo ;geht in andere Richtung wie winner-undo

      :desc "Starte Präsentationsmodus" "x p" #'pres-start
      :desc "Beende Präsentationsmodus" "x P" #'pres-end)
#+end_src

***** Funktionen

#+begin_src elisp
(defun mane-rezepte-export-org-to-html ()
  "Rezeptdateien als html an entsprechenden Ort exportieren."
  (interactive)
  (let* ((source-dir "~/cloud/life/raum/.org/rezepte/")
         (org-files (directory-files-recursively source-dir "\\.org$")))
    (dolist (file org-files)
      (with-current-buffer (find-file-noselect file)
        (org-html-export-to-html nil nil nil nil nil)))))
(defun activate-ditaa-path ()
 (interactive)
 (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar"))

(defun pres-start ()
  "Starte org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode 1)
  (load-theme 'doom-henna)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (hide-mode-line-mode 1)
  (olivetti-mode 1)
  (beacon-mode -1)
  (centered-cursor-mode 1)
  (org-display-inline-images)           ;<M-x org-toggle-inline-images> sollte vor dem öffnen des Präsentationsmodus <M-x org-tree-slide-mode> ausgeführt um sicher zu sein dass alle Bilder angezeigt werde und dieser code sorgt dafür dass dies der Fall ist  -> alternativ vll auch mal org-startup-with-inline-images anschauen
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1)
  (setq visual-fill-column-width 80     ;Größe des seitlichen Rahmen
        visual-fill-column-center-text t) ;rückt Text in Mitte
  (visual-fill-column-mode 1)           ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode -1)        ;schaltet line-numbers aus
  (visual-line-mode t)                  ;sorgt dafür dass alles an Text sichtbar ist (umgebrochen wird)
  (set-face-attribute 'org-document-title nil :font "Fira Code" :weight 'bold :height 1.4) ;Einstellungen Titel Präsi
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50)))

(defun pres-end ()
  "Beende org-tree-slide presentation"
  (interactive)
  (org-tree-slide-mode -1)
  (load-theme 'doom-molokai)
  (doom-modeline-mode 1)
  (beacon-mode 1)
  (centered-cursor-mode -1)
  (org-display-inline-images -1)
  (setq visual-fill-column-width 110    ;Größe des seitlichen Rahmen
        visual-fill-column-center-text nil) ;rückt Text in Mitte
  (visual-fill-column-mode -1)          ;braucht man um seitlichen Rahmen zu füllen (hier nichts umstellen)
  (display-line-numbers-mode 1)         ;schaltet line-numbers aus
  (text-scale-mode -1)
  (set-frame-parameter (selected-frame) 'alpha '(95 . 70)))

(defun mane-theme-zusatzeinstellungen ()
  "Paar Anpassungen - interaktiv ein-ausschalten."
  (interactive)
  ;; (setq text-scale-mode-amount 1)
  ;; (text-scale-mode 1)
  (custom-theme-set-faces               ;<M-x describe-theme> um Einblick in Möglichkeiten zu bekommen
   'user
   '(org-level-1 ((t (:inherit outline-1 :font "URW Bookman Light" :height 2.3 ))))
   '(org-level-2 ((t (:inherit outline-2 :height 2.0 ))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.7 ))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4 ))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.2 ))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:height 1.2))))
   '(org-document-title ((t (:height 3.0))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   ;; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
   ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   ;; '(org-table ((t (:inherit fixed-pitch))))
   ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 1.4 :foreground "#00606b"))))
   ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch) :foreground "#ff0000" :height 1.4 :weight bold))))                         ;Farbe und Größe etc. von markiertem Text durch umgebende =
   ))
;;;Hook der Funktionen nach starten von Doom automatisch aktiviert!
(add-hook 'after-init-hook #'mane-theme-zusatzeinstellungen) ;'after-init-ui-hook auch gute Möglichkeit um Aussehensvariablen zu überschreiben
#+end_src

***** Inaktiv
****** Multiple Cursors

- Momentan komm ich mit den vorkonfigurierten gut zurecht - musste ich in init.el aktivieren!

#+begin_src elisp
(use-package multiple-cursors        ;Habe das Paket von hlissner in init.el aktiviert weil ich es besser finde!
  :config
  (setq mc/always-run-for-all 1)
  (global-set-key (kbd "C-c m m") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m M") 'mc/mark-all-dwim)
  (global-set-key (kbd "C-c m a") 'mc/edit-lines)
  (global-set-key (kbd "C-c m q") 'mc/keyboard-quit)
  (global-set-key (kbd "C-c m n") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c m p") 'mc/skip-to-previous-like-this)
  (define-key mc/keymap (kbd "<return>") nil))
#+end_src

****** Dashboard

#+begin_src elisp
;;;Dashboard;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(after! org
  :dashboard
  (let ((alternatives '("banner1.png" "banner3.png" "banner4.png" "banner5.png" "banner6.png" "banner7.png" "banner8.png")))
    (setq fancy-splash-image (concat "~/.config/doom/banner/" (nth (random (length alternatives)) alternatives))))
  (setq +doom-dashboard-name "*Startscreen*"
        +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 3)
        doom-fallback-buffer-name "*Startscreen*"))
;;;DT's Dashboard - Instead of using Doom’s Dashboard or the Emacs Dashboard program, I have decided to just set an custom start file as my “dashboard” since it allows me more customization options.  I have added to the ‘start-mode-hook’ the argument ‘read-only-mode’.  This is to prevent accidental editing of the start file, and to prevent clashes with the ‘start-mode’ specific keybindings.  You can toggle on/off read-only-mode with ‘SPC t r’.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (setq initial-buffer-choice "~/.config/doom/start.org")

;; (define-minor-mode start-mode
;;   "Provide functions for custom start page."
;;   :lighter " start"
;;   :keymap (let ((map (make-sparse-keymap)))
;;           ;;(define-key map (kbd "M-z") 'eshell)
;;             (evil-define-key 'normal start-mode-map
;;               (kbd "1") '(lambda () (interactive) (find-file "~/.config/doom/config.org"))
;;               (kbd "2") '(lambda () (interactive) (find-file "~/.config/doom/init.el"))
;;               (kbd "3") '(lambda () (interactive) (find-file "~/.config/doom/packages.el"))
;;               (kbd "4") '(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
;;               (kbd "5") '(lambda () (interactive) (find-file "~/.config/doom/eshell/profile")))
;;           map))

;; (add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
;; (provide 'start-mode)
#+end_src

****** Funktion open dired

#+begin_src elisp
;; (defun xah-open-in-external-app (&optional @fname)
;; "Open the current file or dired marked files in external app.
;; The app is chosen from your OS's preference.

;; When called in emacs lisp, if @fname is given, open that.

;; URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
;; Version 2019-11-04"
;; (interactive)
;; (let* (
;;         ($file-list
;;         (if @fname
;;             (progn (list @fname))
;;             (if (string-equal major-mode "dired-mode")
;;                 (dired-get-marked-files)
;;             (list (buffer-file-name)))))
;;         ($do-it-p (if (<= (length $file-list) 5)
;;                     t
;;                     (y-or-n-p "Open more than 5 files? "))))
;;     (when $do-it-p
;;     (cond
;;     ((string-equal system-type "windows-nt")
;;         (mapc
;;         (lambda ($fpath)
;;         (w32-shell-execute "open" $fpath)) $file-list))
;;     ((string-equal system-type "darwin")
;;         (mapc
;;         (lambda ($fpath)
;;         (shell-command
;;             (concat "open " (shell-quote-argument $fpath))))  $file-list))
;;     ((string-equal system-type "gnu/linux")
;;         (mapc
;;         (lambda ($fpath) (let ((process-connection-type nil))
;;                             (start-process "" nil "xdg-open" $fpath))) $file-list))))))

;; (global-set-key (kbd "C-c o") 'xah-open-in-external-app)
#+end_src

****** Spellcheck

#+begin_src elisp
(setq ispell-program-name "aspell")   ;<z=> mit Cursor über Wort sagt dir schnell ob es richtig geschrieben ist! Kann aber auch wie folgt ein Keybinding für diese Funktion einrichten (habe in arch aspell(das neue ispell) installiert mit entsprechendem Wörterbuch)
(global-set-key (kbd "C-c f") 'ispell-word)  ;mit diesem Befehl kann man leicht keybindings setzen für alle Funktionen die man mit <M-x> finden kann -> man muss jedoch

;; Rechtschreibprüfung vorerst aus weil noch nicht auf deutsch
(remove-hook 'text-mode-hook #'spell-fu-mode)
(setq global-spell-fu-mode 0)
#+end_src

****** NeoTree

- Wenn ich es nutzen will muss ich es in init.el aktivieren und schauen ob dieser config Abschnitt so noch passt
- Finde für github Projekte treemacs (aktiviere in init.el) noch besser da es mit evil keys geht und ähnlich zu org-mode ist - <Spc-o p> um treemacs aus Projekt zu öffnen

#+begin_src elisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src

****** Centaur Tabs

- Falls ich unzufrieden bin wie Emacs das einrücken mit Tabs macht kann ich folgendes Paket mit entsprechender config versuchen

#+begin_src elisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

****** Ivy

#+begin_src elisp
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.

(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+end_src

****** Zitieren mit org-ref

#+begin_src elisp
(setq bibtex-completion-bibliography '("~/cloud/life/raum/.org/bib/references.bib")
	bibtex-completion-library-path '("~/cloud/life/raum/.org/bib/bibtex-pdfs/")
	bibtex-completion-notes-path "~/cloud/life/raum/.org/bib/notes/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath)))
(require 'bibtex)
(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))
(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
 (require 'org-ref-ivy)
(setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+end_src

*** Emacs config
Die [[~/flowmis-os/config.org][config.org]] mit den zusätzlichen Ordnern und Dateien mit dem src-block zu Beginn dieser Datei an den richtigen Ort verschieben und den ~emacs --daemon~ starten um Pakete zu installieren etc. Danach sollte alles funktionieren. Kleinere Änderungen kann ich direkt unter /home/flowmis/.config/emacs/config.org vornehmen und wenn ich zufrieden mit den Ergebnissen bin kann ich es dann in die config.org hier integrieren!
#+transclude: [[file:~/flowmis-os/config.org]] :lines 1-20
** Programme
#+begin_src sh
sudo pacman -S zathur zathura-pdf-mupdf
#+end_src

** Terminal/Shell/CLI

Qtile startet Alacritty da es der effizienteste Terminal Emulator ist. In der Alacritty Config habe ich alle bash aliases die in der .bashrc stehen. Allerdings habe ich in die alacritty config geschrieben dass sofort fish gestartet wird und ich dadurch die coolen autofilldinge von fish habe. Bei fish muss ich dann aber in der config zu fish die aliase extra setzen, also wenn es zu Problemen kommt ist es nicht ganz einfach durchzusteigen, aber an sich ist das Setup geil da es das beste von allem hat. Themes muss ich in der Alacritty config ändern wenn ich will.
Mit ESC im Terminal komm ich in den vim Mode und kann dort dann wie in emacs markieren kopieren etc.! Mit i komme ich wieder in den insert Mode. < und > am Anfang im Terminal kennzeichnen den Modus.

*** Bash

#+begin_src bash :tangle tangle/.bashrc
### EXPORT
export HISTCONTROL=ignoredups:erasedups           # no duplicate entries
export ALTERNATE_EDITOR=""                        # setting for emacsclient
export QT_QPA_PLATFORMTHEME=qt5ct
export EDITOR="emacsclient -t -a ''"              # $EDITOR use Emacs in terminal
export VISUAL="emacsclient -c -a emacs"           # $VISUAL use Emacs in GUI mode
export NEXTCLOUD_PHP_CONFIG=/etc/webapps/nextcloud/php.ini #brauche ich für die nextcloud
###Virtualenvwrapper settings
# export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
# export WORKON_HOME=$HOME/.virtualenvs
# export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv
# source ~/.local/bin/virtualenvwrapper.sh

### SET VI MODE ###
# Comment this line out to enable default emacs-like bindings
set -o vi
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### PROMPT
# This is commented out if using starship prompt
# PS1='[\u@\h \W]\$ '

### PATH
if [ -d "$HOME/.bin" ] ; then
  PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "$HOME/Applications" ] ; then
  PATH="$HOME/Applications:$PATH"
fi

if [ -d "$HOME/.config/emacs/bin" ] ; then
  PATH="$HOME/.config/emacs/bin:$PATH"
fi

### CHANGE TITLE OF TERMINALS
case ${TERM} in
  xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st|konsole*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
        ;;
  screen*)
    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
    ;;
esac

### SHOPT
shopt -s autocd # change to named directory
shopt -s cdspell # autocorrects cd misspellings
shopt -s cmdhist # save multi-line commands in history as single line
shopt -s dotglob
shopt -s histappend # do not overwrite history
shopt -s expand_aliases # expand aliases
shopt -s checkwinsize # checks term size when bash regains control

#ignore upper and lowercase when TAB completion
bind "set completion-ignore-case on"

### ARCHIVE EXTRACTION
# usage: ex <file>
ex ()
{
  if [ -f "$1" ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

### ALIASES ###

# root privileges
alias doas="doas --"

# navigation
up () {
  local d=""
  local limit="$1"

  # Default to limit of 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  for ((i=1;i<=limit;i++)); do
    d="../$d"
  done

  # perform cd. Show error if cd fails
  if ! cd "$d"; then
    echo "Couldn't go up $limit dirs.";
  fi
}

# vim and emacs
alias vim="nvim"

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'

# Changing "ls" to "eza"
alias ls='eza -al --color=always --group-directories-first' # my preferred listing
alias la='eza -a --color=always --group-directories-first'  # all files and dirs
alias ll='eza -l --color=always --group-directories-first'  # long format
alias lt='eza -aT --color=always --group-directories-first' # tree listing
alias l.='eza -a | egrep "^\."'

# pacman and yay
alias pu='sudo pacman -Syu'                  # update only standard pkgs
alias pua='sudo pacman -Syyu'                # Refresh pkglist & update standard pkgs
alias pi='sudo pacman -S'
alias ps='sudo pacman -Ss'
alias pd='sudo pacman -R'
alias yu='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yua='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias pc='sudo pacman -Rns $(pacman -Qtdq)' # remove orphaned packages

# Sleeptimer
alias sleep='python /home/flowmis/cloud/life/energie/tech/skripte-programme-configs/skripte/sleeptimer.py '

# activate/mount VM shared Folder
alias share='sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/'

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

### BASH INSULTER ###
if [ -f /etc/bash.command-not-found ]; then
    . /etc/bash.command-not-found
fi
#+end_src

*** Alacritty

+ Alacritty ist auf allen wichtigen Plattformen vorhanden. Nutzt GPU für rendern -> sehr schneller Terminal Emulator (je nach Befehl kann man sich hier echt einige Minuten sparen!)!
+ Achtung config File ist sehr anfällig für falsch gesetzte Leerzeichen, Spacing etc.! -> gibt es ein in Python programmierten Terminal Emulator?
- Mit shell: und dann program: /bin/fish mach ich dass alacritty gleich mit fish startet -> fish hilft mir bessere Vorschläge zu bekommen etc.


#+begin_src sh :tangle tangle/alacritty.toml
[colors]
draw_bold_text_with_bright_colors = true

[env]
TERM = "xterm-256color"

[font]
size = 12.0

[font.bold]
family = "Source Code Pro"
style = "Bold"

[font.bold_italic]
family = "Source Code Pro"
style = "Bold Italic"

[font.italic]
family = "Source Code Pro"
style = "Italic"

[font.normal]
family = "Source Code Pro"
style = "Regular"

[font.offset]
x = 0
y = 1

[[keyboard.bindings]]
action = "Paste"
key = "V"
mods = "Control|Shift"

[[keyboard.bindings]]
action = "Copy"
key = "C"
mods = "Control|Shift"

[[keyboard.bindings]]
action = "PasteSelection"
key = "Insert"
mods = "Shift"

[[keyboard.bindings]]
action = "ResetFontSize"
key = "Key0"
mods = "Control"

[[keyboard.bindings]]
action = "IncreaseFontSize"
key = "Equals"
mods = "Control"

[[keyboard.bindings]]
action = "IncreaseFontSize"
key = "Plus"
mods = "Control"

[[keyboard.bindings]]
action = "DecreaseFontSize"
key = "Minus"
mods = "Control"

[[keyboard.bindings]]
action = "ToggleFullscreen"
key = "F11"
mods = "None"

[[keyboard.bindings]]
action = "Paste"
key = "Paste"
mods = "None"

[[keyboard.bindings]]
action = "Copy"
key = "Copy"
mods = "None"

[[keyboard.bindings]]
action = "ClearLogNotice"
key = "L"
mods = "Control"

[[keyboard.bindings]]
chars = "\f"
key = "L"
mods = "Control"

[[keyboard.bindings]]
action = "ScrollPageUp"
key = "PageUp"
mode = "~Alt"
mods = "None"

[[keyboard.bindings]]
action = "ScrollPageDown"
key = "PageDown"
mode = "~Alt"
mods = "None"

[[keyboard.bindings]]
action = "ScrollToTop"
key = "Home"
mode = "~Alt"
mods = "Shift"

[[keyboard.bindings]]
action = "ScrollToBottom"
key = "End"
mode = "~Alt"
mods = "Shift"

[scrolling]
history = 5000

[shell]
program = "/bin/fish"

[window]
dynamic_padding = false
title = "Alacritty"

[window.class]
general = "Alacritty"
instance = "Alacritty"

[window.padding]
x = 6
y = 6
#+end_src

*** Fish

- Fish ist eine recht moderne Shell, mit einer eigenen Skriptsprache die etwas von der bash scripting language abweicht -> hat positives, aber da bash der Standard ist leider auch negatives -> Fish ist für Anfänger aber ziemlich geil und hat auch eingebaute Funktion -> ~builtin --names~ zeigt sie einem an -> auch Keybindings für die Funktionen innerhalb fish sind vorhanden und so kann man mit =Alt <-/->= zwischen den Pfaden die man besucht hat hin und her springen (keybindings zu den Funktionen =nextd= und =prevd=)!
- =count, math, random= sind ebenfalls nützliche eingebaute Funktionen
- =ALT w= ist auch cooles keybinding das einem sagt was es ist - teste den Befehl ls und dann ohne Enter =Alt w=

#+begin_src sh :tangle tangle/config.fish
### ADDING TO THE PATH
# First line removes the path; second line sets it.  Without the first line,
# your path gets massive and fish becomes very slow.
set -e fish_user_paths
set -U fish_user_paths $HOME/.local/bin $HOME/Applications $HOME/.config/emacs/bin $fish_user_paths

### EXPORT ###
set fish_greeting                                 # Supresses fish's intro message
set TERM "xterm-256color"                         # Sets the terminal type
set EDITOR "emacsclient -t -a ''"                 # $EDITOR use Emacs in terminal
set VISUAL "emacsclient -c -a emacs"              # $VISUAL use Emacs in GUI mode

### SET MANPAGER
### Uncomment only one of these!

### "bat" as manpager
set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"

### "vim" as manpager
# set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpager
# set -x MANPAGER "nvim -c 'set ft=man' -"

### SET EITHER DEFAULT EMACS MODE OR VI MODE ###
function fish_user_key_bindings
  # fish_default_key_bindings
  fish_vi_key_bindings
end
### END OF VI MODE ###

### AUTOCOMPLETE AND HIGHLIGHT COLORS ###
set fish_color_normal brcyan
set fish_color_autosuggestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

### SPARK ###
set -g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usage help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum range value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum range value"

function spark -d "sparkline generator"
    if isatty
        switch "$argv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usage: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "ezamples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=length spark.fish | spark"
            case \*
                echo $argv | spark $argv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v argv="$argv" '
        BEGIN {
            min = match(argv, /--min=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
            max = match(argv, /--max=[0-9]+/) ? substr(argv, RSTART + 6, RLENGTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
### END OF SPARK ###


### FUNCTIONS ###
# Spark functions
function letters
    cat $argv | awk -vFS='' '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' | sort | cut -c 3- | spark | lolcat
    printf  '%s\n' 'abcdefghijklmnopqrstuvwxyz'  ' ' | lolcat
end

function commits
    git log --author="$argv" --format=format:%ad --date=short | uniq -c | awk '{print $1}' | spark | lolcat
end

# Functions needed for !! and !$
function __history_previous_command
  switch (commandline -t)
  case "!"
    commandline -t $history[1]; commandline -f repaint
  case "*"
    commandline -i !
  end
end

function __history_previous_command_arguments
  switch (commandline -t)
  case "!"
    commandline -t ""
    commandline -f history-token-search-backward
  case "*"
    commandline -i '$'
  end
end
# The bindings for !! and !$
if [ $fish_key_bindings = "fish_vi_key_bindings" ];
  bind -Minsert ! __history_previous_command
  bind -Minsert '$' __history_previous_command_arguments
else
  bind ! __history_previous_command
  bind '$' __history_previous_command_arguments
end

# Function for creating a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --argument filename
    cp $filename $filename.bak
end

# Function for copying files and directories, even recursively.
# ex: copy DIRNAME LOCATIONS
# result: copies the directory and all of its contents.
function copy
    set count (count $argv | tr -d \n)
    if test "$count" = 2; and test -d "$argv[1]"
	set from (echo $argv[1] | trim-right /)
	set to (echo $argv[2])
        command cp -r $from $to
    else
        command cp $argv
    end
end

# Function for printing a column (splits input on whitespace)
# ex: echo 1 2 3 | coln 3
# output: 3
function coln
    while read -l input
        echo $input | awk '{print $'$argv[1]'}'
    end
end

# Function for printing a row
# ex: seq 3 | rown 3
# output: 3
function rown --argument index
    sed -n "$index p"
end

# Function for ignoring the first 'n' lines
# ex: seq 10 | skip 5
# results: prints everything but the first 5 lines
function skip --argument n
    tail +(math 1 + $n)
end

# Function for taking the first 'n' lines
# ex: seq 10 | take 5
# results: prints only the first 5 lines
function take --argument number
    head -$number
end

# Function for org-agenda
function org-search -d "send a search string to org-mode"
    set -l output (/usr/bin/emacsclient -a "" -e "(message \"%s\" (mapconcat #'substring-no-properties \
        (mapcar #'org-link-display-format \
        (org-ql-query \
        :select #'org-get-heading \
        :from  (org-agenda-files) \
        :where (org-ql--query-string-to-sexp \"$argv\"))) \
        \"
    \"))")
    printf $output
end

### END OF FUNCTIONS ###


### ALIASES ###
# \x1b[2J   <- clears tty
# \x1b[1;1H <- goes to (1, 1) (start)
alias clear='echo -en "\x1b[2J\x1b[1;1H" ; echo; echo; seq 1 (tput cols) | sort -R | spark | lolcat; echo; echo'

# root privileges
alias doas="doas --"

# navigation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Sleeptimer
alias sleep='python /home/flowmis/speicher-haupt/skripte-programme-configs/skripte/sleeptimer.py '

# Change Wallpaper
alias wallpaper='nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds'

# vim and emacs
alias vim='nvim'

# Changing "ls" to "eza"
alias ls='eza -al --color=always --group-directories-first' # my preferred listing
alias la='eza -a --color=always --group-directories-first'  # all files and dirs
alias ll='eza -l --color=always --group-directories-first'  # long format
alias lt='eza -aT --color=always --group-directories-first' # tree listing
alias l.='eza -a | egrep "^\."'

# activate/mount VM shared Folder
alias share='sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/'

# pacman and yay
alias pu='sudo pacman -Syyu'                  # update only standard pkgs
alias pi='sudo pacman -S'
alias ps='sudo pacman -Ss'
alias pd='sudo pacman -R'
alias yu='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
alias yua='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
alias pc='sudo pacman -Rns (pacman -Qtdq)' # remove orphaned packages

# get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# Play video files in current dir by type
alias playavi='vlc *.avi'
alias playmov='vlc *.mov'
alias playmp4='vlc *.mp4'

### SETTING THE STARSHIP PROMPT ###
starship init fish | source
#+end_src

*** Eshell

#+begin_src sh :tangle tangle/eshell/aliases
# Aliases for emacs commands
alias ff find-file $1

# Changing "ls" to "eza"
alias ls eza -al --color=always --group-directories-first $*  # my preferred listing
alias la eza -a --color=always --group-directories-first $*   # all files and dirs
alias ll eza -l --color=always --group-directories-first $*   # long format
alias lt eza -aT --color=always --group-directories-first $*  # tree listing
alias l. eza -a1 $* | grep "^\."                              # list hidden files

# Confirm before overwriting something
alias cp cp -i $1
alias mv mv -i $1
alias rm rm -i $1

# activate/mount VM shared Folder
alias share sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/

# Pacman
alias pi sudo pacman -S
alias pu sudo pacman -Syyu
alias ps sudo pacman -Ss
alias pd sudo pacman -R
alias pc sudo pacman -Rns (pacman -Qtdq)    # remove orphaned packages
alias yu yay -Sua --noconfirm               # update only AUR pkgs (yay)
alias yua yay -Syu --noconfirm              # update standard pkgs and AUR pkgs (yay)
#+end_src

* TODO [#B] flowmis-os [0%]
:LOGBOOK:
:END:

  - [ ] Wechsel auf Nix OS!
  - [ ] Vorlage für alle index files und für neue atomare Ideen sowie Konzepte etc. machen
  - [ ] Kann ich diese Repo privat stellen und trotzdem leicht clonen/verwenden um das Installationsskript etc. auszuführen oder ist entsprechend vorbereitete/angepasste Iso nötig
  - [ ] komplettes Skript für arch installations .iso herstellen und dann einfach immer in iso integrieren, sodass es alles von selbst installiert
  - [ ] Passwortdatei mit installieren lassen sodass ich mit decrypt key alle Passwörter auf Pc hab
  - [ ] mein .xprofile durch .xressources ersetzen so wie bei DT
  - [ ] Aussortieren dass nach installation alles unnötige gelöscht wird und minimum an Programmen etc vorhanden ist (während der installation geclonte repos mit sudo Gruppe rechten löschen und gegebenenfalls neu clonen als richtiger user)
  - [ ] Qtile Widgets überarbeiten
    - [ ] Widgets überarbeiten
    - [ ] Transparenz der Dinge hinter Fullscreen oder zumindest der "Taskbar" auf 100% sodass Fullscreen schöner aussieht
  - [ ] Dependencys für Qtile und Emacs in Installskript, sodass es von Beginn an top funzt -> Wenn alles clean und fertig dann nochmal Neuinstallation in VirtualBox testen und generell cleane lauffähige VM oder Docker Container von meinem Betriebssystem erstellen - erst wenn es so stabil ist dass ich kaum noch Änderungen vornehme!

* Linux & Arch


 1. ~Arch~ mit ~Linux-Kernel~ und der Paketverwaltung ~Pacman~ ist die Grundlage auf dem flowmis-os aufbaut (ein Desktop Betriebssystem dass auf allen x86_64 kompatiblen Machinen mit circa 1 GiB Ram und etwa 2 GiB Speicher installiert werden kann)
 2. ~Bootstick/Iso~ mit ~Arch~ ist nötig um in ein ~live system~ booten zu können von dem aus man Arch, die gewollten Programme und Konfigurationsdateien installieren kann. Es ist machbar die heruntergeladene ISO zu bearbeiten (Iso Master - Linux) und ihr direkt ein Installationsskript mitzugeben, sodass man nach dem booten eigentlich nur noch das Installationsskript in der virtuellen zshell ausführen muss.

** Data

*** Dateistruktur und Dateiorganisation
- Es gibt unterschiedliche Systeme, die hier kurz zusammengefasst dargestellt sind:

    [[ ~/cloud/life/raum/.org/bilder/org-download/2023-08-01-dateiorga-überblick.png]]

  - PARA

    [[ ~/cloud/life/raum/.org/bilder/org-download/2023-08-01-dateiorga-para.png]]

  - ACCESS bzw. EACCESS

    [[ ~/cloud/life/raum/.org/bilder/org-download/2023-08-01-dateiorga-access.png]]

  - Johnny Decimal

    [[ ~/cloud/life/raum/.org/bilder/org-download/2023-08-01-dateiorga-johnny.png]]

  - GTD und [[id:a738d2f8-7f0c-4845-9157-d24f44a8a52d][Zettelkasten]]

    [[ ~/cloud/life/raum/.org/bilder/org-download/2023-08-01-dateiorga-flat.png]]

- Ich nutze eine Mischung aus unterschiedlichem Methoden mit der richtigen Mischung aus fester und flüssiger Struktur und der richtigen Mischung aus Handlung und Theorie
 #+DOWNLOADED: screenshot @ 2023-08-22 09:49:17
 [[file:../cloud/life/raum/.org/bilder/org-download/2023-08-22-09-49-17-screenshot.png]]

- _Regeln:_
  - Ein Backup ist kein Backup - min 2 Backups um bei Wiederherstellung bzw. bei der Arbeit mit dem Backupspeicher keine Gefahr einzugehen (durch Fehler im Skript zur Wiederherstellung oder ähnlichen tut man schonmal etwas unbeabsichtigt löschen! - bei 3 Backups muss man weniger vorsichtig sein und kann beim Backupprozess auch mal ein Fehler machen - dann jedoch muss alles an Alramglocken losgehen und es darf bei Backup 3 kein Fehler gemacht werden!)
  - Im Zweifel sollte ein Link einem Ordner vorgezogen werden - sei sehr vorsichtig und sparsam beim Einsatz von Ordnern (starre und unfreie Gebilde, die Information verstecken indem diese in Schubladen gelegt werden)
  - Links verbinden Ideen, helfen bei der Navigation
  - Tags sind hilfreich wenn man keine Indexnote für einen Bereich erstellen möchte, einen bestimmten Status an eine Notiz anheften will (completed, work in progress, atomic note,...), oder um Notizen einen speziellen Character zu verleihen (Buchnotiz, Zitat, Konzept,...)


- _Tool to see Ordner & Dateistruktur:_ =tree=
   #+begin_src shell :dir /sudo:: :results none
   sudo pacman -S tree
   sudo tree -dCL 3 /
   #+end_src
  - _Flags_:
    (siehe auch ~sudo man tree~)
    -d = nur Ordner ohne Dateien
    -L = zeigt Ordner nur bis zu dem Level das man angibt, also bei -L 2 zeigt es die Ordner im aktuellen Verzeichnis + die darunter, aber nicht weiter
    -C = gibt dem Output Farbe
- _Linux Standard Dateisystem erklärt:_
  - mit dem Tool tree kann man sich die unterste Ordnerstruktur von Linux, also die Wurzel des Baums, bzw. den root Ordner anzeigen lassen (/):
                                                    #+ATTR_HTML: :width 300
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-ordner-struktur-linux.png]]
  - _Bedeutung der Ordner:_
    - /bin - binaries = essentielle asuführbare Dateien (ls, curl, gzip,... ~which curl~ um zu sehen wo die binaries von beispielsweise curl liegen)
    - /sbin - system binaries = system binaries für root und superuser (mount, mkswap,...)
    - /usr/bin - nicht essentielle vom Nutzer hinzugefügte binaries
    - $PATH - umgebungsvariable die alle binaries bzw. ausführbare Dateien enthält (~echo $PATH~ um diese anzuzeigen)
    - /lib - libaries = enthält code etc. um binaries ausführen zu können (geteilter Code zwischen binaries, system binaries, user binaries)
    - /etc - et cetera oder auch editable text config genannt = human readable textbasierete Konfigurationsdateien um bestimmt Systemeinstellungen zu setzen
    - /home - Linux kann mehrere Nutzer enthalten, die man hier finden kann und deren spezifische Nutzerdaten/Konfigurationen dort unter dem Nutzername gespeichert werden -> nicht jeder soll Daten von anderen sehen können und auf Systemkonfigurationen etc. die unterhalb liegen zugreifen können
    - /boot - enthält Dateien die für den Bootvorgang nötig sind wie z.B. den Linux Kernel
    - /dev - device files = Ort um mit interner verbauter oder externer angeschlossener Hardware und deren Treiber zu agieren
    - /var - variablen bzw. variable Dateien = enthält Dateien die sich während der Nutzung ändern (log-files, cache-files etc.)
    - /tmp - temporary files = nach reboot oder ähnlichem sind diese nicht mehr vorhanden
    - /proc - eingebildetes Dateisystem = existiert nicht wirklich bzw. wird kurzzeitig im RAM erstellt/genutzt wenn Kernel bestimmte Dinge machen muss, oder bestimmte Prozesse verfolgt
    - /opt - optionale Software und Dateien = wird man wenig drin machen
- _Meine Struktur:_ /  root  OS(Windows, Linux,...)  -->  /home/user  -->  "falls vorhanden: Ein mit VM geteilter Ordner oder ein Festplattenordner"  --> folgende Ordnerstruktur (2 Ebenen tief):
                                                    #+ATTR_HTML: :width 500
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-ordner-struktur-meine1.png]]
                                                    #+ATTR_HTML: :width 350
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-ordner-struktur-meine2.png]]
                                                    #+ATTR_HTML: :width 500
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-ordner-struktur-meine3.png]]

- _Mein 2nd-brain:_
                                                    #+ATTR_HTML: :width 333
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-2nd-brain-2d.png]]
                                                    #+ATTR_HTML: :width 333
                                                    [[file:../cloud/life/raum/.org/bilder/org-download/2022-12-20-2nd-brain-3d.png]]

*** Namensgebung

- Alle Dateien ausschließlich mit kleinen Buchstaben benennen -> Windows versteht kein Unterschied zwischen Groß- und Kleinschreibung aber Linux schon und das kann dann eventuell zu Problemen führen
  - Nützlicher Befehl: Erst perl-rename in Arch als Paket installieren und dann in dem gewünschten Verzeichnis diesen Befehl ausführen ~perl-rename 'y/A-Z/a-z/' *~
- Wörter nicht mit Leerzeichen trennen und nicht mit _ sondern mit - weil das bei einem Datum Standard ist und es damit am wenigsten zu Problemen kommt
  - Nützlicher Befehl: Erst perl-rename in Arch als Paket installieren und dann in dem gewünschten Verzeichnis diesen Befehl ausführen ~perl-rename 'y/ //-/' *~
- Keinerlei Sonderzeichen im Dateiname verwenden und vorallem nicht $&/
- Name des Projekts oder Kategorie in Name rein
- Bei Projekten Name des Autors und gegebenenfalls Versionsnummer
- Datum und eventuell Timestamp der letzten Bearbeitung -> Format nach ISO 8601: YYYY-MM-DD
- Nur mit . beginnen wenn die Datei nicht überall sichtbar sein soll

*** Sicherung/Backups

- Backups von was, wie und wo hin?
- Systemsicherung mache ich bisher nicht, aber da meine Daten gesichert sind/werden kann ich jederzeit ein neues System aufsetzen - kritische Dinge sollte ich eh immer in einer VM machen, sodass es nicht passier dass mir das ganze System abschmiert
- Meine Backup der Daten erfolgt wie hier erklärt (Alternativ kann ich es auch mit Versionskontrolle und git machen - siehe [[file:~/flowmis-os/flowmis-os.org::Backup Data on Cold-Storage (Festplatte)][git]]):

**** rsync

Vorteil gegenüber git ist dass man sich commits sparen kann und es einfach zu handhaben ist als git. Es gibt auch eine gui Variante wenn man nicht das cli nutzen will (heißt =grsync=)
- ~sudo pacman -S rsync~
- ~sudo man rsync~ (rsync "Optionen/Flags" "Source" "Ziel")
- wichtige commands:
  - Backup erstellen: ~rsync -arv "/Pfad/Ordner mit Dateien" "/Pfad/Backup-Ordner"~ (a = archive - sollte man machen um alles vollständig mit Attributen zu übertragen; v = verbose - zeigt an was gemacht wird)
  - Backup auf Server/Remote: ~rsync -arv "/Pfad/Ordner mit Dateien" "flowmis@192.168.10.127:/home/flowmis/Backup-Ordner"~ (IP etc. halt anpassen - geht easy mit ssh)
  - Sicheres Update des Backups nachdem Änderungen vorgenommen wurden (gelöschte Dateien werden beim Backup nicht gelöscht! - namentlich geänderte Dateien sind dann doppelt vorhanden?):  ~rsync -aurnv "/Pfad/Ordner mit Dateien" "/Pfad/Backup-Ordner"~ (u = update - nur neue und inhaltlich geänderte Dateien werden übertragen; n = dry run - *ACHTUNG:* macht die Aktion nicht wirklich und zeigt nur an was es machen würde -> wenn ich damit zufrieden bin gleichen Befehl nun einfach ohne n und dann macht updated es das Backup)
  - Schnelles Update Backup:  ~rsync -aurv "/Pfad/Ordner mit Dateien" "/Pfad/Backup-Ordner"~
  - Schnelles Update Backup + Löschen im Backup falls was gelöscht wurde:  ~rsync -aurv --delete "/Pfad/Ordner mit Dateien" "/Pfad/Backup-Ordner"~

*** Ver-/Entschlüsselung
**** SSH & GPG/PGP
Vorhandene Keys hinzufügen:
- id_rsa (privater ssh key) in =~/.ssh= kopieren (bzw. erstellen und aus passwortmanager den inhalt hineinkopieren) + der Datei die wichtigen Rechte geben mit ~chmod 600 ~~/.ssh/id_rsa~
- id_rsa.pub ebenfalls in =~/.ssh= einfügen und schauen dass er mit dem auf github oder wo auch immer übereinstimmt - mit der .gitconfig wo user und mail angegeben ist sollte nun alles gehen und der Befehl ~ssh-agent~ eine id ausgeben und damit zeigen dass es funktioniert
Neuen Key erstellen:
- Installation der nötigen Pakete: ~sudo pacman -S openssh gnupg gpa~
  - openssh braucht man um ssh keys zu erstellen
  - gnupg ist die library des OpenPGP Standards
  - gpa ist einfache grafische Applikation um die gpg keys zu verwalten und zu en-/decrypten
- Erstellen eine ssh Keys: ssh-keygen oder ~ssh-keygen -t rsa -b 4096 -C "hedwig.lanter@gmx.net"~
- Passphrase ist PIN

** Programme
- Prinzipielle Philosophie: Möglichst wenige aber dafür geile Programme auf dem Gerät installieren und alle kleinen Anwendungsfälle über Browser-/Webanwendungen
*** Essenzielle Programme
**** Login Manager

- Aktuell nutze ich sddm (weg von ligthdm, da sddm mehr entiwckelt wird und mehr Möglichkeiten bietet)

**** Window Manager

- qtile
- Alternative: xmonad

**** Text Editor + IDE

- Ich nutze Emacs (DoomEmacs)
- Alternative: Pycharm, Vim & VS Code

**** Mail

- Wenn möglich über Emacs machen (mu4e etc.)
- Alternative: Thunderbird, Protonmail

**** Terminal/Konsole/Shell/CLI

| Terminal                                                                                    | Console                                                                                                                                          | Shell                                                                                                     | Command-line                                                                                                                                     |
| <35>                                                                                        | <35>                                                                                                                                             | <35>                                                                                                      | <35>                                                                                                                                             |
|---------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| gnome-terminal, command prompt,...                                                          | Xbox, Playstation, Wii, Switch,...                                                                                                               | bash, fish, zsh,sh,cmd,Power Shell,...                                                                    | DOS Shell,...                                                                                                                                    |
| text input and output environment                                                           | physical terminal = console                                                                                                                      | command-line interpreter                                                                                  | command line = command prompt = type of interface                                                                                                |
| wrapper program that runs a shell & allows to enter commands                                | -                                                                                                                                                | shell = program that actually processes commands and outputs results                                      | command-line interface = any type of interface that is used to enter (textual) commands. One of these is the terminal, but some programs have their own command-line interfaces |
| a program that displays a graphical interface and allows you to interact with the shell     | consisted of a single keyboard and monitor plugged into a dedicated serial console port on a computer for low-level direct communication with the operating system | is a user interface for accessing the services of an operating system                                     | a computer program that processes commands in the form of lines of text - user typically interacts with the shell via a command-line interface (CLI) |
| a device that allows users to interact with computers, typically via a keyboard and display | a physical terminal that is the primary terminal that is directly connected to a machine - it is recognized by the operating system as a (kernel-implemented) terminal | a primary interface that users see when they log in, and its primary function is to launch other programs | an interface that allows a user to type a command (which is expressed as a sequence of characters — typically a command name followed by some parameters) and then press the Return key to execute that command |

- fish, alacritty, aber auch einfach bash sind gut genug für mich mit wenigen Einstellungen
- longterm will ich auf eshell switchen
- Alternative: zsh

**** Browser

- bin mit Brave zufrieden
- Alternative: Firefox https://www.mozilla.org/

**** Passwortmanager

- bin mit KeepassXC zufrieden
- Alternative: Pass (standard unix tool)

**** Git

- Git kann für dein Eigengebrauch sowie für kollektive Bearbeitung von Dateien genutzt werden, da es Veränderungen über die Zeit zu dokumentieren vermag
    #+CAPTION: Git Overview
    #+ATTR_HTML: :width 800
    [[file:bilder/2022-12-15-git-5.png]]
- Git nutzt Kryptographie und die die Integrität der Daten sicherzustellen. Jede Datei und jeder Commit der in ein Repo eingeht und verändert wird, wird mit in einem Hashfunktion gegeben und führt zu einer checksum. Jeder geänderter Bit würde die Checksum verändern und dadurch wird sichergestellt, dass keine Bits verloren gehen. Jede Änderung einer Datei, eines Commits,... führt dazu dass sich die ID und die IDs aller darauf folgenden Sicherungspunkte ändern. Bei einer Commit ID kann man sicher sein dass das Projekt exakt dem Inhalt des zuvor gemachten Commits entspricht und am Commit selbst nichts verändert wurde und zudem, dass nichts in der Geschichte bis zu diesem Commit verändert wurde, da auch das die aktuelle Commit ID ändern würde.

***** Tipps

- _Commit:_
  1. Add the _right_ changes
     - Nicht einfach alles was verändert wurde in einen commit packen - nur das stagen was inhaltlich gut in einen aussagekräftigen commit passt
     - große commits lieber aufteilen und mehrmals nach unterschiedlichen Themen stagen
     - auch innerhalb einer Datei kann man auswählen welche von mehreren Änderungen man stagen will: ~git add -p "Dateiname"~ + mit y und n wählen was gestaged werden soll -> git status sollte dann die Datei bei staged und unstaged aufführen
  2. Compose _good_ commit messages
     - Zeile 1: Subject - Kurzbeschreibung (sollte gewisse Länge nicht unterschreiten)
     - Zeile 3 (durch leere Zeile 2 erkennt git das nun der Body kommt): Body - more detailed (was wurde geändert und warum, auf was muss weiter geachtet werden...)
  3. check the subject and body of commits with ~git log~
- _Branching Strategies:_
    #+CAPTION: Git Overview
    #+ATTR_HTML: :width 800
    [[file:bilder/2022-12-15-git-1.png]]
  1. Da git es einem nicht vorschreibt sollte im Team ein branching workflow schriftlich im Repo ausgemacht werden (avoid collisions and mistakes) - Abhängig von Größe des Teams/Projekts und wie Veröffentlichungen etc. gehandhabt werden -> erlaubt neuen Teilnehmern schnellen Einstieg
  2. Sinnvoll ist beispielsweise eine funktionelle Aufteilung in feature (short-lived branch die in develop branch münden), develop (mündet nach gewisser Testphase in main branch) & main (long-running branch) branches!
  3. Unterschiedliche Workflows:
    #+CAPTION: Subversion-Style Workflow
    #+ATTR_HTML: :width 800
    [[file:bilder/2022-12-15-git-2.png]]
    A centralized workflow is very common, especially from people transitioning from a centralized system. Git will not allow you to push if someone has pushed since the last time you fetched, so a centralized model where all developers push to the same server works just fine.
    #+CAPTION: Integration Manager Workflow
    #+ATTR_HTML: :width 800
    [[file:bilder/2022-12-15-git-3.png]]
    integration manager — person who commits to the 'blessed' repository. A number of developers then clone from that repository, push to their own independent repositories, and ask the integrator to pull in their changes. This is the type of development model often seen with open source or GitHub repositories.
    #+CAPTION: Dictator and Lieutenants Workflow
    #+ATTR_HTML: :width 800
    [[file:bilder/2022-12-15-git-4.png]]
    workflow like that of the Linux kernel. People ('lieutenants') are in charge of a specific subsystem of the project and they merge in all changes related to that subsystem. Another integrator (the 'dictator') can pull changes from only his/her lieutenants and then push to the 'blessed' repository that everyone then clones from again.
- _Pull Request:_
  1. Sinnvoll wenn man will das eine andere Person über bestimmt Comits drüber schaut bevor diese in den Branch aufgenommen werden
  2. Es lädt andere Leute dazu ein Feedback zu geben bevor der Merge stattfindet - wenn es noch nicht gut genug ist wird der request nicht akzeptiert
  3. Ist die Änderung von der oder den anderen Personen akzeptiert kann ein pull request gemerged werden in den branch
  4. Pull Requests sind die Methode um Code etc. zu anderen Repos beizusteuern, auf die man keine ausreichenden Zugriffsrechte hat um es selbst zu mergen
  5. Standard Workflow: Man forkt sich eine Repo. Man nimmt Änderungen vor und wenn man zufrieden ist macht man einen Pull Request. Je nach Interface Github/Gitlab/... sieht es leicht unterschiedlich aus, aber vom Prinzip geht man hin auf beispielsweise Github und schaut sich eine Repo an. Nun will man etwas ändern. Hierzu drückt man fork und wählt den Ort aus wo der Fork hin soll. Nun kann man den fork auf das eigene System clonen (~git clone~) und mit ~checkout~ auf den Branch wechseln um diesen zu bearbeiten. Ist man mit den Änderungen zufrieden commited man und pusht alles in den Fork. Nun geht man auf github um dort einen Pull Request zu erstellen. Nun liegt es am Maintainer ob die Änderungen akzeptiert werden
- _Merge Conflicts:_
  - Sollen Commits aus unterschiedlichen Quellen integriert werden, kann es zu Konfilkten kommen
  - meistens kommt es nicht zu ernsten Konflikten und git kann erkennen was gewollt ist, aber wenn 2 Quellen die gleiche Datei unterschiedlich bearbeiten und dann pushen, ohne die Änderungen von dem der zuerst gepusht hat zu pullen kommt es zu einem Konflikt, da git nicht wissen kann ob der zweite push stattgefunden hätte wenn derjenige zuvor die Änderung gesehen hätte indem er die Änderungen gepulled hätte. Ebenso kommt es zum Konflikt wenn eine Quelle eine Datei löscht und die andere die Datei bearbeitet pushen will
  - git status zeigt uns dass beim mergen etwas schief ging und welches die Pfade bzw. Dateien sind die nicht gemerged werden konnten
  - Man muss Konflikte nicht zwingend auflösen, aber man muss sich darum kümmern, da git sonst durchgehend nervt -> Man kann Konflikte rückgängig machen indem man zu dem Punkt geht der vor dem Konflikt war. ~git merge --abort~ (oder ~git rebase --abort~ wenn beim rebase ein Konflikt aufkommt)
  - tritt ein merge Konflikt auf, markiert git dies in der Datei die Probleme verursacht hat:
     <<<<<<< - zeigt den Start des Problems im aktuellen Branch
     ======= = - trennt es von der andern Ursache für den Konflikt(kommt davor oder danach nichts wurde es gelöscht und man muss entscheiden ob man es nun löschen oder behalten will - gegebenenfalls muss Rücksprache gehalten werden, ob er es beispielsweise ergänzt oder ich es lösche sodass unsere Dateien gleich sind)
     >>>>>>> - zeigt das Ende des Problems
  - nach dem Lösen des Konflikt muss man erneut die von den Konflikten befreite Datei committen
  - *Fast-Forward-Merge* - kann man machen wenn man geforked ist etwas geändert hat und dieses nun ohne das Konflikte entstehen wieder in den Hauptbranch merged -> Beide Branches teilen dann wieder die selbe History. Meistens ist es jedoch der Fall dass der Branch von dem geforked wurde sich zwischenzeitlich auch geändert hat! Hierfür braucht man dann einen Merge Commit
  - *Merge Commmit* - wird automatisch von git erstellt wird wenn zwei branches gemerged werden. Die History zeigt dann auch an dass es zwischenzeitlich zwei oder mehr als zwei unterschiedliche Branches gab! Das wollen nicht alle Projekte, da eine gerade History einfacher nachzuvollziehen ist -> Hier kann man eine Rebase Aktion durchführen
  - In Magit kann ich mir auch innerhalb einer Datei bestimmte Änderungen stagen und commiten und Probleme nach und nach lösen?
- _Rebase:_
  - Bei min 2 Branches (Branch A & Branch B) die zwischenzeitlich unterschiedliche Historie haben und bei denen man einen Merge Commit vermeiden möchte, kann man beispielsweise Branch A quasi bis zum letzten commit bei dem die History noch gleich war wie bei Branch B "löschen/parken", dann alle Änderungen von Branch B übernehmen und nun schauen ob im Anschluss die anderen Änderungen des Branch A ohne Konflikte angehängt werden können. Dadurch ändert man die Historie von Branch A, da man ja quasi die Änderungen von Branch B im Nachhinein zwischen rein schiebt. Wenn noch nicht gepusht wurde wird einfach ein neuer commit erstellt. Hat man jedoch bereits gepusht/gepublished hat man ein Problem und kann nicht so leicht rebasen, da ja zwischenzeitlich jemand anderes an Branch A weitergearbeitet haben kann, den es nun mit der vorherigen Historie nicht mehr gibt! -> Es gilt also: DO NOT USE REBASE ON COMMITS THAT YOU'VE ALREADY PUSHED/SHARED ON A REMOTE REPOSITORY - nur lokal rebasen um aufzuräumen bevor man pushed ;)

| Befehl                  | Beschriebung                                                                                                      |
|-------------------------+-------------------------------------------------------------------------------------------------------------------+
| git diff                | zeigt Unterschiede an                                                                                             |
| git branch              | zeigt die Branches                                                                                                |
| git branch -M main      | benennt Hauptbranch um von master zu main - wegen neuen Sprachregeln wo es kein Master und Slave geben soll       |
| git branch r/a          | r zeigt remote branches und a zeigt alle branches                                                                 |
| git branch feature-a    | macht neuen branch mit Name feature a -> hier kann man ohne Hauptbranch zu gefährden beliebig herumspielen        |
| git checkout feature-a  | wechselt auf feature-a branch                                                                                     |
| git checkout -          | wechselt auf main branch bzw. auf einen anderen                                                                   |
| git log                 | zeigt die commits an                                                                                              |
| git add ./*/Dateiname   | Staging von veränderten Dateien                                                                                   |
| git commit -m "Text"    | richtet Checkpoints ein und hier sollte genau beschrieben werden was geändert wurde da man vll wieder zurück will |
| git push -u origin main | Pusht die locale Repo hoch (falls sie master statt main hat muss dass noch ändern)                                |
| git push                | Pusht veränderungen hoch                                                                                          |
| git status              | zeigt momentanen Status des Branches an und sagt was zu machen ist                                                |
| git pull                | holt alles runter falls sich etwas verändert hat und man es local noch nicht hat                                  |
| git branch -d Name      | Köscht Brach der Name heissttxt                                                                                   |

***** config und credentials

#+begin_src shell :tangle tangle/.gitconfig
[user]
name = flowmis
email = hedwig.lanter@gmx.de
[credential]
helper = store
#+end_src

1. Neuer Token(ist als Passw. für remote zugriff auf Repo nötig): UserIcon oben rechts auf Hompage -> Settings -> Developer --> Neuer Token (Ablaufdatum eingeben und repo ankreuzen - sollte als Rechtevergabe ausreichen)
2. Git installieren: sudo pacman -S git
3. Git credentials einrichten:
        git config --global user.name flowmis                   -> Global user config
        git config --global user.email hedwig.lanter@gmx.de     -> Global user config
        git config -l                                           -> Status überprüfen
        git config --global credential.helper store             -> keine ständige Neuanmeldung (Geht auch über SSH-Verbindung)
4. Git Initialisierung:
        In Verzeichnis für Repo navigieren
        git init .                                              -> Neues git initiieren (nur falls nötig)
        oder: git clone "Link zur Repo"                         -> Files werden heruntergeladen
        oder: git pull und git merge je nachdem was der Stand ist

***** SSH & Github

- SSH-Key erstellen siehe [[file:~/flowmis-os/flowmis-os.org::SSH & GPG/PGP][hier]]
- Bei Github anmelden und Public SSH-Key dort hinzufügen
- Nun kann ich Repo etc über ssh statt https downloaden und brauche keine git-credential Datei für private Repos!
- Wenn ich meine Daten von der Festplatte ziehe kann ich auch meinen SSH-Key mit kopieren statt neue zu erstellen kann ich dann direkt auf Github zugreifen?
- git clone mit ssh link (Achtung nicht mit https:// link!) und ssh keys in github hinzufügen und in home/flowmis/.ssh erstellen mit dem Befehl: ~ssh-keygen -t rsa -b 4096 -C "hedwig.lanter@gmx.net"~ -> Passphrase etc. einfach weglassen und dann mit ~cat~ den pub Key auslesen und komplett kopieren um ihn in Github hinzuzufügen
- [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent][Key lokal hinzufügen]]
- [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account][Key auf Github hinzufügen]]

***** Backup Data on Cold-Storage (Festplatte)

  1. in Ordner 1 gehen von dem Backup gemacht werden soll und git repo initiieren ~git init~ (alternativ in leerem Ornder ~git init~ und dann alle Dateien in diesen Ordner kopieren)
  2. ~git status~ um die vorhandenen Dateien und Ordner anzuzeigen
  3. ~vim .gitignore~ und ergänzen um Name von Dateien/Ordner, die nicht gestaged, gecloned,... werden sollen -> nun nochmals ~git status~ und Dateien/Ordner sollten nun nicht mehr angezeigt werden
  4. ~git add .~
  5. ~git status~ (Dateien sollten nun grün, also gestaged sein)
  6. ~git commit -m "erster commit"~
  7. in den Ornder 2 gehen wo das Backup rein soll und dort ~git init~ + ~git remote add origin "Pfad zum Ordner 1"~
  8. zurück in Ordner 1 gehen und ~git remote add origin "Pfad zum Ordner 2"~ die beiden Ordner koppeln
  9. In Ordner 2 gehen und Dateien laden mit ~git pull origin master~
  10. Nun ein Skript erstellen das aus Ordner 2 ~git pull~ ausführt und regelmäßig und vorallem vor dem update des backups mit git pull in Ordner 1 die Änderungen committen!
  11. _Alternativ git bundle oder git mirror:_
    ~git bundle~ - 1 Datei die man leicht kopieren kann oder per Mail verschicken
      - See [[https://git-scm.com/book/en/v2/Git-Tools-Bundling][bundle]] - also [[https://stackoverflow.com/questions/2545765/how-can-i-email-someone-a-git-repository/2545784#2545784]["How can I email someone a git repository?"]] with the command: ~git bundle create /tmp/foo-all --all~
      - using that bundle, you can clone it, specifying a non-existent folder (outside of any git repo): ~git clone /tmp/foo-all newFolder~
    ~git clone --mirror other/repo.git~
  12. _Unterschied mirror & bundle:_
    ~git bundle --all~
      - docs: man git-bundle, man git-rev-list
      - Atomic = "Hot-Copy"
      - Bundles are dump files and can be directly used with git (verify, clone, etc.).
      - Supports incremental extraction.
      - Verifiable via git bundle verify.
    ~git clone --mirror~
      - docs: man git-clone, man git-fsck, What's the difference between git clone --mirror and git clone --bare
      - Atomic = "Hot-Copy"
      - Mirrors are real git repositories.
      - Primary intention of this command is to build a full active mirror, that periodically fetches updates from the original repository.
      - Supports hardlinks for mirrors on same file system to avoid wasting space.
      - Verifiable via git fsck.
      - Mirrors can be used as a basis for a full file backup script.

**** Pacman

https://wiki.archlinux.de/title/Pacman
- Spiegelserver richtig einrichten dass hier keine Probleme entstehen

| man pacman             | Manual                                                                        |
| <30>                   | <120>                                                                         |
|------------------------+-------------------------------------------------------------------------------|
| pacman -S              | Packet installieren                                                           |
|                        | sudo pacman -S emacs -> installiert EMACS                                     |
| pacman -Sy             | nur sync (=apt-get update)                                                    |
| pacman -Syu            | sync und update (=apt-get update + apt-get upgrade)                           |
| pacman -Ss emacs       | sucht nach Paketen zu EMACS                                                   |
| pacman -Ss ^emacs      | sucht nach Paketen die mit emacs beginnen                                     |
| pacman -R emacs        | Remove package EMACS                                                          |
| pacman -Rs emacs       | Remove package EMACS + Dependencies                                           |
| pacman -Rns emacs      | Remove Paket + Dependencies + Configfiles des Programms -> vollst. deinstall. |
| pacman -Q              | zeigt alle installierten Pakete an                                            |
| pacman -Qe             | zeigt nur die Programme an die man selbst installiert hat                     |
| pacman -Qdt            | zeigt nicht mehr benötigte dependencies                                       |
| pacman -U emacs.tar.gz | installiert lokale Datei emacs.tar.gz                                         |

**** Weitere Programme

- zathura als schöner minimaler pdf reader
- [[https://www.cerebroapp.com/][cerebro]] als Suche und Appöffnungsprogramm ähnlich zu roofi (~yay -S cerebro-bin~) - mit cerebro oder standardmäßig Strg+SPC als Tastenkombi öffnen https://github.com/cerebroapp/cerebro
- ScreenRecorder: deepin-screen-recorder
- Screenshots: flameshot (ähnlich zu snipping tool) -> Alternative: spectacle od. maim (Nachfolger von scrot)
- System optimzer and application monitor: Stacer https://github.com/oguzhaninan/Stacer
- Task-Manger: stacer oder simpler htop -> Alternative: interactive process viewer
- Programme öffnen: rofi -> Alternative: dmenu
- Backup: Timeshift, Git, rsync, VM-Snapshot bzw. Art Image
- Office: onlyoffice oder [[https://www.libreoffice.org/][LibreOffice]]
- Videoplayer: VLC https://www.videolan.org/vlc/index.html
- Zeichenprogramm: Pinta Paint ersatz
- Musikplayer: Clementine (+ Spotify Plugin) braucht Premium Account
- Musik hören/downloaden ohne Werbung: Nuclear Music Streaming App for Windows, Linux, Mac  bissl im Graubereich aber nicer shit (siehe Video von DT)
- Videokonverter: Handbrake
- Bildbearbeitung: Gimp https://www.gimp.org/ -> geiles Tool (kann auch screenshots)
- Videobearbeitungsprogramm: Kdenlive
- Inkscape is a vector graphics editor: Inkscape https://inkscape.org/
- Virtual Box: VirtualMachine https://www.virtualbox.org/
- Spiele: Steam
- Multimediaplattform: Kodi Filme, Serien, Musik, Fernsehen und vieles mehr
- Ebook Manager und Reader: Calibre
- Audio Konverter: DeaDBeeF https://deadbeef.sourceforge.io/
- Kommunikationstool/Hub unterschiedlicher Messenger Apps: Rambox https://rambox.pro/#home
- Files zwischen Betriebssystemen tauschen: NitroShare Daten übertragen auf Handy oder zwischen PCs
- video conferencing: Jitsi https://jitsi.org/
- Programminstaller: Appstore https://app-outlet.github.io/
- Paketverwaltung: Synaptics (sudo apt install synaptic)
- Desktopaussehen verändern: Gnome Tweak Tool Alternative: arch-tweak-tool (sinnvoll bei qtile?)

***** Sonstige Programme

#+begin_src sh  :dir /sudo::
sudo pacman -S viewnior deepin-screen-recorder flameshot gimp pinta vlc kdenlive thunderbird virtualbox gpa ditaa
#+end_src

***** VirtualBox
- Mit Arch als Host System: https://www.youtube.com/watch?v=vQUOf2E6XZw&list=WL&index=21 (Achtung nachdem ich meine Backups hinzugefügt habe muss ich unter Einstellungen bei Display die 3D Accelaration unchecken, da es sonst nicht richtig hochfährt)
- Mit rechter Strg Taste + f oder + c kann man in sklaierten Modus oder Fullscreen Modus wechseln
- =Neu= -> je nach Name den man der Maschine gibt sucht es automatisch richtige Version und Typ - ansonsten manuell wählen -> Einstellungen folgen bis Maschine erstellt wurde -> Maschine auswählen und =Ändern= drücken -> =System= -> uncheck =Diskettenlaufwerk= -> check =EFI aktivieren= -> =Prozessor= -> Einstellen wie viele Prozessoren ich geben will -> =Massenspeicher= -> Unter =Controller:IDE= die .iso Datei reinladen -> =Starten= der Maschine -> Maschine nach der Installation herunterfahren ->  =Massenspeicher=  und .iso entfernen -> Maschine nun fertig und kann gestartet werden
- Extension Pack und VirtualBox von [[https://www.virtualbox.org/wiki/Downloads][hier]] (in Arch durch Packetmanager) downloaden + installieren

- virtualbox-guest-utils mit pacman installieren + VBoxClient-all als cmd in Startupskript um clipboard dragandrop etc. zu aktivieren + Einstellungen der VM -> Allgeimen -> Erweiterte -> Gemeinsame Zwischenablage auf bidirektional -> Drag'n'Drop auf bidirektional
  siehe [[https://wiki.archlinux.org/title/VirtualBox/Install_Arch_Linux_as_a_guest][HIER]]
- Gemeinsamer Ordner host & guest: sudo mount -t vboxsf sharewinarch /home/flowmis/sharewinarch/
- Achtung bei VirtualBox kann es zu Problemen mit Kernel kommen - installiere: sudo pacman -S virtualbox-host-modules-arch (kann sein dass andere bereits installiert sind dann fragt pacman ob diese gelöscht werden sollen und man muss es bestätigen)
- _Extension pack installieren:_
  - in Arch?
  - Windows
    - check virtualbox for updates & update
    - download Extension pack and check if version is the same than virtual box
    - Einstellungen -> Zusatzpakete -> Paket das gedownloaded wurde installieren

* Systemkonfigurationen
** Aussehen

Themes werden bei Linux meist mit GTK und Qt angefertigt und eingestellt -> folgende Programme sind nötig: sudo pacman -S lxappearance qt5ct -> Hier kann man nach Themes suchen: https://archlinux.org/packages
Es kann das meiste eingestellt werden mit: qt5ct (qt5 settings), lxappearance, grub-customizer (mit sudo ausführen)
Downloaden kann man vieles [[https://www.gnome-look.org/][HIER]]
- ~pacman -Ss gtk-theme~
- ~yay -Ss gtk-theme~
- ~pacman -Ss icon-theme~
- ~yay -Ss icon-theme~
Aktuell:
- yay -S papirus-icon-theme
- yay -S papirus-icon-theme
- yay -S bibata-cursor-theme (restart sollte es dann regeln)

 
** Login Manager

- für auto-login: ~sudo nvim sddm.conf~ und folgenden Inhalt rein kopieren:
[Autologin]
User=flowmis
Session=qtile.desktop
- Ich verwende aktuell sddm mit sugar-candy als theme
- Nach der Installation ist der Standard Login Screen aktiviert und (hier: sudo nvim /etc/sddm.conf.d/kde_settings.conf) noch keine config vorhanden
- Um die config zu schreiben einfach das arch-tweak-tool installieren und in den su Modus wechseln und vom Terminal aus im su Modus mit ~archlinux-tweak-tool~ das Tool starten -> in Login wechseln und das zuvor installierte Theme (mit yay installiert) auswählen -> auto-login aktivieren und Desktop Session auf qtile stellen -> Apply Settings -> im Terminal oder in der Gui sollte nun erscheinen dass Theme aktiviert wurde!

#+begin_src sh :tangle no
yay -S sddm-sugar-dark sddm-sugar-candy-git     #Achtung: Geht nur im Terminal wegen Bestätigungen und sudo-privileges
#+end_src

- Anschließend sollte die config vorhanden sein und man kann Themes auch ohne das Tool wechseln indem man ([[/etc/sddm.conf.d/kde_settings.conf][hier]]: ~sudo nvim /etc/sddm.conf.d/kde_settings.conf~) unter Current das Theme angibt das man haben will -> wie z.B. hier: Current=sugar-dark oder Current=Sugar-Candy
- Einstellungen zum Theme kann man hier vornehmen:
  - [[/usr/share/sddm/themes/sugar-dark/theme.conf][sugar-dark Theme]]:

#+begin_src  :dir /sudo::
sudo cp -r /home/flowmis/flowmis-os/Backgrounds/Hintergrund.jpg /usr/share/sddm/themes/sugar-dark/Hintergrund.jpg
sudo sed -i 's/Background="Background.jpg"/Background="Hintergrund.jpg"/g' /usr/share/sddm/themes/sugar-dark/theme.conf
#+end_src

  - [[/usr/share/sddm/themes/sugar-candy/theme.conf][sugar-candy-Theme]]

#+begin_src sh  :dir /sudo::
sudo cp -r /home/flowmis/flowmis-os/Backgrounds/Hintergrund.jpg /usr/share/sddm/themes/sugar-candy/Backgrounds/Hintergrund.jpg
sudo chmod +666 /usr/share/sddm/themes/sugar-candy/Backgrounds/Hintergrund.jpg
sudo sed -i 's/Mountain.jpg"/Hintergrund.jpg"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/BlurRadius="100"/BlurRadius="35"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/HeaderText="Welcome!"/HeaderText="Hi Mane!"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslatePlaceholderUsername=""/TranslatePlaceholderUsername="Benutzername"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslatePlaceholderPassword=""/TranslatePlaceholderPassword="Passwort"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateShowPassword=""/TranslateShowPassword="Passwort anzeigen"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateLogin=""/TranslateLogin="Anmelden"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateLoginFailedWarning=""/TranslateLoginFailedWarning="Anmeldung fehlgeschlagen"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateCapslockWarning=""/TranslateCapslockWarning="Capslock aktiv"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateReboot=""/TranslateReboot="Neu starten"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
sudo sed -i 's/TranslateShutdown=""/TranslateShutdown="Herunterfahren"/g' /usr/share/sddm/themes/sugar-candy/theme.conf
#+end_src

    #+RESULTS:

** Externe Geräte
*** Speicher

Festplatten anzeigen - wenn ich alles wie hier beschrieben installiert habe sollte es ausreichen folgendes zu installieren und pacman übernimmt das mounten von selbst
  - ~pacman -Syu~
  - ~pacman -S ntfs-3g~

Arch mit mehreren fest verbauten Festplatten:
1. ~fdisk -l~ zeigt mir den Namen der erkannten Festplatten
2. ~fdisk /dev/sdb~ Achtung: Name anpassen falls nicht sdb ist
3. Mit ~d~ alle Partitionen etc. löschen + mit ~g~ eine GPT Partitionstabelle erstellen + ~w~ zum schreiben
4. ~sudo mkfs -t ext4 /dev/sdb/~ um Dateisystemtyp und Lesbarkeit bzw. mount Prozess zu ermöglichen - quasi eine Formatierung
5. das es automatisch gemounted wird kann man /etc/fstab bearbeiten mit ~sudo nvim /etc/fstab~ -> sollte etwa so aussehen dann:
    #+begin_src sh
    # <file system> <dir> <type> <options> <dump> <pass>
    # /dev/sda3
    UUID=fa0743cf-60bb-4f21-8c85-09079ca46fbf       /                               ext4    rw,relatime         0 1

    # /dev/sda2
    UUID=064d6fb6-aa09-461b-9601-d1c0c1e24a39       none                            swap    defaults            0 2

    # /dev/sdb
    /dev/sdb                                        /home/flowmis/speicher-haupt    auto    user,exec           0 0
    #+end_src

*** Eingabegeräte Tastatur/Maus
**** Keyboard

1. Befehl "localectl status" --> Abfrage momentane Keyboardeinstellungen
2. System Locales sollte bereits bei Locales eingestellt worden sein sodass nun nur noch folgende 2 Befehle ausgeführt werden müssen
   - localectl --no-convert set-keymap de-latin1-nodeadkeys
   - localectl --no-convert set-x11-keymap de pc105 deadgraveacute
3. Status erneut abfragen und nun sollte folgendes erscheinen
    >localectl status
        System Locale: LANG=de_DE.UTF-8
            VC Keymap: de-latin1-nodeadkeys
            X11 Layout: de
            X11 Model: pc105
            X11 Variant: deadgraveacute
4. Reboot!! (sonst sieht man keine Änderung)
5. Wenn locales alle passen es aber immer noch nicht geht probiere: setxkbmap -layout de

_Logitech G910-Tastatur:_
  - Installation: ~yay -S g810-led-git~ (alternativ siehe [[https://github.com/MatMoul/g810-led/blob/master/INSTALL.md][hier]])
  - Einrichtung:
    - ~sudo g810-led -p /etc/g810-led/profile~ # Load a profile
    - ~sudo g810-led -a 00ff00~ # Set color of all keys
    - ... weitere Beispiele sieher [[https://github.com/MatMoul/g810-led][hier]]
  - GKeys & Treiber - siehe [[https://github.com/JSubelj/g910-gkey-macro-support/wiki/Detailed-installationhttps://github.com/JSubelj/g910-gkey-macro-support/wiki/Detailed-installation][hier]]:
    1. ~sudo modprobe uinput~
    2. ~wget https://github.com/JSubelj/g910-gkey-macro-support/archive/refs/heads/master.zip; unzip master.zip~
    3. ~cd g910-gkey-macro-support-master/~
    4. ~chmod +x installer.sh; sudo ./installer.sh~
    5. ~systemctl status g910-gkeys~ - check if it worked (in Texteingabe gehen und G1 drücken - sollte *Its WORKING!!!* automatisch tippen)
    6. ~sudo systemctl enable --now g910-gkeys.service~
    7. Konfiguration siehe [[https://github.com/JSubelj/g910-gkey-macro-support/wiki/Configuration][hier]]: ~sudo nvim /etc/g910-gkeys/config.json~
    8. ~su~
    9. echo uinput > /etc/modules-load.d/uinput.conf
    10. Restart - check GKeys und wenn sie nicht geben bei 1 beginnen und schauen was nach 6. wenn es noch geht falsch lief und beim Start nicht automatisch aktiviert ist dass es geht

**** Touchpad einrichten

https://wiki.archlinux.org/title/Touchpad_Synaptics habe aber auch eine Datei die ich hier erstelle und die direkt mit meinen Einstellungen an die richtige Stelle kopiert wird -> siehe Installskript

#+begin_src shell :dir "/sudo::" :cache no
sudo cp -r /home/flowmis/flowmis-os/tangle/70-synaptics.conf /etc/X11/xorg.conf.d/70-synaptics.conf
#+end_src

#+RESULTS:

#+begin_src shell :tangle tangle/70-synaptics.conf
# Example xorg.conf.d snippet that assigns the touchpad driver
# to all touchpads. See xorg.conf.d(5) for more information on
# InputClass.
# DO NOT EDIT THIS FILE, your distribution will likely overwrite
# it when updating. Copy (and rename) this file into
# /etc/X11/xorg.conf.d first.
# Additional options may be added in the form of
#   Option "OptionName" "value"
#
Section "InputClass"
        Identifier "touchpad catchall"
        Driver "synaptics"
        MatchIsTouchpad "on"
        Option "TapButton1" "1"
        Option "TapButton2" "3"
        Option "TapButton3" "2"
        Option "VertEdgeScroll" "on"
        Option "VertTwoFingerScroll" "on"
        Option "HorizEdgeScroll" "on"
        Option "HorizTwoFingerScroll" "on"
        Option "CircularScrolling" "on"
        Option "CircScrollTrigger" "2"
        Option "EmulateTwoFingerMinZ" "40"
        Option "EmulateTwoFingerMinW" "8"
        Option "CoastingSpeed" "0"
        Option "FingerLow" "30"
        Option "FingerHigh" "50"
        Option "MaxTapTime" "125"
# This option is recommend on all Linux systems using evdev, but cannot be
# enabled by default. See the following link for details:
# http://who-t.blogspot.com/2010/11/how-to-ignore-configuration-errors.html
#       MatchDevicePath "/dev/input/event*"
EndSection

Section "InputClass"
        Identifier "touchpad ignore duplicates"
        MatchIsTouchpad "on"
        MatchOS "Linux"
        MatchDevicePath "/dev/input/mouse*"
        Option "Ignore" "on"
EndSection

# This option enables the bottom right corner to be a right button on clickpads
# and the right and middle top areas to be right / middle buttons on clickpads
# with a top button area.
# This option is only interpreted by clickpads.
Section "InputClass"
        Identifier "Default clickpad buttons"
        MatchDriver "synaptics"
        Option "SoftButtonAreas" "50% 0 82% 0 0 0 0 0"
        Option "SecondarySoftButtonAreas" "58% 0 0 15% 42% 58% 0 15%"
EndSection

# This option disables software buttons on Apple touchpads.
# This option is only interpreted by clickpads.
Section "InputClass"
        Identifier "Disable clickpad buttons on Apple touchpads"
        MatchProduct "Apple|bcm5974"
        MatchDriver "synaptics"
        Option "SoftButtonAreas" "0 0 0 0 0 0 0 0"
EndSection
#+end_src

*** Bluetooth

- bluez etc. mit pacman installieren
- check status: ~sudo systemctl status bluetooth.service~ (damit scan und connect klappt muss hier enabled kommen)
- enable bluetooth.service: ~sudo systemctl enable bluetooth.service~
- Einstellungen vornhemen:
  - ~bluetoothctl~
  - ~power on~ (bluetoth an und aus ~power off~)
  - ~scan~ (zeigt pairable devices)
  - ~pair "devicename"~ (baut Verbindung auf)
  - ~connect "devicename"~ (verbindet zu einem Gerät)
  - ~trust "devicename"~ (ermöglicht automatisch eine Verbindung herzustellen)
  - ... - use Tab to see option or to fill with name of device etc.
*** Drucker
- ~sudo pacman -S usbutils system-config-printer cups~
- ~lsusb~ check ob er erkannt wird
- ~yay -Ss brother~ bzw. anderer Namen und dann schauen ob man den Treiber für sein Gerät findet und diesen dann installieren
- ~sudo systemctl start cups.service~
- http://localhost:631 öffnen und in der cups Oberfläche ganz oben auf Verwaltung gehen. Dort mit Benutzerdaten anmelden und den Drucker hinzufügen. Im Anschluss kann ich system-config-printer öffnen und dort sollte nun der Drucker sein und konfiguriert werden können. Zudem findet nun auch libre office etc. den Drucker.

** .xprofile

- Wenn man Programme wie networmanager, volumemanager, Dropbox etc beim Start direkt laufen lassen will kann man die jeweiligen .desktop Dateien einfach in ~/.config/autostart kopieren (Ist dann Nutzerspezifisch! Andere Nutzer spawnen andere Programme automatisch je nachdem was sie im Ordner haben)
  -> um sie zu finden eignet sich der Befehl: sudo find / -iname "*.desktop"

#+begin_src sh :tangle tangle/.xprofile
## uncomment in VM
# setxkbmap -layout de &
# xrandr -s 1920x1080 &                               # In VM aktivieren
# VBoxClient-all &                                    # DragDrop und gmeinsames Clipboars in VM aktivieren
## uncomment auf Tower-PC
export QT_QPA_PLATFORMTHEME=qt5ct &
nitrogen --random --set-scaled /home/flowmis/flowmis-os/Backgrounds &
nitrogen --restore &                                # setzt letztes Wallpaper -> mit & lauft es im Hintergrund?
picom -f &                                          # setzt Einstellungen des Compositors for Windows
nextcloud &
blueman-applet &
emacs --daemon &
/usr/bin/xset r rate 200 50 &           #hier gerne noch etwas herumspielen -> stellt den Cursor Speed ein in Emacs und anderswo
# g810-led -s color all ff0000 #startup effect
# g810-led -fx color all 880000 #ganzes Keyboard Farbe ändern
# g810-led -g keys 723535
# g810-led -k logo 987bfe
# g810-led -k g1 ce7ea2 && g810-led -k g2 ce7ea2 && g810-led -k g3 ce7ea2 && g810-led -k g4 ce7ea2 && g810-led -k g5 ce7ea2 && g810-led -k g6 ce7ea2 && g810-led -k g7 ce7ea2 && g810-led -k g8 ce7ea2 && g810-led -k g9 ce7ea2     # setzt Farbeinstellungen für meine Logitech Tastatur
# g810-led -g functions ff00ff
# g810-led -g multimedia ff00ff
# loadkeys de-latin1 &
#+end_src

** Picom
- picom ist ein Fork von compton (Compositor)
- Beispielconfig die mit installiert wird kann durch mich modifiziert werden um Fenster transparent zu machen etc.: ~sudo cp /etc/xdg/picom.conf /home/flowmis/.config/picom/picom.conf~
- picom in Terminal eingeben um zu aktivieren (oder picom -f)

** Audio, Wlan, Helligkeit, mehrere Anzeigen, HDMI etc.

- Sound: ALSA ist in Linux vorinstalliert und checkt I/O nach Soundkarte etc. pulseaudio ist die Ebene higher und macht dass man die von Programmen erhaltene Audio an Karte gegeben wird und man steuern kann welcher Output etc. Pavucontrol ist das grafische Interface/der Client den ich nehme um alles zu steuern(Micro, Ton etc.) und Zeug wie bluez brauche ich um in pavucontrol auch Bluetooth zu haben. Bluetoothdevices verbinden etc mach ich mit Skript oder Shell und bluetoothctl (https://www.makeuseof.com/manage-bluetooth-linux-with-bluetoothctl/  <- wenn es nicht geht muss ich Bluetooth noch anmachen mit bluetoothctl power on)
- *arandr* als Programm um Auflösung, Anordnung etc. von einem Beamer oder einem weiteren Display einzustellen -> ist eine grafische Oberfläche von xrandr

#+begin_src sh  :dir /sudo::
sudo pacman -S mtools base-devel networkmanager nm-connection-editor network-manager-applet brightnessctl i3lock pulseaudio pavucontrol bluez bluez-utils pulseaudio-bluetooth pulseaudio-alsa man-pages-de xorg xorg-xbacklight acpi xfce4-power-manager systemd aspell aspell-de aspell-en pandoc or1k-elf-binutils texlive-core adapta-gtk-theme otf-fira-sans neofetch dunst bind bmon jq gvfs arandr
#+end_src
